types ongoing_outliner_items {
	### LAW ENACTMENT
	type outliner_law_enactment = container {
		datacontext = "[GetPlayer.GetLawBeingEnacted]"
		visible = "[Law.IsBeingEnacted]"

		flowcontainer = {
			direction = vertical

			enactment_button = {}

			outliner_law_enactment_events = {}
		}

		icon = {
			visible = no
			using = highlighted_square_selection
			size = { 100% 100% }
		}
	}

	type enactment_button = button {

		block "size" {
			size = { 350 125 }
		}
		
		onclick = "[InformationPanelBar.OpenPanelTab( 'politics', 'interest_groups' )]"
		using = default_button_primary
		tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 5
			spacing = 1

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 12
				margin_right = 2

				icon = {
					size = { 54 54 }
					texture = "gfx/interface/backgrounds/round_button_bg.dds"
					
					round_progress_default = {
						visible = "[Not(LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25'))]"
						size = { 80% 80% }
						parentanchor = center
						datacontext = "[GetPlayer.GetLawBeingEnacted]"
						value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
					}

					round_progress_bad = {
						visible = "[LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25')]"
						size = { 80% 80% }
						parentanchor = center
						datacontext = "[GetPlayer.GetLawBeingEnacted]"
						value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
					}
					
					law_icon = {
						alpha = "[TransparentIfTrue(LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25'))]"
						size = { 38 38 }
						parentanchor = center
					}

					paused_icon_bad = {
						visible = "[LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25')]"
						#size = { 28 28 }
						parentanchor = center
					}
				}

				vbox = {
					spacing = 4
					layoutpolicy_horizontal = expanding

					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 20 }
						align = center|nobaseline
						elide = right
						fontsize_min = 14
						
						text = "ENACTING_TO_LAW"
						
						background = {
							using = default_header_bg
							alpha = 1
							margin_bottom = 5
							margin_top = 5
							
							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_center.dds"
								blend_mode = alphamultiply
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						textbox = {
							autoresize = yes
							layoutpolicy_horizontal = expanding
							align = left|nobaseline
							elide = right
							fontsize_min = 14
							margin_left = 10
							visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
							
							text = "OUTCOME_SUCCESS_SHORT"
						}
						textbox = {
							autoresize = yes
							layoutpolicy_horizontal = expanding
							align = left|nobaseline
							elide = right
							fontsize_min = 14
							margin_left = 10
							visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
							
							text = "bpm_law_enactment_outliner_voting_label"
						}
	
						hbox = {
							visible = "[GreaterThan_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)0')]"
							layoutpolicy_horizontal = preferred
							spacing = 0
							margin_right = 10

							expand = {}
							
							textbox = {
								autoresize = yes
								align = center|nobaseline
								text = "LAW_ENACTMENT_SETBACKS_LABEL"
								fontsize_min = 14
								elide = right
							}

							widget = {
								size = { 3 3 }
							}

							#Setback 1
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)1')]"
								}
							}

							#Setback 2
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)2')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)2')]"
								}
							}

							#Setback 3
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)3')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)3')]"
								}
							}

							#Setback 4
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)4')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)4')]"
								}
							}

							#Setback 5
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)5')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)5')]"
								}
							}

							#Setback 6
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)6')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)6')]"
								}
							}
						}
					}
				}
			}

			hbox = {
				max_width = 330
				layoutpolicy_horizontal = preferred
				spacing = 1

				# Successes
				#Phase 0
				enactment_phase = {
					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}

				#Phase 1
				enactment_phase = {
					blockoverride "current_phase_visibility" {
						visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "past_phase_visibility" {
						visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "not_reached_phase_visibility" {
						visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "phase_name" {
						text = "[Law.GetCountry.GetCustom('enactment_phase_1')]"
					}

					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}

				#Phase 2
				enactment_phase = {
					blockoverride "current_phase_visibility" {
						visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "past_phase_visibility" {
						visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "not_reached_phase_visibility" {
						visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "phase_name" {
						text = "[Law.GetCountry.GetCustom('enactment_phase_2')]"
					}

					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}
			}

			hbox = {
				tooltip = "bpm_law_voting_tooltip"
				textbox = {
					size = { 50 30 }
					align = left|nobaseline
					text = "bpm_law_enactment_outliner_vote_label"
				}
				textbox = {
					size = { 30 30 }
					text = "bpm_law_enactment_outliner_yea"
					align = center|nobaseline
				}
				battle_progressbar = {
					name = "bpm_law_voting"
					size = { 200 10 }
					blockoverride "values" {
						value = "[GetPlayer.MakeScope.ScriptValue('bpm_law_enactment_yea_votes_cached_value')]"
						min = 0
						max = 1
					}
				}
				textbox = {
					size = { 30 30 }
					text = "bpm_law_enactment_outliner_nay"
					align = center|nobaseline
				}
			}
		}
	}

	type enactment_setback = widget {
		size = { 25 25 }

		icon = {
			name = icon_frame
			size = { 25 25 }
			parentanchor = center
			texture = "gfx/interface/backgrounds/round_button_bg.dds"

			icon = {
				name = icon
				size = { 16 16 }
				parentanchor = center

				block "has_setback_visibility" {
					#visible = "[EqualTo_int32(Law.GetNumberOfSetbacks, '(int32)0')]"
				}

				block "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/red_cross.dds"
				}
			}
		}
	}

	type enactment_phase = hbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		
		block "max_width" {
			max_width = 360
		}

		# Is Current phase
		widget = {

			block "active_size" {
				size = { 110 28 }
			}

			block "current_phase_visibility" {
				visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			icon = {
				using = highlighted_square_selection
			}

			textbox = {
				parentanchor = vcenter|hcenter
				align = nobaseline
				default_format = "#v"
				autoresize = yes
				fontsize_min = 14
				elide = right

				block "text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}

		# Past phase
		widget = {
			block "past_size" {
				size = { 110 28 }
			}

			alpha = 0.8

			block "past_phase_visibility" {
				visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			background = {
				using = entry_bg_simple
			}

			icon = {
				name = icon

				block "checkmark_position" {
					position = { 5 0 }
				}

				size = { 18 18 }
				parentanchor = vcenter

				block "past_phase_icon_texture" {
					texture = "gfx/interface/icons/generic_icons/checkmark.dds"
				}
			}

			textbox = {
				block "past_phase_parentanchor" {
					parentanchor = vcenter|hcenter
				}

				block "past_phase_align" {
					align = nobaseline
				}

				autoresize = yes
				fontsize_min = 14
				elide = right
				position = { -4 0 }

				block "past_phase_text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}

		# Not reached phase
		widget = {
			block "not_reached_size" {
				size = { 110 28 }
			}

			alpha = 0.3

			block "not_reached_phase_visibility" {
				visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			background = {
				using = entry_bg_simple
			}

			textbox = {
				parentanchor = vcenter|hcenter
				align = nobaseline
				autoresize = yes
				fontsize_min = 14
				elide = right

				block "text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}
	}

	### NON-REVOLUTIONARY POLITICAL MOVEMENT ITEM
	#type outliner_non_revolutionary_political_movement_item = flowcontainer {
	#	direction = vertical
	#	visible = "[PoliticalMovement.IsPinnedInOutliner]"
#
	#	onmousehierarchyenter = "[AccessHighlightManager.HighlightPoliticalMovement(PoliticalMovement.Self)]"
	#	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
#
	#	tooltipwidget = {
	#		FancyTooltip_PoliticalMovement = {}
	#	}
#
	#	widget = {
	#		size = { 350 100 }
#
	#		button = {
	#			size = { 100% 90 }
	#			onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
	#			onrightclick = "[RightClickMenuManager.ShowForPoliticalMovement(PoliticalMovement.AccessSelf)]"
	#			using = default_button
	#			parentanchor = bottom
#
	#			vbox = {
	#				layoutpolicy_horizontal = expanding
#
	#				hbox = {
	#					layoutpolicy_horizontal = expanding
	#					margin_top = 5
	#					margin_left = 5
	#					spacing = 2
#
	#					law_icon = {
	#						datacontext = "[PoliticalMovement.GetLaw]"
	#						size = { 37 37 }
	#					}
#
	#					textbox = {
	#						layoutpolicy_horizontal = expanding
	#						size = { 0 20 }
	#						align = left|vcenter
	#						elide = right
	#						fontsize_min = 12
#
	#						background = {
	#							using = dark_area
	#							alpha = 0.3
	#							margin_bottom = 6
	#							margin_top = 4
	#							
	#							modify_texture = {
	#								texture = "gfx/interface/masks/fade_horizontal_center.dds"
	#								blend_mode = alphamultiply
	#							}
	#						}
	#						
	#						text = "[PoliticalMovement.GetName]"	
	#					}
	#				}
#
	#				hbox = {
	#					layoutpolicy_horizontal = expanding
	#					margin = { 10 0 }
#
	#					### Characters ###
	#					hbox = {
	#						layoutpolicy_horizontal = preferred
	#						layoutpolicy_vertical = preferred
	#						visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
	#						margin_left = 5
	#						margin_bottom = 10
	#						spacing = 3
#
	#						dynamicgridbox = {
	#							datamodel = "[PoliticalMovement.GetTopSupportingCharacters]"
	#							flipdirection = yes
#
	#							item = {
	#								icon = {
	#									size = { 28 28 }
	#									texture = "gfx/interface/icons/character_role_icons/agitator.dds"
	#									# parentanchor = bottom
	#									character_ig_icon = {
	#										parentanchor = bottom|right
	#										size = { 15 15 }
	#										blockoverride "in_government_icon" {}
	#										blockoverride "tooltip" {}
	#									}
	#								}
	#							}
	#						}
#
	#						textbox = {
	#							autoresize = yes
	#							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetBottomSupportingCharacters))]"
	#							size = { 0 30 }
	#							align = right|nobaseline
	#							text = "AGITATORS_IN_QUEUE"
	#							fontsize_min = 12
	#							tooltip = "[PoliticalMovement.GetBottomSupportingCharactersDesc]"
	#						}
	#					}
#
	#					vbox = {
	#						layoutpolicy_horizontal = expanding
	#						layoutpolicy_vertical = preferred
	#						margin_bottom = 15
#
	#						textbox = {
	#							layoutpolicy_horizontal = expanding
	#							size = { 0 20 }
	#							align = right|nobaseline
	#							elide = right
	#							fontsize_min = 12
	#							text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
	#						}
#
	#						textbox = {
	#							layoutpolicy_horizontal = expanding
	#							visible = "[Not(PoliticalMovement.IsPlacated)]"
	#							size = { 0 20 }
	#							align = right|nobaseline
	#							elide = right
	#							fontsize_min = 12
	#							text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
	#						}
#
	#						textbox = {
	#							layoutpolicy_horizontal = expanding
	#							size = { 0 20 }
	#							align = right|nobaseline
	#							elide = right
	#							fontsize_min = 12
	#							
	#							visible = "[PoliticalMovement.IsPlacated]"
	#							text = "[concept_political_movement_placated]"
	#						}
	#					}
	#				}
	#			}
	#		}
	#		
	#		### Interest Groups
	#		flowcontainer = {
	#			visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups))]"
	#			datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
	#			parentanchor = hcenter
#
	#			item = {
	#				ig_button = {
	#					size = { 26 26 }
	#					
	#					tooltipwidget = {
	#					 	FancyTooltip_IG = {}
	#					}
	#				}
	#			}
	#		}
	#	}
	#}


# 								### Characters ###
# 								widget = {
# 									layoutpolicy_horizontal = expanding
# 									size = { 0 35 }
# 									visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetTopSupportingCharacters))]"
# 									flowcontainer = {
# 										parentanchor = bottom|left
# 										spacing = 3
# 										margin_right = 10

# 										dynamicgridbox = {
# 											flipdirection = yes
# 											datamodel = "[PoliticalMovement.GetTopSupportingCharacters]"

# 											item = {
# 												character_portrait_mini = {
# 													character_ig_icon = {
# 														size = { 12 12 }
# 														parentanchor = right|bottom
# 													}
# 												}
# 											}
# 										}

# 										textbox = {
# 											visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetBottomSupportingCharacters))]"
# 											tooltip = "[PoliticalMovement.GetBottomSupportingCharactersDesc]"
# 											size = { 0 30 }
# 											align = left|nobaseline
# 											parentanchor = vcenter
# 											text = "AGITATORS_IN_QUEUE"
# 											fontsize_min = 12
# 											autoresize = yes
# 										}
# 									}
# 								}

# 								textbox = {
# 									layoutpolicy_horizontal = expanding
# 									visible = "[Not(PoliticalMovement.IsPlacated)]"
# 									margin_top = 10
# 									size = { 0 20 }
# 									align = right|nobaseline
# 									elide = right
# 									fontsize_min = 12
# 									text = "POLITICAL_MOVEMENT_RADICALISM_WITHOUT_LABEL"
# 								}
# 							}
# 						}
# 					}
# 				}
# 			}

	### REVOLUTIONARY POLITICAL MOVEMENT ITEM
	type outliner_revolutionary_political_movement_item = flowcontainer {
		#visible = "[GetScriptedGui('bpm_revolution_going_on').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
		direction = horizontal
		spacing = 5
		datamodel = "[AccessPlayer.GetGroupsForActiveJournalEntries]"
		item = {
			flowcontainer = {
				direction = vertical
				spacing = 10
				visible = "[ObjectsEqual(MakeScopeFlag(GetJournalEntryGroup('je_group_bpm_dissent').GetName), MakeScopeFlag(JournalEntryGroup.GetName))]"
				datamodel = "[JournalEntryGroup.GetActiveJournalEntryTypes(GetPlayer.Self)]"
				item = {
					outliner_revolutionary_political_movement_item_ind = {
						datacontext = "[AccessPlayer.GetJournalEntry(JournalEntryType.Self)]"
					}
				}
			}
		}
	}

	type outliner_revolutionary_political_movement_item_ind = flowcontainer {
		direction = vertical

		block "datacontext" {
			datacontext = "[AccessPlayer.GetJournalEntry(JournalEntryType.Self)]"
		} 
		#visible = "[JournalEntry.MakeScope.Var('bpm_front_currently_planning').IsSet]"

		# MARK: todo
		#
		#tooltipwidget = {
		#	FancyTooltip_PoliticalMovement = {}
		#}

		state = {
			name = _show
			
			start_sound = {
				soundeffect = "event:/SFX/DLC/1.3_ip1/UI/item_revolutionary_movt"
			}
		}

		widget = {
			size = { 350 120 }
			parentanchor = top

			alpha = 0 

			###REVOLUTION ANIMATION###
			state = {
				#name = _show
				name = testing
				trigger_on_create = yes
				alpha = 1
				delay = 0.2
				duration = 0.7
				on_start = "[PdxGuiWidget.FindChild('revolution_button').TriggerAnimation('1')]"
				on_start = "[PdxGuiWidget.FindChild('interest_group_top').TriggerAnimation('show')]"
			}

			state = {
				#name = _hide
				name = testing2
				#trigger_on_create = yes
				#on_start = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('hide')]"
				alpha = 0
				duration = 1
			}

			widget = {
				parentanchor = bottom
				size = { 100% 110 }

				button = {
					size = { 0 10 }
					name = revolution_button
					#onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
					#onrightclick = "[RightClickMenuManager.ShowForPoliticalMovement(PoliticalMovement.AccessSelf)]"
					using = default_button
					parentanchor = top|right

					state = {
						name = 1
						next = 2
						size = { 380 10 }
						delay = 0.2
						duration = 0.08
						using = Animation_Curve_Default
					}

					state = {
						name = 2
						next = 3
						size = { 350 10 }
						delay = 0.1
						duration = 0.05
						using = Animation_Curve_EaseOut
					}

					state = {
						name = 3
						next = 4
						size = { 350 140 }
						delay = 0.1
						duration = 0.08
						using = Animation_Curve_Default
					}

					state = {
						name = 4
						size = { 350 110 }
						delay = 0.1
						duration = 0.05
						using = Animation_Curve_EaseOut
						on_finish = "[PdxGuiWidget.FindChild('outliner_info').TriggerAnimation('show')]"
						on_finish = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('show')]"
					}

					vfx = {
						size = { 100% 200% }
						blockoverride "entity_instance" {
							entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
						}
						
						alpha = 0.2
					}

					# icon = {
					# 	visible = "[PoliticalMovement.IsBeingHighlighted]"
					# 	using = highlighted_square_selection
					# }

					hbox = {
						layoutpolicy_horizontal = expanding
						name = outliner_info
						margin_left = 8
						alpha = 0

						state = {
							name = show
							alpha = 1
							delay = 0.45
							duration = 0.1
							using = Animation_Curve_Default
						}

						widget = {
							size = { 100 100 }

							widget = {
								name = revolution_clock
								size = { 0 0 }
								parentanchor = center

								###REVOLUTION CLOCK ANIMATION###
								state = {
									name = show
									next = 2
									delay = 0.35
									size = { 180 180 }
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = 2
									size = { 100 100 }
									delay = 0.05
									duration = 0.1
									using = Animation_Curve_EaseOut
								}

								icon = {
									using = rotate_glow_animation_02
									blockoverride "rotate_animation_texture" {
										texture = "gfx/interface/animation/color_bad.dds"
									}
									size = { 250% 250% }
									parentanchor = center
								}

								round_progress_bad = {
									size = { 80% 80% }
									position = { 0 7 }
									value = "[FixedPointToFloat(JournalEntry.MakeScope.ScriptValue('bpm_revclockc'))]"
									parentanchor = center
								}
								
								icon = {
									size = { 100% 100% }
									texture = "gfx/interface/backgrounds/revolution_clock_frame.dds"
								}

								icon = {
									parentanchor = center
									position = { 0 5 }
									size = { 50 50 }
									texture = "gfx/interface/icons/politics_icons/revolution.dds"
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 10
							margin_right = 15

							### REVOLUTION PROGRESSBAR ###
							widget = {
								size = { 230 25 }

								bpm_revolution_progress_bar = {
									blockoverride "values" {
										value = "[FixedPointToFloat( JournalEntry.MakeScope.ScriptValue('bpm_resource_percentage') )]"
										min = 0
										max = 1
									}
								}
							}

							### Movement Header ###
							hbox = {
								layoutpolicy_horizontal = expanding
								margin = { 0 5 }

								background = {
									using = dark_area
									alpha = 0.4
									
									modify_texture = {
										texture = "gfx/interface/masks/fade_horizontal_center.dds"
										blend_mode = alphamultiply
									}
								}

								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 20 }
									align = hcenter|nobaseline
									elide = right
									fontsize_min = 12
									text = "[Localize(Concatenate(JournalEntry.MakeScope.Var('bpm_front_currently_planning').GetFlagName, '_name'))]"	
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 2

								#widget = {
								#	size = { 30 30 }
								#	visible = "[IsDataModelEmpty(PoliticalMovement.GetTopSupportingCharacters)]"
								#}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 2

									expand = {}
									
									icon = {
										size = { 18 18 }
										texture = "gfx/interface/icons/military_icons/attrition.dds"
									}

									textbox = {
										autoresize = yes
										align = nobaseline
										elide = right
										fontsize_min = 12
										default_format = "#v"
										text = "[JournalEntry.MakeScope.Var('bpm_revolution_resource_amount').GetValue|v0]"
									}

									widget = {
										size = { 5 5 }
									}		
									expand = {}												

									icon = {
										size = { 18 18 }
										texture = "gfx/interface/icons/topbar/authority_icon.dds"
									}

									textbox = {
										autoresize = yes
										align = nobaseline
										elide = right
										fontsize_min = 12
										default_format = "#v"
										text = "[GetPlayer.MakeScope.ScriptValue('bpm_state_capacity')|v0]"
									}
									expand = {}
								}
							}
						}
					}
				}
			}

			
			### Interest Groups
			flowcontainer = {
				#datacontext = "[AccessPlayer.GetGrowingCivilWar]"
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList(Concatenate(JournalEntry.MakeScope.Var('bpm_front_currently_planning').GetFlagName, '_members'))))]"
				datamodel = "[GetPlayer.MakeScope.GetList(Concatenate(JournalEntry.MakeScope.Var('bpm_front_currently_planning').GetFlagName, '_members'))]"
				parentanchor = hcenter
				alpha = 0
				name = "interest_group_top"

				state = {
					name = show
					alpha = 1
					delay = 1.4
					duration = 0.2
					using = Animation_Curve_Default
				}
				item = {
					ig_button = {
						datacontext = "[Scope.GetInterestGroup]"
						visible = "[GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001')]"
						size = { 26 26 }
						
						tooltipwidget = {
							FancyTooltip_IG = {}
						}
					}
				}
			}
		}

		#outliner_revolutionary_movement_events = {}
	}

	type bpm_revolution_progress_bar = bad_progressbar_horizontal {
		size = { 100% 100% }

		block "datacontext" {
			datacontext = "[PoliticalMovement.GetCivilWar]"
		}

		tooltip = "BPM_REVOLUTION_PROGRESS_TT"

		blockoverride "values" {
			value = "[FixedPointToFloat( JournalEntry.MakeScope.ScriptValue('bpm_resource_percentage') )]"
			min = 0
			max = 1
		}

		blockoverride "inbetween_progress_and_frame" {
			icon = {
				size = { 100% 100% }
				using = look_at_me_animation_weak
				texture = "gfx/interface/progressbar/progressbar_bad_glow.dds"
			}
		}

		flowcontainer = {
			parentanchor = hcenter|vcenter
			margin_right = 35
			spacing = 5

			textbox = {
				parentanchor = vcenter
				autoresize = yes
				align = nobaseline
				text = "#yellow;bold Resources#!: #red [JournalEntry.MakeScope.Var('bpm_revolution_resource_amount').GetValue|0v]#!"
			}

			textbox = {
				block "next_checkpoint_progress_text_visibility" {}
				parentanchor = vcenter
				autoresize = yes
				align = nobaseline
				raw_text = "(#v [JournalEntry.MakeScope.ScriptValue('bpm_will_change_nw')|-=0]#!)"
			}
		}
		
		blockoverride "in_government_icon"{}

		icon = {
			parentanchor = right|vcenter
			size = { 25 25 }
			texture = "gfx/interface/icons/politics_icons/radicalized.dds"
			position = { -5 0 }
		}
	}

}
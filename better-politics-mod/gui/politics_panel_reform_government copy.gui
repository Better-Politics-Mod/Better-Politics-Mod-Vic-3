types politics_panel_types
{
	type politics_panel_government = vbox {
		datacontext = "[PoliticsPanel.AccessReformGovernment]"
		
		background = {
			texture = "gfx/interface/illustrations/government/government_illustration.dds"
			alpha = 0.1
			fittype = center
			
			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_center.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_less_left.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_less_right.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
		}
			
		fullscreen_scrollarea = {
			visible = "[Not(GetVariableSystem.Exists('reform_government'))]"

			blockoverride "scrollarea_content" {
				politics_panel_government_details = {}
			}
		}	
				
		fullscreen_scrollarea = {
			visible = "[GetVariableSystem.Exists('reform_government')]"

			blockoverride "scrollarea_content" {
				politics_panel_government_reform = {}
			}
		}
		
		### BUTTONS
		hbox = {
			margin = { 40 10 }
			spacing = 25
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			
			button = {
				size = { 400 45 }
				using = default_button_primary
				onclick = "[GetVariableSystem.Toggle('reform_government')]"
				visible = "[GetVariableSystem.Exists('reform_government')]"
				using = back_button_sound

				textbox = {
					size = { 100% 100% }
					text = "EXIT_REFORM_GOVERNMENT"
					using = fontsize_large
					align = center|nobaseline
				}
			}

			button = {
				datacontext = "[ReformGovernment.GetCountry]"
				size = { 400 45 }
				using = default_button_primary
				onclick = "[ReformGovernment.Reset]"    # needed in order to update Parties and IGs
				onclick = "[GetVariableSystem.Toggle('reform_government')]"
				visible = "[Not(GetVariableSystem.Exists('reform_government'))]"
				enabled = "[Not(Country.IsCivilWarCountry)]"
				tooltip = "[AddLocalizationIf(Country.IsCivilWarCountry, 'REFORM_GOVERNMENT_CIVIL_WAR_ERROR')]"

				textbox = {
					size = { 100% 100% }
					text = "REFORM_GOVERNMENT"
					using = fontsize_large
					align = center|nobaseline
				}
			}
			
			widget = { size = { 10 10 }}
			
			button = {
				visible = "[GetVariableSystem.Exists('reform_government')]"
				using = default_button_action
				size = { 180 45 }
				text = "RESET"
				using = fontsize_large
				onclick = "[ReformGovernment.Reset]"
				enabled = "[ReformGovernment.HasMadeAnyChanges]"
			}
			button = {
				visible = "[GetVariableSystem.Exists('reform_government')]"
				using = default_button_primary_action
				size = { 300 45 }
				text = "CONFIRM"
				using = fontsize_large
				tooltip = "TOOLTIP_REFORM_GOVERNMENT"
				enabled = "[IsValid(ReformGovernment.Confirm)]"
				onclick = "[Execute(ReformGovernment.Confirm)]"
				onclick = "[GetVariableSystem.Toggle('reform_government')]"
				using = confirm_button_sound
			}
		}
	}
	
	
	### RULER ITEM
	type politics_panel_reform_no_ruler_item = widget {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		size = { 0 176 }
		using = tooltip_below

		block "visible" {
			visible = "[Not(Country.HasRuler)]"
		}

		block "datacontext" {
			datacontext = "[AccessPlayer.AccessRuler]"
		}
		
		using = entry_bg_fancy
		
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5
			margin_left = 5
			margin_right = 10
		
			character_portrait_medium_torso = {
				blockoverride "tooltip" {}
				using = tooltip_below
				blockoverride "show_hat" {}
				blockoverride "highlight" {}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

			}
		}
	}
	
	### GOVERNMENT DETAILS
	type politics_panel_government_details = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 10 10 }

		### GOVERNMENT
		vbox = {
			name = "tutorial_highlight_whole_government"
			margin_right = 10
			margin_left = 5
			layoutstretchfactor_horizontal = 3
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			datacontext = "[GetPlayer]"
			
			background = {
				using = light_bg
				alpha = 0.65
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_less_left.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
			
			### HEADER
			hbox = {
				name = "tutorial_highlight_government_title"
				spacing = 5
				margin = { 5 8 }
				layoutpolicy_horizontal = preferred
				
				background = {
					using = default_header_bg_faded
				}
				
				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 30 }
					text = "#tooltippable #tooltip:[Country.GetGovernment.GetTooltipTag],GOVERNMENT_TYPE_TOOLTIP_DESC [Country.GetGovernment.GetName]#!#!"
					align = left|nobaseline
					elide = right
					using = fontsize_xxl
					margin_left = 5
				}
				
				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					tooltip = IN_GOVERNMENT_DESC
					spacing = 10
				
					textbox = {
						autoresize = yes
						text = "GOVERNMENT"
						align = right|nobaseline
						elide = right
						default_format = "#title"
						using = fontsize_large
					}
					icon = {
						texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
						size = { 30 30 }
					}
				}
			}
			
			widget = { size = { 1 10 }}
			
			### RULER / LEGITIMACY + MISC
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10
				margin_bottom = 10
				
				### HAS LEADER IN REFORM
				politics_panel_ruler_item = {

					blockoverride "visible" {
						visible = "[Or( And(Country.HasRuler, Not(GetVariableSystem.Exists('reform_government'))), And( ReformGovernment.HasStagedGroup, GetVariableSystem.Exists('reform_government')) )]"
					}
					
					blockoverride "datacontext" {
						datacontext = "[ReformGovernment.GetPredictedNewRuler( GetVariableSystem.Exists('reform_government') )]"
					}

					layoutstretchfactor_horizontal = 3
					
					blockoverride "additional_info_top_right" {
						textbox = {
							visible = "[And( ReformGovernment.WouldGetNewRuler, And( ReformGovernment.HasStagedGroup, GetVariableSystem.Exists('reform_government')) )]"
							text = "GOVERNMENT_NEW_RULER"
							autoresize = yes
							maximumsize = { -1 16 }
							elide = right
							align = nobaseline
							using = fontsize_large
							margin = { 15 0 }
							
							using = look_at_me_text_animation
							
							background = {
								using = dark_area
								margin = { 10 5 }
								
								modify_texture = {
									texture = "gfx/interface/masks/fade_horizontal_center.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = alphamultiply
								}
							}
						}
					}
				}
				
				### NO NEW LEADER POSSIBLE IN REFORM
				politics_panel_reform_no_ruler_item = {

					blockoverride "visible" {
						visible = "[And( Not(ReformGovernment.HasStagedGroup), GetVariableSystem.Exists('reform_government')) ]"
					}
					
					blockoverride "datacontext" {
						datacontext = "[ReformGovernment.GetPredictedNewRuler( GetVariableSystem.Exists('reform_government') )]"
					}

					layoutstretchfactor_horizontal = 3
					
				}
				
				vbox = {
					layoutstretchfactor_horizontal = 2
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					margin = { 10 10 }
					
					background = {
						using = entry_bg_simple
					}
					
					# legitimacy
					politics_panel_legitimacy_item = {
						visible = "[Not(GetVariableSystem.Exists('reform_government'))]"
					}
					
					# legitimacy when reforming
					vbox = {
						visible = "[GetVariableSystem.Exists('reform_government')]"
						margin = { 5 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						
						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10
							datacontext = "[ReformGovernment.GetPredictedLegitimacyLevel]"
							tooltip = "LEGITIMACY_LEVEL_PREDICTED_TOOLTIP"
								
							textbox = {
								autoresize = yes
								text = "[LegitimacyLevel.GetNameNoFormatting|v]"
								align = left|nobaseline
								elide = right
							}
							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								text = "#variable [ReformGovernment.GetPredictedLegitimacy]#!"
								align = left|nobaseline
								elide = right
							}
							
							# changed value plus
							widget = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								visible = "[GreaterThan_int32(ReformGovernment.GetPredictedLegitimacyDelta, '(int32)0')]"
								
								icon = {
									position = { 35 0 }
									alpha = 0.5
									using = rotate_glow_animation_02
									size = { 100 100 }
									parentanchor = right|vcenter
								}
								
								textbox = {
									size = { 100% 100% }
									text = "[ReformGovernment.GetPredictedLegitimacyDelta|=p]"
									align = right|nobaseline
									elide = right
									using = fontsize_large
								}
							}
							
							# changed value minus
							widget = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								visible = "[LessThan_int32(ReformGovernment.GetPredictedLegitimacyDelta, '(int32)0')]"
								
								icon = {
									position = { 35 0 }
									alpha = 1
									using = rotate_glow_animation_02
									blockoverride "rotate_animation_texture" {
										texture = "gfx/interface/animation/color_bad.dds"
									}
									size = { 100 100 }
									parentanchor = right|vcenter
								}
								
								textbox = {
									size = { 100% 100% }
									text = "[ReformGovernment.GetPredictedLegitimacyDelta|r]"
									align = right|nobaseline
									elide = right
									using = fontsize_large
								}
							}
						}
						
						levels_progressbar = {
							datamodel = "[GetLegitimacyLevels]"
							
							blockoverride "item_properties" {
								layoutstretchfactor_horizontal = "[LegitimacyLevel.GetWidth]"
								tooltip = "[SelectLocalization( LegitimacyLevel.IsActive( ReformGovernment.GetPredictedLegitimacy ), 'LEGITIMACY_LEVEL_PREDICTED_TOOLTIP', 'LEGITIMACY_LEVEL_INACTIVE_TOOLTIP' )]"
							}
							blockoverride "level_active" {
								visible = "[LegitimacyLevel.IsActive( ReformGovernment.GetPredictedLegitimacy )]"
							}
							blockoverride "last_level" {
								visible = "[Not(EqualTo_int32( LegitimacyLevel.GetUpperBound, '(int32)100' ))]"
							}
							blockoverride "default_progressbar_visible" {
								visible = "[EqualTo_int32( LegitimacyLevel.GetDeltaSign( Country.GetGovernmentLegitimacy, ReformGovernment.GetPredictedLegitimacy ), '(int32)0' )]"
							}
							blockoverride "will_increase_visible" {
								visible = "[GreaterThan_int32( LegitimacyLevel.GetDeltaSign( Country.GetGovernmentLegitimacy, ReformGovernment.GetPredictedLegitimacy ), '(int32)0' )]"
							}
							blockoverride "will_decrease_visible" {
								visible = "[LessThan_int32( LegitimacyLevel.GetDeltaSign( Country.GetGovernmentLegitimacy, ReformGovernment.GetPredictedLegitimacy ), '(int32)0' )]"
							}
							blockoverride "default_progressbar_value" {
								value = "[LegitimacyLevel.GetProgress( ReformGovernment.GetPredictedLegitimacy )]"
							}
							blockoverride "will_change_new_value" {
								value = "[LegitimacyLevel.GetProgress( ReformGovernment.GetPredictedLegitimacy )]"
							}
							blockoverride "will_change_start_value" {
								value = "[LegitimacyLevel.GetProgress( Country.GetGovernmentLegitimacy )]"
							}
							blockoverride "level_predicted" {
								using = look_at_me_animation
							}
						}
					}
					
					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
					
					# radicals
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						using = radicals_tooltip_with_graph
						margin = { 5 0 }
						
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							text = "RADICALS"
							elide = right
						}
						icon = {
							texture = "gfx/interface/icons/generic_icons/population_radical.dds"
							size = { 40 40 }
						}
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							text = "#variable [Country.GetNumRadicals|D]#!"
							align = left|nobaseline
						}
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							
							widget = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								visible = "[And(NotEqualTo_int32(ReformGovernment.GetPredictedRadicalsDelta, '(int32)0'),GetVariableSystem.Exists('reform_government'))]"
								
								background = {
									using = dark_area_rounded
									margin = { 0 2 }
									margin_left = 15
								}
								
								textbox = {
									size = { 100% 100% }
									text = "[ReformGovernment.GetPredictedRadicalsDelta|D=-]"
									align = left|nobaseline
									using = fontsize_large
									default_format = "#variable"
									using = look_at_me_text_animation
								}
							}
						}
					}
					
					# loyalists
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						using = loyalists_tooltip_with_graph
						margin = { 5 0 }
						
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							text = "LOYALISTS"
							elide = right
						}
						icon = {
							texture = "gfx/interface/icons/generic_icons/population_loyalist.dds"
							size = { 40 40 }
						}
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							text = "#variable [Country.GetNumLoyalists|D]#!"
							align = left|nobaseline
						}
						
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							
							widget = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								visible = "[And(NotEqualTo_int32(ReformGovernment.GetPredictedLoyalistsDelta, '(int32)0'),GetVariableSystem.Exists('reform_government'))]"
								
								background = {
									using = dark_area_rounded
									margin = { 0 2 }
									margin_left = 15
								}
								
								textbox = {
									size = { 100% 100% }
									text = "[ReformGovernment.GetPredictedLoyalistsDelta|D=+]"
									align = left|nobaseline
									using = fontsize_large
									default_format = "#variable"
									using = look_at_me_text_animation
								}
							}
						}
					}
				}
			}
			
			### BUTTONS
			hbox = {
				visible = "[GetVariableSystem.Exists('reform_government')]"
				margin = { 40 10 }
				spacing = 25
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				
				button = {
					size = { 300 45 }
					using = default_button_primary
					tooltip = "[ReformGovernment.GetOptionIndexTooltip('(int32)0')]"
					enabled = "[ReformGovernment.OptionIndexIsValid('(int32)0')]"
					onclick = "[ReformGovernment.SelectOptionIndex('(int32)0')]"
					using = back_button_sound

					textbox = {
						size = { 100% 100% }
						text = "[ReformGovernment.GetOptionIndexText('(int32)0')]"
						using = fontsize_large
						align = center|nobaseline
					}
				}

				button = {
					size = { 300 45 }
					using = default_button_primary
					tooltip = "[ReformGovernment.GetOptionIndexTooltip('(int32)1')]"
					enabled = "[ReformGovernment.OptionIndexIsValid('(int32)1')]"
					onclick = "[ReformGovernment.SelectOptionIndex('(int32)1')]"
					using = back_button_sound

					textbox = {
						size = { 100% 100% }
						text = "[ReformGovernment.GetOptionIndexText('(int32)1')]"
						using = fontsize_large
						align = center|nobaseline
					}
				}
				
				button = {
					size = { 300 45 }
					using = default_button_primary
					tooltip = "[ReformGovernment.GetOptionIndexTooltip('(int32)2')]"
					enabled = "[ReformGovernment.OptionIndexIsValid('(int32)2')]"
					onclick = "[ReformGovernment.SelectOptionIndex('(int32)2')]"
					using = back_button_sound

					textbox = {
						size = { 100% 100% }
						text = "[ReformGovernment.GetOptionIndexText('(int32)2')]"
						using = fontsize_large
						align = center|nobaseline
					}
				}
			}
						
			### IG LIST
			parties_and_ig_list_details = {

				blockoverride "datamodel" {
					block "datamodel_government_parties" {
						datamodel = "[AccessPlayer.GetPartiesInGovernment]"
					}
				}
				blockoverride "datamodel_independent_igs" {
					block "datamodel_government_independent" {
						datamodel = "[AccessPlayer.GetIndependentInterestGroupsInGovernment]"
					}
				}
				blockoverride "move_to_government_button" {}
				blockoverride "move_to_government_button_party" {}
				blockoverride "marginal_igs" {}
			}
			
			widget = { size = { 1 40 }}

			# laws 
			laws_support_list = {
				visible = "[Not(GetVariableSystem.Exists('reform_government'))]"
				
				blockoverride "laws_has_changed_text" {}
			}
			
			# laws when reforming
			laws_support_list = {
				visible = "[GetVariableSystem.Exists('reform_government')]"
				
				blockoverride "laws_with_support_header" {
					text = "CHEAPEST_LAWS_HEADER_REFORM"
				}
				blockoverride "laws_without_support_header" {
					text = "LAWS_WITHOUT_SUPPORT_REFORM"
				}
				blockoverride "laws_with_support_datamodel" {
					datamodel = "[ReformGovernment.GetPredictedLawsWithGovernmentOrMovementSupport]"
				}
				blockoverride "laws_without_support_datamodel" {
					datamodel = "[ReformGovernment.GetPredictedLawsWithoutGovernmentOrMovementSupport]"
				}
			}
			
			widget = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			}
		}
		
		vertical_divider_stronger_full = {
			size = { 2 0 }
			layoutpolicy_vertical = expanding
		}
		
		### OPPOSITION
		vbox = {
			margin_right = 5
			margin_left = 10
			layoutstretchfactor_horizontal = 2
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			datacontext = "[GetPlayer]"
			
			background = {
				using = dark_area
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_less_right.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
			
			### HEADER
			hbox = {
				name = "tutorial_highlight_opposition_title"		
				spacing = 5
				margin = { 5 8 }
				layoutpolicy_horizontal = preferred
				tooltip = IN_OPPOSITION_DESC

				background = {
					using = default_header_bg_faded
				}
				
				widget = {
					layoutpolicy_horizontal = expanding
					size = { 0 30 }
				}
				
				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					tooltip = IN_OPPOSITION_DESC
					spacing = 10
				
					textbox = {
						autoresize = yes
						text = "IN_OPPOSITION_TITLE"
						align = right|nobaseline
						elide = right
						default_format = "#title"
						using = fontsize_large
					}
					icon = {
						texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
						size = { 30 30 }
					}
				}
			}
			
			textbox = {
				layoutpolicy_horizontal = preferred
				visible = "[And(IsDataModelEmpty(AccessPlayer.GetPartiesInOpposition),IsDataModelEmpty(AccessPlayer.GetIndependentInterestGroupsInOpposition))]"
				text = "NO_OPPOSITION"
				using = fontsize_xl
				align = center|nobaseline
				size = { 0 100 }
				alpha = 0.5
			}
			
			### IG LIST
			parties_and_ig_list_details = {
				name = "tutorial_highlight_all_opposition_interest_groups"
				
				blockoverride "datamodel" {
					block "datamodel_opposition_parties" {
						datamodel = "[AccessPlayer.GetPartiesInOpposition]"
					}
				}
				blockoverride "datamodel_independent_igs" {
					block "datamodel_opposition_independent" {
						datamodel = "[AccessPlayer.GetIndependentInterestGroupsInOpposition]"
					}
				}
				blockoverride "highlight_name" {
					name = "tutorial_highlight_interest_group"
				}
				blockoverride "move_to_opposition_button" {}
				blockoverride "move_to_opposition_button_party" {}
			}
			
			widget = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding
			}
		}
	}
	
	### REFORM GOVERNMENT
	type politics_panel_government_reform = politics_panel_government_details {

		# government
		blockoverride "datamodel_government_parties" {
			datamodel = "[ReformGovernment.GetAllStagedParties]"
		}
		blockoverride "datamodel_government_independent" {
			datamodel = "[ReformGovernment.GetIndependentStagedInterestGroups]"
		}
		
		# opposition
		blockoverride "datamodel_opposition_parties" {
			datamodel = "[ReformGovernment.GetAllPotentialParties]"
		}
		blockoverride "datamodel_opposition_independent" {
			datamodel = "[ReformGovernment.GetIndependentPotentialInterestGroups]"
		}
		
		blockoverride "marginal_igs" {}
	}
	
	### LAWS SUPPORT LIST
	type laws_support_list = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		
		### LAWS WITH GOVERNMENT SUPPORT BUTTON
		section_header_button = {
			name = "tutorial_highlight_laws_government_want"
			
			blockoverride "layout" {
				size = { 0 38 }
				layoutpolicy_horizontal = preferred
			}
			blockoverride "left_text" {
				datacontext = "[ReformGovernment]"
				block "laws_with_support_header" {
					text = "CHEAPEST_LAWS_HEADER"
				}
			}
			blockoverride "right_text" {
				block "laws_has_changed_text" {
					textbox = {
						visible = "[ReformGovernment.HasPredictedLawsWithGovernmentOrMovementSupportChanged]"
						datacontext = "[ReformGovernment]"
						text = "LAWS_HAS_CHANGED"
						autoresize = yes
						margin_left = 10
						margin_right = 25
						align = nobaseline
						using = fontsize_large
						alwaystransparent = yes
						using = look_at_me_text_animation
					}
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('laws_with_support_expanded')]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('laws_with_support_expanded'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('laws_with_support_expanded')]"
			}
		}

		### LAWS WITH GOVERNMENT SUPPORT LIST
		vbox = {
			margin = { 0 8 }
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			visible = "[GetVariableSystem.Exists('laws_with_support_expanded')]"
			block "laws_with_support_datamodel" {
				datamodel = "[AccessPlayer.AccessLawsWithGovernmentOrMovementSupport]"
			}
			spacing = 15

			item = {
				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					enactable_generic_law3 = {}
				}
			}
		}
		
		### LAWS WITHOUT GOVERNMENT SUPPORT BUTTON
		section_header_button = {
			
			blockoverride "layout" {
				size = { 0 38 }
				layoutpolicy_horizontal = preferred
			}
			blockoverride "left_text" {
				datacontext = "[ReformGovernment]"
				block "laws_without_support_header" {
					text = "LAWS_WITHOUT_SUPPORT"
				}
			}
			
			blockoverride "right_text" {
				block "laws_has_changed_text" {
					textbox = {
						visible = "[ReformGovernment.HasPredictedLawsWithoutGovernmentOrMovementSupportChanged]"
						datacontext = "[ReformGovernment]"
						text = "LAWS_HAS_CHANGED"
						autoresize = yes
						margin_left = 10
						margin_right = 25
						align = nobaseline
						using = fontsize_large
						alwaystransparent = yes
						using = look_at_me_text_animation
					}
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('laws_without_support_expanded')]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('laws_without_support_expanded'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('laws_without_support_expanded')]"
			}
		}

		### LAWS WITHOUT GOVERNMENT SUPPORT LIST
		vbox = {
			margin = { 0 8 }
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			visible = "[GetVariableSystem.Exists('laws_without_support_expanded')]"
			block "laws_without_support_datamodel" {
				datamodel = "[AccessPlayer.AccessLawsWithoutGovernmentOrMovementSupport]"
			}
			spacing = 15

			item = {
				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					enactable_generic_law3 = {}
				}
			}
		}
	}
}

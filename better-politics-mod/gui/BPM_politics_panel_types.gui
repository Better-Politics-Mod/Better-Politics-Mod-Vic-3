types information_panels_types
{
	type ig_button = ig_icon {
		visible = "[GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001')]"
		blockoverride "influential" {}
		blockoverride "icon" {
			button_icon_round = {
				visible = "[InterestGroup.IsValid]"
				block "onclick" {
					onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
				}

				blockoverride "icon" {
					influential_icon = {}
					icon = {
						size = { 100% 100% }
						texture = "[InterestGroup.GetTexture]"
						parentanchor = center
					}
				}
				blockoverride "icon_size" {
					size = { 80% 80% }
				}
			}
			icon = {
				visible = "[Not(InterestGroup.IsValid)]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/ig_icons/politically_unaligned.dds"
				parentanchor = center
				tooltipwidget = {
					FancyTooltip_PoliticallyUnaligned = {}
				}
			}
		}
	}

	### PARTIES AND IG LIST DETAILS
	type parties_and_ig_list_details = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		name = "tutorial_highlight_interest_group"
		margin_top = 5
		spacing = 15

		### PARTIES
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel" {}
			spacing = 0
			
			item = {
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					
					background = {
						using = simple_frame
					}
					
					block "move_to_government_button_party" {
						button_icon_move_left = {
							enabled = "[Party.CanJoinGoverment]"
							visible = "[GetVariableSystem.Exists('reform_government')]"
							layoutpolicy_vertical = expanding
							size = { 35 0 }
							onclick = "[ReformGovernment.StageParty(Party.AccessSelf)]"
							tooltip = "[Party.GetCanJoinGovermentDesc]"
							
							blockoverride "icon_size" {
								size = { 35 90 }
							}
						}
					}
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
					
						# party header
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 0
							margin = { 10 0 }
							
							background = {
								texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
								color = "[Party.GetColor]"
								alpha = 0.5
								mirror = horizontal
								
								modify_texture = {
									using = texture_velvet
								}
							}
							
							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 40 }
								text = "#v [Party.GetName]#!"
								align = right|nobaseline
								block "highlight_name" {}
								elide = right
								using = fontsize_large
							}
							icon = {
								texture = "[Party.GetIcon]"
								size = { 35 35 }
							}
						}
						
						# igs inside the party
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							datamodel = "[Party.GetMembers]"
							
							item = {
								ig_item_details = {
									blockoverride "move_to_government_button" {}
									blockoverride "move_to_opposition_button" {}
								}
							}
						}
					}
				
					block "move_to_opposition_button_party" {
						button_icon_move_right = {
							visible = "[GetVariableSystem.Exists('reform_government')]"
							layoutpolicy_vertical = expanding
							size = { 35 0 }
							onclick = "[ReformGovernment.UnstageParty(Party.AccessSelf)]"
							
							blockoverride "icon_size" {
								size = { 35 90 }
							}
						}
					}
				}
			}
		}
		
		### IGs without parties
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel_independent_igs" {}
			
			item = {
				ig_item_details = {}
			}
		}
		
		block "marginal_igs" {
			### MARGINAL IGs
			section_header_button = {
				name = "tutorial_highlight_marginalized_title"
				visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessMarginalInterestGroups))]"
				
				blockoverride "layout" {
					size = { 0 38 }
					layoutpolicy_horizontal = expanding
				}
				blockoverride "left_text" {
					text = "MARGINAL_TITLE_ACCORDION"
				}

				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle('marginalized_igs_expanded')]"
				}
				
				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists('marginalized_igs_expanded'))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists('marginalized_igs_expanded')]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				visible = "[GetVariableSystem.Exists('marginalized_igs_expanded')]"
				datamodel = "[AccessPlayer.AccessMarginalInterestGroups]"
				
				item = {
					ig_item_details = {}
				}
			}
		}
		
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}

	### IG ITEM DETAILS
	type ig_item_details = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		visible = "[Or( GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001'), Or( InterestGroup.IsInGovernment, Or( InterestGroup.IsBolstered,InterestGroup.IsSuppressed ) ) )]"
		background = {
			texture = "gfx/interface/masks/fade_horizontal_center.dds"
			color = "[InterestGroup.GetColor]"
			alpha = 0.3

			modify_texture = {
				using = texture_velvet
			}
		}
		
		divider_clean = {
			size = { 0 2 }
			layoutpolicy_horizontal = expanding
		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			
			block "move_to_government_button" {
				button_icon_move_left = {
					visible = "[GetVariableSystem.Exists('reform_government')]"
					layoutpolicy_vertical = expanding
					size = { 35 0 }
					onclick = "[ReformGovernment.StageInterestGroup(InterestGroup.AccessSelf)]"
					enabled = "[Not(InterestGroup.IsRevolutionary)]"
					tooltip = "[AddLocalizationIf(InterestGroup.IsRevolutionary, 'REFORM_GOVERNMENT_MOVE_TO_GOVERNMENT_BUTTON_TOOLTIP')]"
					
					blockoverride "icon_size" {
						size = { 35 80 }
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 2
				margin_bottom = 2

				### IG BUTTON
				widget = {
					size = { 80 60 }
					ig_button = {
						block "ig_button_size" {
							size = { 60 60 }
						}
						margin_left = 20
						using = tooltip_ws
						parentanchor = right|vcenter
						blockoverride "in_government_icon" {}
					}
					icon = {
						texture = "gfx/interface/icons/generic_icons/leading_interest_group_icon.dds"
						size = { 32 32 }
						visible = "[InterestGroup.IsLeadingGovernment]"
						tooltip = "LEADING_IG"
						parentanchor = top|left
					}
					### REVOLUTION
					icon = {
						visible = "[InterestGroup.IsInsurrectionary]"
						size = { 32 32 }
						texture = "gfx/interface/icons/politics_icons/radicalized.dds"
						tooltip = "RADICAL_IG_TOOLTIP"
						parentanchor = top|left
					}

					icon = {
						visible = "[InterestGroup.IsRevolutionary]"
						size = { 32 32 }
						texture = "gfx/interface/icons/politics_icons/revolution.dds"
						tooltip = "REVOLUTION_IG_TOOLTIP"
						parentanchor = top|left
					}
					### SUPPRESSED / BOLSTERED
					icon = {
						tooltip = "TOOLTIP_SUPPRESSED"
						size = { 32 32 }
						visible = "[InterestGroup.IsSuppressed]"
						texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
						parentanchor = bottom|left
					}
					icon = {
						tooltip = "TOOLTIP_PROMOTED"
						size = { 32 32 }
						visible = "[InterestGroup.IsBolstered]"
						texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
						parentanchor = bottom|left
					}
				}

				### CENTER INFO
				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					margin = { 0 0 }

					### HEADER ( icons / name / clout )
					hbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						spacing = 5
						margin = { 0 2 }

						background = {
							using = dark_area

							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_center.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
							}
						}

						widget = {
							size = { 30 30 }

							icon = {
								visible = "[InterestGroup.GetPartyAffiliationHighest.IsValid]"
								texture = "[InterestGroup.GetPartyAffiliationHighest.GetIcon]"
								size = { 28 28 }
								tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
								parentanchor = center
							}
	
							icon = {
								visible = "[Not(InterestGroup.GetPartyAffiliationHighest.IsValid)]"
								texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
								size = { 28 28 }
								tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
								parentanchor = center
							}
						}

						### NAME
						textbox = {
							#layoutpolicy_horizontal = expanding
							size = { 0 30 }
							text = "#v  [InterestGroup.GetNameNoFormatting]#! "
							align = left|nobaseline
							autoresize = yes
							using = fontsize_large
							block "highlight_name" {}
							elide = right
						}

						# button_icon_goto = {
						#	size = { 25 25 }
 						#	onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
						#	tooltip = "GO_TO_BUTTON_INTEREST_GROUP"
						#	block "goto_visibility" {}
 						# }

 						expand = {}
						
						vbox = {
							layoutpolicy_vertical = preferred
							spacing = 0
							hbox = {
								tooltip = "TOOLTIP_POPULATION"
								widget = {
									size = { 31 0 }
								}
								icon = {
									texture = "gfx/interface/icons/generic_icons/population.dds"
									size = { 20 20 }
								}
								textbox = {
									size = { 69 20 }
									align = right|nobaseline
									text = "[InterestGroup.GetPopulation|v1*]"
									default_format = "#variable"
									using = fontsize_large
								}
							}
							bar_horizontal = {
								size = { 120 10 }

								blockoverride "values" {
									min = 0
									max = "[AccessPlayer.GetMaxCloutOrPopulationPercentage]"
									value = "[FixedPointToFloat(InterestGroup.GetPopulationInCountryAsPercentage)]"
									invertprogress = yes
								}
								blockoverride "marker_widgetanchor" {
									widgetanchor = left
									mirror = horizontal
								}
								blockoverride "color" {
									color = "[InterestGroup.GetColor]"
								}
							}
						}
						vertical_divider_full = {}
						vbox = {
							layoutpolicy_vertical = preferred
							spacing = 0
							hbox = {
								widget = {
									size = { 48 0 }
								}
								using = clout_tooltip_with_graph
								icon = {
									texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
									size = { 20 20 }
								}
								textbox = {
									size = { 54 20 }
									align = right|nobaseline
									text = "[InterestGroup.GetClout|%1]"
									default_format = "#variable"
									using = fontsize_large
								}
							}
							bar_horizontal = {
								size = { 120 10 }

								blockoverride "values" {
									min = 0
									max = "[AccessPlayer.GetMaxCloutOrPopulationPercentage]"
									value = "[FixedPointToFloat(InterestGroup.GetClout)]"
									invertprogress = yes
								}
								blockoverride "marker_widgetanchor" {
									widgetanchor = left
									mirror = horizontal
								}
								blockoverride "color" {
									color = "[InterestGroup.GetColor]"
								}
							}
						}
					}

					### BOTTOM PART
					hbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						margin_top = 0

						fixedgridbox = {
							name = "traits_box"
							flipdirection = yes
							datamodel = "[InterestGroup.AccessTraits]"
							addcolumn = 20
							addrow = 30
							minimumsize = { 60 -1 }

							item = {
								widget = {
									size = { 27 32 }
									icon = {
										parentanchor = center
										texture = "[InterestGroupTrait.GetTexture]"
										enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
										tooltipwidget = {
											FancyTooltip_InterestGroupTrait = {}
										}
										using = tooltip_above
										size = { 27 36 }
										alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"
									}
								}
							}
						}

						textbox = {
							margin_left = 10
							layoutpolicy_horizontal = growing
							align = nobaseline
							text = "#v ([InterestGroup.GetApprovalValue|=+])#!"
							tooltip = "IG_APPROVAL_BREAKDOWN"
						}

						# dynamicgridbox = {
						#	visible = "[Not(IsDataModelEmpty(InterestGroup.GetAgitators))]"
						#	flipdirection = yes
						#	datamodel = "[InterestGroup.GetAgitators]"
						#	elide = right
						#	item = {
						#		character_portrait_small = {}
						#	}
						# }

						### IDEOLOGIES
						dynamicgridbox = {
							flipdirection = yes
							name = "ideologies_box"
							datamodel = "[InterestGroup.AccessIntrinsicIdeologies]"
							item = {
								widget = {
									size = { 23 23 }

									icon = {
										texture = "gfx/interface/backgrounds/circle_bg_simple_dark.dds"
										size = { 23 23 }
										parentanchor = center
									}

									icon = {
										texture = "[Ideology.GetTexture]"
										tooltipwidget = {
											FancyTooltip_Ideology = {}
										}
										size = { 27 27 }
										using = tooltip_above
										parentanchor = center
									}
								}
							}
						}
					}
					
					# textbox = {
                    #    layoutpolicy_horizontal = expanding
                    #    size = { 0 30 }
                    #    text = "#v [InterestGroup.GetWillJoinPartyDesc]#!"
                    #    tooltip = "[InterestGroup.GetWillJoinPartyTooltip]"
                    # }
				}

				### LEADER
				widget = {
					size = { 75 65 }

					character_portrait_base_head = {
						datacontext = "[InterestGroup.AccessLeader]"
						using = tooltip_above
						blockoverride "show_hat" {}
						parentanchor = top|left
						blockoverride "highlight" {}
						blockoverride "rank_icon" {}
						blockoverride "portrait_size" {
							size = { 70 70 }
						}
						blockoverride "icon_size" {
							size = { 0 0 }
						}
						size = {65 65}
					}

					icon = {
						datacontext = "[InterestGroup.AccessLeader.GetIdeology]"
						texture = "[Ideology.GetTexture]"
						tooltipwidget = {
							FancyTooltip_Ideology = {}
						}
						size = { 35 35 }
						parentanchor = bottom|right
					}
				}
				
				widget = { size = { 5 5 }}
			}
			
			block "move_to_opposition_button" {
				button_icon_move_right = {
					visible = "[GetVariableSystem.Exists('reform_government')]"
					layoutpolicy_vertical = expanding
					size = { 35 0 }
					onclick = "[ReformGovernment.UnstageInterestGroup(InterestGroup.AccessSelf)]"
					
					blockoverride "icon_size" {
						size = { 35 90 }
					}
				}
			}
		}
	}

	type interest_group_filter = hbox {
		spacing = 5
		visible = "[GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001')]"
		
		### IG FILTER
		widget = {
			size = { 40 40 }
			tooltip = "EXILE_POOL_INTEREST_GROUP_FILTER"
			using = tooltip_above

			button_icon_round = {
				size = { 40 40 }
				parentanchor = center

				click_modifiers = {
					ondefault = "[GetExilePool.SetInterestGroupFilter(InterestGroup.Self)]"
					onshift = "[GetExilePool.ToggleInterestGroupFilter(InterestGroup.Self)]"
				}

				using = market_filter_staple_button_sound

				blockoverride "icon" {
					texture = "[InterestGroup.GetTexture]"
				}
				blockoverride "icon_size" {
					size = { 40 40 }
				}
			}

			icon = {
				texture = "gfx/interface/backgrounds/circle_bg_simple_dark.dds"
				size = { 40 40 }
				visible = "[GetExilePool.IsInterestGroupFiltered(InterestGroup.Self)]"
				using = default_fade_in_out
			}
			icon = {
				texture = "gfx/interface/backgrounds/circle_bg_simple_dark.dds"
				size = { 40 40 }
				visible = "[GetExilePool.IsInterestGroupFiltered(InterestGroup.Self)]"
				using = default_fade_in_out
			}
		}
	}


	type politics_panel_legitimacy_item = vbox {
		margin = { 5 0 }
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		spacing = 5

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			tooltip = "bpm_political_stability_tooltip"

			block "text" {
				textbox = {
					autoresize = yes
					text = "[Concept('concept_bpm_political_stability', concept_bpm_political_stability)]:"
					align = left|nobaseline
					elide = right
				}
				textbox = {
					autoresize = yes
					size = { 0 20 }
					raw_text = "#variable [GetPlayer.MakeScope.ScriptValue('bpm_political_stability')|d1] #! @arrow_right! #variable [GetPlayer.MakeScope.ScriptValue('bpm_political_stability_baseline_target')|d1] #!"
					align = left|nobaseline
					elide = right
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 20 }
					raw_text = "(#variable [GetPlayer.MakeScope.ScriptValue('bpm_political_stability_rate_signed')|+=d1] #!/month)"
					align = left|nobaseline
					elide = right
				}
			}
		}

		gold_progressbar_horizontal = {
			name = "bpm_stability_progressbar"
			layoutpolicy_horizontal = expanding
			size = { 15 15 }
			tooltip = "bpm_political_stability_tooltip"
			blockoverride "values" {
				value = "[GetPlayer.MakeScope.ScriptValue('bpm_political_stability')]"
				min = 0
				max = 100
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			datacontext = "[Country.GetGovernmentLegitimacyLevel]"
			tooltip = "LEGITIMACY_LEVEL_ACTIVE_TOOLTIP"

			block "text" {
				textbox = {
					autoresize = yes
					raw_text = "[Concept('concept_legitimacy', concept_legitimacy)]:"
					align = left|nobaseline
					elide = right
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					raw_text = "[LegitimacyLevel.GetNameNoFormatting|v] (#variable [Country.GetGovernmentLegitimacy]#!)"
					align = left|nobaseline
					elide = right
				}
			}
		}
		
		levels_progressbar = {
			datamodel = "[GetLegitimacyLevels]"
			
			blockoverride "item_properties" {
				layoutstretchfactor_horizontal = "[LegitimacyLevel.GetWidth]"
				tooltip = "[SelectLocalization( LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy ), 'LEGITIMACY_LEVEL_ACTIVE_TOOLTIP', 'LEGITIMACY_LEVEL_INACTIVE_TOOLTIP' )]"
			}
			blockoverride "level_active" {
				visible = "[LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy )]"
			}
			blockoverride "last_level" {
				visible = "[Not(EqualTo_int32( LegitimacyLevel.GetUpperBound, '(int32)100' ))]"
			}
			blockoverride "default_progressbar_value" {
				value = "[LegitimacyLevel.GetProgress( Country.GetGovernmentLegitimacy )]"
			}
		}
	}

	type active_law = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"
		using = tooltip_ws
		tooltip = "DATA_LAW_NAME_TOOLTIP_CONDENSED"

		tooltipwidget = {
			FancyTooltip_Law = {}
		}

		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = fixed
			size = { 0 85 }

			onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"

			button = {
				using = default_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
			}

			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding
				margin = { 5 0 }
				margin_right = 20

				law_icon = {
					size = { 80 80 }
				}

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					margin = { 5 5 }

					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}

					textbox = {
						layoutpolicy_horizontal = preferred
						text = "LAW_GROUP"
						align = left|nobaseline
						size = { 0 20 }
						elide = right
					}

					textbox = {
						layoutpolicy_horizontal = preferred
						text = "LAW"
						default_format = "#variable"
						align = left|nobaseline
						size = { 0 30 }
						using = fontsize_xl
						elide = right
						margin_bottom = 5
					}

					approval_info_small2 = {
						layoutpolicy_horizontal = preferred

						name = "approval_info"
						alpha = 0

						state = {
							name = show
							using = default_show_properties_fast
						}
						state = {
							name = hide
							using = default_hide_properties_fast
						}
					}

					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
				}

				widget = {
					size = { 40 60 }
					datacontext = "[Law.GetGroup]"
					datacontext = "[Law]"
					tooltip = "TOOLTIP_CHANGE_FROM_LAW"

					icon = {
						texture = "gfx/interface/icons/generic_icons/toggle.dds"
						alpha = "[TransparentIfFalse(Or(GreaterThan_int32(LawGroup.GetNumEnactable, '(int32)0'), GreaterThan_int32(LawGroup.GetNumPotentialEnactable, '(int32)0')))]"

						size = { 30 30 }
						parentanchor = bottom|hcenter
					}

					textbox = {
						visible = "[Not(GetPlayer.IsEnactingLaw)]"
						background = {
							using = blurry_dark_background
						}
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumEnactable)]"
						raw_text = "#variable [LawGroup.GetNumEnactable]#!"
						parentanchor = hcenter
					}

					textbox = {
						visible = "[GetPlayer.IsEnactingLaw]"
						background = {
							using = blurry_dark_background
						}
						raw_text = "#variable [LawGroup.GetNumPotentialEnactable]#!"
						tooltip = "TOOLTIP_CHANGE_FROM_LAW_CURRENTLY_ENACTING"
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumPotentialEnactable)]"
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						parentanchor = hcenter
					}
				}
			}
		}
	}
}
types information_panels_types
{
	type ig_button = ig_icon {
		#visible = "[GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001')]"
		blockoverride "influential" {}
		blockoverride "icon" {
			button_icon_round = {
				visible = "[InterestGroup.IsValid]"
				block "onclick" {
					onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
				}

				blockoverride "icon" {
					influential_icon = {}
					icon = {
						size = { 100% 100% }
						texture = "[InterestGroup.GetTexture]"
						parentanchor = center
					}
				}
				blockoverride "icon_size" {
					size = { 82% 82% }
				}
			}
			icon = {
				visible = "[Not(InterestGroup.IsValid)]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/ig_icons/politically_unaligned.dds"
				parentanchor = center
				tooltipwidget = {
					FancyTooltip_PoliticallyUnaligned = {}
				}
			}
		}
	}

	### PARTIES AND IG LIST DETAILS
	type parties_and_ig_list_details = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		name = "tutorial_highlight_interest_group"
		margin_top = 5
		spacing = 15

		### PARTIES
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel" {}
			spacing = 0
			
			item = {
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					
					background = {
						using = simple_frame
					}
					
					block "move_to_government_button_party" {
						button_icon_move_left = {
							enabled = "[Party.CanJoinGovernment]"
							visible = "[GetVariableSystem.Exists('reform_government')]"
							layoutpolicy_vertical = expanding
							size = { 35 0 }
							onclick = "[ReformGovernment.StageParty(Party.AccessSelf)]"
							tooltip = "[Party.GetCanJoinGovernmentDesc]"
							
							blockoverride "icon_size" {
								size = { 35 90 }
							}
						}
					}
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
					
						# party header
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 0
							margin = { 10 0 }
							
							background = {
								texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
								color = "[Party.GetColor]"
								alpha = 0.45
								mirror = horizontal
								
								modify_texture = {
									using = texture_velvet
								}
							}
							hbox = {
								layoutpolicy_horizontal = expanding
								#hbox = {
								#	size = { 100 -1 }
								#	textbox = {
								#		#margin = { 10 0 }
								#		#size = { 0 40 }
								#		raw_text = "#bold Establishment #! #v [GetPlayer.MakeScope.Var(Concatenate('bpm_party_establishment_', Party.GetCustom('bpm_party_name'))).GetValue]#! ([GetPlayer.MakeScope.Var(Concatenate('bpm_party_establishment_cached_trend_', Party.GetCustom('bpm_party_name'))).GetValue])"
								#		layoutpolicy_horizontal = expanding
								#		align = left|nobaseline
								#		block "highlight_name" {}
								#		#elide = right
								#		using = fontsize_medium
								#	}
								#}
								layoutpolicy_horizontal = expanding
								spacing = 10
								#hbox = {
								#	tooltip = "[Party.MakeScope.GetScriptValueDesc('bpm_party_establishment_trend')]"
								#	block "text" {
								#		textbox = {

								#			autoresize = yes
								#			raw_text = "[Concept('concept_bpm_party_establishment', 'Establishment')]:"
								#			align = left|nobaseline
								#			elide = right
								#		}
								#		textbox = {
								#			autoresize = yes
								#			size = { 0 20 }
								#			raw_text = "#variable [GetPlayer.MakeScope.Var(Concatenate('bpm_party_establishment_', Party.GetCustom('bpm_party_name'))).GetValue|v1] #!"
								#			align = left|nobaseline
								#			elide = right
								#		}
								#		textbox = {
								#			layoutpolicy_horizontal = expanding
								#			size = { 0 20 }
								#			raw_text = "(#variable [GetPlayer.MakeScope.Var(Concatenate('bpm_party_establishment_cached_trend_', Party.GetCustom('bpm_party_name'))).GetValue|+=d1] #!/month)"
								#			align = left|nobaseline
								#			elide = right
								#		}
								#	}
								#}

								##expand = {}

								#expand = {
								#	size = { 60% 100% }
								#}
								
								textbox = {
									margin = { 10 0 }
									#layoutpolicy_horizontal = expanding
									size = { 0 40 }
									raw_text = "#v [Party.GetName]#!"
									layoutpolicy_horizontal = expanding
									align = right|nobaseline
									block "highlight_name" {}
									#elide = right
									using = fontsize_large
								}
							}

							icon = {
								texture = "[Party.GetIcon]"
								size = { 32 32 }
							}
						}
						
						# igs inside the party
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							datamodel = "[Party.GetMembers]"
							
							item = {
								ig_item_details = {
									blockoverride "move_to_government_button" {}
									blockoverride "move_to_opposition_button" {}
								}
							}
						}
					}
				
					block "move_to_opposition_button_party" {
						button_icon_move_right = {
							visible = "[GetVariableSystem.Exists('reform_government')]"
							layoutpolicy_vertical = expanding
							size = { 35 0 }
							onclick = "[ReformGovernment.UnstageParty(Party.AccessSelf)]"
							
							blockoverride "icon_size" {
								size = { 35 90 }
							}
						}
					}
				}
			}
		}
		
		### IGs without parties
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel_independent_igs" {}
			
			item = {
				ig_item_details = {}
			}
		}
		
		block "marginal_igs" {
			### MARGINAL IGs
			section_header_button = {
				name = "tutorial_highlight_marginalized_title"
				visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessMarginalInterestGroups))]"
				
				blockoverride "layout" {
					size = { 0 38 }
					layoutpolicy_horizontal = expanding
				}
				blockoverride "left_text" {
					text = "MARGINAL_TITLE_ACCORDION"
				}

				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle('marginalized_igs_expanded')]"
				}
				
				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists('marginalized_igs_expanded'))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists('marginalized_igs_expanded')]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				visible = "[GetVariableSystem.Exists('marginalized_igs_expanded')]"
				datamodel = "[AccessPlayer.AccessMarginalInterestGroups]"
				
				item = {
					ig_item_details = {}
				}
			}
		}
		
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}

	### IG ITEM DETAILS
	type ig_item_details = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		visible = "[Or( GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001'), InterestGroup.IsInGovernment )]"
		background = {
			texture = "gfx/interface/masks/fade_horizontal_center.dds"
			color = "[InterestGroup.GetColor]"
			alpha = 0.3

			modify_texture = {
				using = texture_velvet
			}
		}
		
		divider_clean = {
			size = { 0 2 }
			layoutpolicy_horizontal = expanding
		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			
			block "move_to_government_button" {
				button_icon_move_left = {
					visible = "[GetVariableSystem.Exists('reform_government')]"
					layoutpolicy_vertical = expanding
					size = { 35 0 }
					onclick = "[ReformGovernment.StageInterestGroup(InterestGroup.AccessSelf)]"
					enabled = "[Not(InterestGroup.IsRevolutionary)]"
					tooltip = "[AddLocalizationIf(InterestGroup.IsRevolutionary, 'REFORM_GOVERNMENT_MOVE_TO_GOVERNMENT_BUTTON_TOOLTIP')]"
					
					blockoverride "icon_size" {
						size = { 35 80 }
					}
				}
			}
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					spacing = 2
					margin_bottom = 2

					### IG BUTTON
					widget = {
						size = { 90 60 }
						ig_button = {
							block "ig_button_size" {
								size = { 60 60 }
							}
							using = tooltip_ws
							parentanchor = hcenter|vcenter
							blockoverride "in_government_icon" {}
						}
						icon = {
							texture = "gfx/interface/icons/generic_icons/leading_interest_group_icon.dds"
							size = { 32 32 }
							visible = "[InterestGroup.IsLeadingGovernment]"
							tooltip = "LEADING_IG"
							parentanchor = top|left
						}
						### RADICAL/VERY RADICAL/MODERATE
						icon = {
							texture = "gfx/interface/icons/extremist_icons/very_extremist.dds"
							size = { 32 32 }
							visible = "[GetScriptedGui('bpm_very_radical_ig_icon_gui').IsShown(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
							tooltip = "bpm_super_extremist"
							parentanchor = bottom|right
						}
						icon = {
							texture = "gfx/interface/icons/extremist_icons/extremist.dds"
							size = { 32 32 }
							visible = "[GetScriptedGui('bpm_radical_ig_icon_gui').IsShown(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
							tooltip = "bpm_extremist"
							parentanchor = bottom|right
						}
						### REVOLUTION
						icon = {
							visible = "[InterestGroup.IsInsurrectionary]"
							size = { 32 32 }
							texture = "gfx/interface/icons/politics_icons/radicalized.dds"
							tooltip = "RADICAL_IG_TOOLTIP"
							parentanchor = top|left
						}

						icon = {
							visible = "[InterestGroup.IsRevolutionary]"
							size = { 32 32 }
							texture = "gfx/interface/icons/politics_icons/revolution.dds"
							tooltip = "REVOLUTION_IG_TOOLTIP"
							parentanchor = top|left
						}
						# ### SUPPRESSED / BOLSTERED
						# icon = {
						# 	tooltip = "TOOLTIP_SUPPRESSED"
						# 	size = { 32 32 }
						# 	visible = "[InterestGroup.IsSuppressed]"
						# 	texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
						# 	parentanchor = bottom|left
						# }
						# icon = {
						# 	tooltip = "TOOLTIP_PROMOTED"
						# 	size = { 32 32 }
						# 	visible = "[InterestGroup.IsBolstered]"
						# 	texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
						# 	parentanchor = bottom|left
						# }
					}

					### CENTER INFO
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						margin = { 0 0 }

						### HEADER ( icons / name / clout )
						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							spacing = 5
							margin = { 0 2 }

							background = {
								using = dark_area

								modify_texture = {
									texture = "gfx/interface/masks/fade_horizontal_center.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = alphamultiply
								}
							}

							widget = {
								size = { 30 30 }

								icon = {
									visible = "[InterestGroup.GetPartyAffiliationHighest.IsValid]"
									texture = "[InterestGroup.GetPartyAffiliationHighest.GetIcon]"
									size = { 28 28 }
									tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
									parentanchor = center
								}
		
								icon = {
									visible = "[Not(InterestGroup.GetPartyAffiliationHighest.IsValid)]"
									texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
									size = { 28 28 }
									tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
									parentanchor = center
								}
							}

							### NAME
							textbox = {
								#layoutpolicy_horizontal = expanding
								size = { 0 30 }
								raw_text = "#v  [InterestGroup.GetNameNoFormatting]#! "
								align = left|nobaseline
								autoresize = yes
								using = fontsize_large
								block "highlight_name" {}
								elide = right
							}

							# button_icon_goto = {
							#	size = { 25 25 }
							#	onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
							#	tooltip = "GO_TO_BUTTON_INTEREST_GROUP"
							#	block "goto_visibility" {}
							# }

							expand = {}
							
							vbox = {
								layoutpolicy_vertical = preferred
								spacing = 0
								hbox = {
									tooltip = "TOOLTIP_POPULATION"
									widget = {
										size = { 31 0 }
									}
									icon = {
										texture = "gfx/interface/icons/generic_icons/population.dds"
										size = { 20 20 }
									}
									textbox = {
										size = { 69 20 }
										align = right|nobaseline
										text = "[InterestGroup.GetPopulation|v1*]"
										default_format = "#variable"
										using = fontsize_large
									}
								}
								bar_horizontal = {
									size = { 120 10 }

									blockoverride "values" {
										min = 0
										max = "[AccessPlayer.GetMaxCloutOrPopulationPercentage]"
										value = "[FixedPointToFloat(InterestGroup.GetPopulationInCountryAsPercentage)]"
										invertprogress = yes
									}
									blockoverride "marker_widgetanchor" {
										widgetanchor = left
										mirror = horizontal
									}
									blockoverride "color" {
										color = "[InterestGroup.GetColor]"
									}
								}
							}
							vertical_divider_full = {}
							vbox = {
								layoutpolicy_vertical = preferred
								spacing = 0
								hbox = {
									widget = {
										size = { 48 0 }
									}
									using = clout_tooltip_with_graph
									icon = {
										texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
										size = { 20 20 }
									}
									textbox = {
										size = { 54 20 }
										align = right|nobaseline
										text = "[InterestGroup.GetClout|%1]"
										default_format = "#variable"
										using = fontsize_large
									}
								}
								bar_horizontal = {
									size = { 120 10 }

									blockoverride "values" {
										min = 0
										max = "[AccessPlayer.GetMaxCloutOrPopulationPercentage]"
										value = "[FixedPointToFloat(InterestGroup.GetClout)]"
										invertprogress = yes
									}
									blockoverride "marker_widgetanchor" {
										widgetanchor = left
										mirror = horizontal
									}
									blockoverride "color" {
										color = "[InterestGroup.GetColor]"
									}
								}
							}
						}

						### BOTTOM PART
						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							margin_top = 0

							fixedgridbox = {
								name = "traits_box"
								flipdirection = yes
								datamodel = "[InterestGroup.AccessTraits]"
								addcolumn = 20
								addrow = 30
								minimumsize = { 60 -1 }

								item = {
									widget = {
										size = { 27 32 }
										icon = {
											parentanchor = center
											texture = "[InterestGroupTrait.GetTexture]"
											enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
											tooltipwidget = {
												FancyTooltip_InterestGroupTrait = {}
											}
											using = tooltip_above
											size = { 27 36 }
											alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"
										}
									}
								}
							}

							textbox = {
								margin_left = 10
								layoutpolicy_horizontal = shrinking
								autoresize = yes
								minimumsize = { 60 0 }
								align = nobaseline
								raw_text = "#v ([InterestGroup.GetApprovalValue|=+])#!"
								tooltip = IG_APPROVAL_BREAKDOWN
							}

							expand = {}

							# dynamicgridbox = {
							#	visible = "[Not(IsDataModelEmpty(InterestGroup.GetAgitators))]"
							#	flipdirection = yes
							#	datamodel = "[InterestGroup.GetAgitators]"
							#	elide = right
							#	item = {
							#		character_portrait_small = {}
							#	}
							# }

							### LAW SUPPORT
							hbox = {
								visible = "[And(Country.IsEnactingLaw, Not(InterestGroup.IsMarginal))]"
								tooltip = "bpm_ig_law_support_tooltip"
								textbox = {
									margin_right = 5
									autoresize = yes
									align = nobaseline|left
									text = "bpm_law_support_label"
								}
								icon = {
									visible = "[GreaterThan_CFixedPoint(InterestGroup.MakeScope.ScriptValue('bpm_ig_law_support_total_value'), '(CFixedPoint)0')]"
									texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
									size = { 24 24 }
								}
								icon = {
									visible = "[LessThanOrEqualTo_CFixedPoint(InterestGroup.MakeScope.ScriptValue('bpm_ig_law_support_total_value'), '(CFixedPoint)0')]"
									texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
									size = { 24 24 }
								}
								widget = {
									size = { 5 5 }
								}
								textbox = {
									# margin_left = 5
									autoresize = yes
									minimumsize = { 40 0 }
									layoutpolicy_horizontal = growing
									align = nobaseline|right
									tooltip = "bpm_ig_law_support_tooltip"
									raw_text = "#v (#variable [InterestGroup.MakeScope.ScriptValue('bpm_ig_law_support_total_value')|=+v0])#!"
								}
								widget = {
									parentanchor = top
									size = { 100 23 }
									button_icon_square = {
										parentanchor = center
										tooltip = "bpm_show_hide_law_sways_tooltip"
										size = { 90 30 }
										hbox = {
											visible = "[Not(GetVariableSystem.Exists(Concatenate('show_law_sways_', InterestGroup.GetName)))]"
											parentanchor = center
											expand = {}
											icon = {
												texture = "gfx/interface/buttons/button_icons/plus.dds"
												size = { 23 23 }
												# parentanchor = left
											}
											textbox = {
												autoresize = yes
												text = "bpm_button_sways"
												# parentanchor = center
												align = nobaseline
												margin_right = 5
											}
											expand = {}
										}
										hbox = {
											visible = "[GetVariableSystem.Exists(Concatenate('show_law_sways_', InterestGroup.GetName))]"
											parentanchor = center
											expand = {}
											icon = {
												texture = "gfx/interface/buttons/button_icons/minus.dds"
												size = { 23 23 }
												# parentanchor = left
											}
											textbox = {
												autoresize = yes
												text = "bpm_button_sways"
												# parentanchor = center
												align = nobaseline
												margin_right = 5
											}
											expand = {}
										}
										blockoverride "frame_visible" {
											visible = no
										}
										onclick = "[GetVariableSystem.Toggle(Concatenate('show_law_sways_', InterestGroup.GetName))]"
									}
								}
							}

							### IDEOLOGIES
							dynamicgridbox = {
								visible = "[Or(Not(Country.IsEnactingLaw), InterestGroup.IsMarginal)]"
								flipdirection = yes
								name = "ideologies_box"
								datamodel = "[InterestGroup.AccessIntrinsicIdeologies]"
								item = {
									widget = {
										size = { 26 23 }
										datacontext = "[GetScriptedGui('bpm_ideology_visibility_gui')]"
										visible = "[ScriptedGui.IsShown( GuiScope.AddScope('ideology', Ideology.MakeScope).End )]"
	
										icon = {
											texture = "[Ideology.GetTexture]"
											tooltipwidget = {
												FancyTooltip_Ideology = {}
											}
											size = { 32 32 }
											using = tooltip_above
											parentanchor = center
										}
									}
								}
							}
						}
					}

					### LEADER
					widget = {
						size = { 75 65 }

						character_portrait_base_head = {
							datacontext = "[InterestGroup.AccessLeader]"
							using = tooltip_above
							blockoverride "show_hat" {}
							parentanchor = top|left
							blockoverride "highlight" {}
							blockoverride "rank_icon" {}
							blockoverride "portrait_size" {
								size = { 70 70 }
							}
							blockoverride "icon_size" {
								size = { 0 0 }
							}
							size = {65 65}
						}

						icon = {
							datacontext = "[InterestGroup.AccessLeader.GetIdeology]"
							texture = "[Ideology.GetTexture]"
							tooltipwidget = {
								FancyTooltip_Ideology = {}
							}
							size = { 35 35 }
							parentanchor = bottom|right
						}
					}
					
					widget = { size = { 5 5 }}
				}
				bpm_law_sway_menu = {
					visible = "[And(And(Country.IsEnactingLaw, Not(InterestGroup.IsMarginal)),GetVariableSystem.Exists(Concatenate('show_law_sways_', InterestGroup.GetName)))]"
				}
			}
			
			block "move_to_opposition_button" {
				button_icon_move_right = {
					visible = "[GetVariableSystem.Exists('reform_government')]"
					layoutpolicy_vertical = expanding
					size = { 35 0 }
					onclick = "[ReformGovernment.UnstageInterestGroup(InterestGroup.AccessSelf)]"
					
					blockoverride "icon_size" {
						size = { 35 90 }
					}
				}
			}
		}
	}

	type interest_group_filter = hbox {
		spacing = 5
		visible = "[GreaterThanOrEqualTo_CFixedPoint(InterestGroup.GetClout,'(CFixedPoint)0.001')]"
		
		### IG FILTER
		widget = {
			size = { 40 40 }

			block "tooltip" {
				tooltip = "EXILE_POOL_INTEREST_GROUP_FILTER"
			}

			using = tooltip_above

			button_icon_round = {
				size = { 40 40 }
				parentanchor = center

				click_modifiers = {
					ondefault = "[GetExilePool.SetInterestGroupFilter(InterestGroup.Self)]"
					onshift = "[GetExilePool.ToggleInterestGroupFilter(InterestGroup.Self)]"
				}

				using = market_filter_staple_button_sound

				blockoverride "icon" {
					texture = "[InterestGroup.GetTexture]"
				}
				blockoverride "icon_size" {
					size = { 40 40 }
				}
			}

			icon = {
				texture = "gfx/interface/backgrounds/circle_bg_simple_dark.dds"
				size = { 40 40 }
				visible = "[GetExilePool.IsInterestGroupFiltered(InterestGroup.Self)]"
				using = default_fade_in_out
			}
			icon = {
				texture = "gfx/interface/backgrounds/circle_bg_simple_dark.dds"
				size = { 40 40 }
				visible = "[GetExilePool.IsInterestGroupFiltered(InterestGroup.Self)]"
				using = default_fade_in_out
			}
		}
	}


	type politics_panel_legitimacy_item = vbox {
		margin = { 5 0 }
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		spacing = 5

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			tooltip = "bpm_political_stability_tooltip"

			block "text" {
				textbox = {
					autoresize = yes
					raw_text = "[Concept('concept_bpm_political_stability', concept_bpm_political_stability)]:"
					align = left|nobaseline
					elide = right
				}
				textbox = {
					autoresize = yes
					size = { 0 20 }
					raw_text = "#variable [GetPlayer.MakeScope.ScriptValue('bpm_political_stability')|d1] #! @arrow_right! #variable [GetPlayer.MakeScope.ScriptValue('bpm_political_stability_baseline_target')|d1] #!"
					align = left|nobaseline
					elide = right
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 20 }
					raw_text = "(#variable [GetPlayer.MakeScope.ScriptValue('bpm_political_stability_rate_signed')|+=d1] #!/month)"
					align = left|nobaseline
					elide = right
				}
			}
		}

		gold_progressbar_horizontal = {
			name = "bpm_stability_progressbar"
			layoutpolicy_horizontal = expanding
			size = { 15 15 }
			tooltip = "bpm_political_stability_tooltip"
			blockoverride "values" {
				value = "[GetPlayer.MakeScope.ScriptValue('bpm_political_stability')]"
				min = 0
				max = 100
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			datacontext = "[Country.GetGovernmentLegitimacyLevel]"
			tooltip = "LEGITIMACY_LEVEL_ACTIVE_TOOLTIP"

			block "text" {
				textbox = {
					autoresize = yes
					raw_text = "[Concept('concept_legitimacy', concept_legitimacy)]:"
					align = left|nobaseline
					elide = right
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					raw_text = "[LegitimacyLevel.GetNameNoFormatting|v] (#variable [Country.GetGovernmentLegitimacy]#!)"
					align = left|nobaseline
					elide = right
				}
			}
		}
		
		levels_progressbar = {
			datamodel = "[GetLegitimacyLevels]"
			
			blockoverride "item_properties" {
				layoutstretchfactor_horizontal = "[LegitimacyLevel.GetWidth]"
				tooltip = "[SelectLocalization( LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy ), 'LEGITIMACY_LEVEL_ACTIVE_TOOLTIP', 'LEGITIMACY_LEVEL_INACTIVE_TOOLTIP' )]"
			}
			blockoverride "level_active" {
				visible = "[LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy )]"
			}
			blockoverride "last_level" {
				visible = "[Not(EqualTo_int32( LegitimacyLevel.GetUpperBound, '(int32)100' ))]"
			}
			blockoverride "default_progressbar_value" {
				value = "[LegitimacyLevel.GetProgress( Country.GetGovernmentLegitimacy )]"
			}
		}
	}

	type politics_panel_synergy = vbox {
		layoutpolicy_horizontal = expanding
		vbox = {
			minimumsize = { 80 -1 }
		}
		vbox = {
			# layoutpolicy_horizontal = preferred
			# layoutpolicy_vertical = expanding
			background = {
				using = entry_bg_simple
			}
			textbox = {
				# layoutpolicy_vertical = preferred
				size = { 400 40 }
				text = "bpm_mandate_overall_text"
				# using = fontsize_large
				align = center|nobaseline
			}
		}
		hbox = {
			margin = { 10 10 }
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			spacing = 5
			
			expand = {}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10
					tooltip = "bpm_cab_synergy_tt"
	
					block "text" {
						textbox = {
							autoresize = yes
							text = "bpm_synergy_text"
							align = left|nobaseline
							elide = right
						}
					}
				}
	
				gold_progressbar_horizontal = {
					name = "bpm_synergy_progressbar"
					layoutpolicy_horizontal = expanding
					size = { 15 15 }
					tooltip = "bpm_cab_synergy_tt"
					blockoverride "values" {
						value = "[GetPlayer.MakeScope.ScriptValue('bpm_cab_synergy_value')]"
						min = 0
						max = 100
					}
				}
			}

			expand = {}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 10
				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10
					tooltip = "bpm_antagonism_tt"
	
					block "text" {
						textbox = {
							autoresize = yes
							text = "BPMANTAGVAR"
							align = left|nobaseline
							elide = right
						}
					}
				}
	
				bad_progressbar_horizontal = {
					name = "bpm_antagonism_progressbar"
					layoutpolicy_horizontal = expanding
					size = { 15 15 }
					tooltip = "bpm_antagonism_tt"
					blockoverride "values" {
						value = "[GetPlayer.MakeScope.ScriptValue('bpm_antagonism_cached')]"
						min = 0
						max = 100
					}
				}
			}

			expand = {}
		}

		vbox = {
			minimumsize = { 80 -1 }
		}
		
	}

	type law_icon = widget {
		size = { 90 90 }
		
		icon = {
			size = { 90% 90% }
			parentanchor = center
			texture = "[Law.GetTexture]"
		}

		icon = {
			size = { 40% 40% }
			parentanchor = bottom|right
			texture = "gfx/interface/icons/institution_icons/institution_icon_bg.dds"
			visible = "[Law.HasInstitution]"

			icon = {
				parentanchor = vcenter|hcenter
				size = { 85% 85% }
				texture = "[Law.GetInstitutionType.GetIcon]"
				tooltip = "[Law.GetInstitutionTooltip]"
			}
		}

		icon = {
			size = { 40% 40% }
			parentanchor = top|right
			texture = "gfx/interface/icons/codification_icons/c0.dds"
			tooltip = "bpm_codification_level_traditional"
			visible = "[And(Law.IsActive, GetScriptedGui('bpm_codification_is_traditional_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End))]"
		}

		icon = {
			size = { 40% 40% }
			parentanchor = top|right
			texture = "gfx/interface/icons/codification_icons/c1.dds"
			tooltip = "bpm_codification_level_decree"
			visible = "[And(Law.IsActive, GetScriptedGui('bpm_codification_is_decree_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End))]"
		}

		#icon = {
		#	size = { 40% 40% }
		#	parentanchor = top|right
		#	texture = "gfx/interface/icons/codification_icons/c2.dds"
		#	tooltip = "bpm_codification_level_legal"
		#	visible = "[And(Law.IsActive, GetScriptedGui('bpm_codification_is_legal_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End))]"
		#}

		icon = {
			size = { 40% 40% }
			parentanchor = top|right
			texture = "gfx/interface/icons/codification_icons/c3.dds"
			tooltip = "bpm_codification_level_constitutional"
			visible = "[And(Law.IsActive, GetScriptedGui('bpm_codification_is_constitutional_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End))]"
		}

	}


	type active_law = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"
		using = tooltip_ws
		tooltip = "DATA_LAW_NAME_TOOLTIP_CONDENSED"

		tooltipwidget = {
			FancyTooltip_Law = {}
		}

		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = fixed
			size = { 0 75 }

			onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"

			button = {
				using = default_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
			}

			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding
				margin = { 5 0 }
				margin_right = 15

				law_icon = {
					size = { 72 72 }
				}

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					margin = { 5 7 }

					# widget = {
					# 	layoutpolicy_horizontal = expanding
					# 	layoutpolicy_vertical = expanding
					# }

					textbox = {
						layoutpolicy_horizontal = preferred
						raw_text = "#yellow [Law.GetGroupName]#!"
						align = left|nobaseline
						size = { 0 20 }
						elide = right
					}

					textbox = {
						layoutpolicy_horizontal = preferred
						text = "LAW"
						default_format = "#variable"
						align = left|nobaseline
						size = { 0 30 }
						using = fontsize_xl
						elide = right
						margin_bottom = 5
					}

					# approval_info_small2 = {
					# 	layoutpolicy_horizontal = preferred

					# 	name = "approval_info"
					# 	alpha = 0

					# 	state = {
					# 		name = show
					# 		using = default_show_properties_fast
					# 	}
					# 	state = {
					# 		name = hide
					# 		using = default_hide_properties_fast
					# 	}
					# }

					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
				}

				widget = {
					size = { 40 60 }
					datacontext = "[Law.GetGroup]"
					datacontext = "[Law]"
					tooltip = "TOOLTIP_CHANGE_FROM_LAW"

					icon = {
						texture = "gfx/interface/icons/generic_icons/toggle.dds"
						alpha = "[TransparentIfFalse(Or(GreaterThan_int32(LawGroup.GetNumEnactable, '(int32)0'), GreaterThan_int32(LawGroup.GetNumPotentialEnactable, '(int32)0')))]"

						size = { 30 30 }
						parentanchor = bottom|hcenter
					}

					textbox = {
						visible = "[Not(GetPlayer.IsEnactingLaw)]"
						background = {
							using = blurry_dark_background
						}
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumEnactable)]"
						raw_text = "#variable [LawGroup.GetNumEnactable]#!"
						parentanchor = hcenter
					}

					textbox = {
						visible = "[GetPlayer.IsEnactingLaw]"
						background = {
							using = blurry_dark_background
						}
						raw_text = "#variable [LawGroup.GetNumPotentialEnactable]#!"
						tooltip = "TOOLTIP_CHANGE_FROM_LAW_CURRENTLY_ENACTING"
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumPotentialEnactable)]"
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						parentanchor = hcenter
					}
				}
			}
		}
	}

	type bpm_cabinet_pool_item = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		#size = { -1 100 }
		margin = { 0 10 }
		#autoresize = yes
		minimumsize = { 830 120 }
		#spacing = 5

		using = entry_bg_fancy_solid_bg
		datacontext = "[Scope.GetInterestGroup]"
		#datacontext = "[Scope.GetInterestGroup.GetLeader]"
		datacontext = "[Scope.GetInterestGroup.GetCountry.MakeScope.Var('bpm_cabinet_char_select').GetInstitution]"

		#visible = "[And(Not(GetExilePool.IsInterestGroupFiltered(Character.GetInterestGroup.Self)), GetScriptedGui('bpm_CAB_char_is_filtered_in').IsShown(GuiScope.SetRoot(Character.MakeScope).End))]"

		background = {
			using = fade_right_entry_fancy_header_colored
			color = "[InterestGroup.GetColor]"
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			margin_left = 10
			# margin_top = 10
			ig_icon = {
				size = { 36 36 }
				# blockoverride "in_government_icon" {}
			}
			expand = {}
		}

		#vbox = {
		#	layoutpolicy_vertical = expanding
		#	spacing = 5
		#	minimumsize = { 330 -1 }
		#	maximumsize = { 330 -1 }

		#	textbox = {
		#		layoutpolicy_horizontal = expanding
		#		autoresize = yes
		#		align = left|nobaseline
		#		elide = right
		#		using = fontsize_xl
		#		text = "[Character.GetFullName]"
		#	}

		#	divider_clean = {
		#		blockoverride "size" {
		#			layoutpolicy_horizontal = expanding
		#			size = { 0 1 }
		#		}
		#	}

		#	hbox = {
		#		layoutpolicy_horizontal = expanding
		#		textbox = {
		#			autoresize = yes
		#			minimumsize = { 0 20 }
		#			align = left|nobaseline
		#			text = "CHARACTER_POPULARITY_LABEL"
		#			elide = right
		#		}

		#		expand = {}
		#	}

		#	hbox = {
		#		layoutpolicy_horizontal = expanding
		#		dynamicgridbox = {
		#			layoutpolicy_vertical = preferred
		#			datamodel = "[Character.AccessTraits]"
		#			datamodel_wrap = 6
		#			flipdirection = yes

		#			item = {
		#				flowcontainer = {
		#					margin = { 2 2 }

		#					tooltipwidget = {
		#						FancyTooltip_CharacterTrait = {}
		#					}
		#					icon = {
		#						size = { 30 40 }
		#						texture = "[CharacterTrait.GetTexture]"
		#					}
		#				}
		#			}
		#		}

		#		expand = {}
		#	}
		#}
		

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding

			#expand = {}

			#hbox = {
				datacontext = "[InterestGroup.GetLeader]"
				textbox = {
					text = "bpm_cabinet_synergy_prediction"
					
					#autoresize = yes
					margin_left = 10
					minimumsize = { 400 30 }
					maximumsize = { 400 30 }
					elide = right
					multiline = yes
					using = fontsize_medium
					align = left|nobaseline
				}
				textbox = {
					text = "bpm_cabinet_will_add_modifier"
					margin_left = 10
					margin_top = 10
					margin_bottom = 20
					autoresize = yes
					minimumsize = { 400 -1 }
					maximumsize = { 400 -1 }
					elide = right
					multiline = yes
					using = fontsize_medium
					align = left|top
				}
				expand = {}
			#}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			margin = { 20 10 }

			#textbox = {
			#	#size = { 100% 100% }
			#	text = "@information! This interest group is expected to take this position."
			#	maximumsize = { 300% -1 }
			#	multiline = yes
			#	autoresize = yes
			#	using = fontsize_small
			#	align = left|nobaseline
			#}

			textbox = {
				layoutpolicy_horizontal = preferred
				multiline = yes
				using = entry_bg_simple
				margin = { 15 10 }
				size = { 0 100 }
				elide = right
				using = fontsize_medium
				align = left|nobaseline
				text = "bpm_interest_group_skill_remaining" # = "Remaining Experts: #variable 0#!\n"
				tooltip = "concept_bpm_minister_skill_desc"
			}
		}

		vbox = {
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = preferred

			#expand = {}
			#expand = {}

			textbox = {
				text = "bpm_mandate_overall_ig_text"
				margin_top = 10
				using = fontsize_medium
				align = right|nobaseline
			}
			# textbox = {
			# 	text = "bpm_mandate_cost_text_ig"
			# 	using = fontsize_medium
			# 	align = right|nobaseline
			# }

			hbox = {
				layoutpolicy_horizontal = preferred
				#parentanchor = hcenter
				expand = {}
				
				button = {
					using = default_button_action
					size = { 150 40 }
					text = "bpm_cab_appoint"
					#datacontext = "[Character.GetInteraction('bpm_add_to_cabinet')]"
					datacontext = "[InterestGroup]"
					tooltip = "bpm_cab_appoint_tooltip"
					enabled = "[GetScriptedGui('bpm_newcab_select_ig').IsValid(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
					onclick = "[GetScriptedGui('bpm_newcab_select_ig').Execute(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
					onclick = "[GetScriptedGui('bpm_CAB_toggle_char_select_off').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
					#clicksound = "event:/SFX/DLC/1.3_ip1/UI/character_invite"
				}
			}
		}
		vbox = {
			layoutpolicy_horizontal = preferred
			minimumsize = { 20 0 }
		}

	}

	type laws_list = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		layoutstretchfactor_horizontal = 1

		using = entry_bg_fancy

		widget = {
			layoutpolicy_horizontal = preferred
			tooltip = "ACTIVE_LAWS_DESC"
			size = { 0 38 }

			background = {
				using = default_header_bg
				using = frame_small_mask_top
			}

			textbox = {
				block "header" {
					raw_text = "INSERT_HEADER"
				}
				size = { 100% 100% }
				align = center|nobaseline
				using = fontsize_large
				default_format = "#title"
				elide = right
			}
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			block "law_datamodel" {
			}

			item = {
				vbox = {
					margin = { 10 2 }
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					widgetid = "[Law.GetGroup.GetKey]"

					background = {
						visible = "[Law.IsBeingEnacted]"
						using = highlighted_square_selection
						margin = { -7 0 }
						margin_top = 0
					}

					active_law = {
						visible = "[Not(Law.IsBeingEnacted)]"
					}

					enacting_law = {
						visible = "[Law.IsBeingEnacted]"
					}
				}
			}
		}
		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
		}
	}

	type bpm_law_sway_menu_item = button_standard_list {
		layoutpolicy_horizontal = expanding
		block "sway_datacontext" {
			datacontext = "[GetScriptedGui('bpm_assert_authority_sway_gui')]"
		}
		block "sway_visible" {
			visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
		}
		block "sway_enabled" {
			enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
		}
		block "sway_onclick" {
			onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(InterestGroup.MakeScope).End)]"
		}
		hbox = {
			parentanchor = vcenter
			widget = {
				size = { 35 40 }
				icon = {
					texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
					size = { 24 24 }
					parentanchor = vcenter|right
					block "approval_icon" {
						visible = yes
					}
				}
				icon = {
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
					size = { 24 24 }
					parentanchor = vcenter|right
					block "disapproval_icon" {
						visible = no
					}
				}
			}
			textbox = {
				margin_left = 5
				minimumsize = { 50 0 }
				autoresize = yes
				align = nobaseline|left
				block "sway_effect" {
					text = "bpm_law_sway_assert_authority_effect"
				}
			}
			textbox = {
				margin_left = 20
				autoresize = yes
				align = nobaseline|left
				block "sway_name" {
					text = "bpm_law_sway_assert_authority"
				}
			}
			expand = {}
			textbox = {
				margin_right = 20
				autoresize = yes
				align = nobaseline|right
				block "sway_cost" {
					text = "bpm_law_sway_assert_authority_cost"
				}
			}
		}
	}

	type bpm_law_sway_menu = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		margin_left = 20
		margin_right = 20
		margin_bottom = 5
	
		hbox = {
			layoutpolicy_horizontal = expanding
			margin_left = 10
			textbox = {
				autoresize = yes
				align = nobaseline|left
				text = "bpm_law_support_sway_label"
			}
			expand = {}
			textbox = {
				autoresize = yes
				align = nobaseline|right
				text = "bpm_law_support_sway_maneuvers"
			}
		}
	
		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_assert_authority_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_assert_authority_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_assert_authority" }
			blockoverride "sway_cost" { text = "bpm_law_sway_assert_authority_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_redeem_favors_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_redeem_favors_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_redeem_favors" }
			blockoverride "sway_cost" { text = "bpm_law_sway_redeem_favors_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_blackmail_leader_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_blackmail_leader_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_blackmail_leader" }
			blockoverride "sway_cost" { text = "bpm_law_sway_blackmail_leader_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_entrench_privileges_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_entrench_privileges_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_entrench_privileges" }
			blockoverride "sway_cost" { text = "bpm_law_sway_entrench_privileges_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_public_debate_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_public_debate_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_public_debate" }
			blockoverride "sway_cost" { text = "bpm_law_sway_public_debate_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_decrease_suffrage_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_decrease_institution_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_decrease_suffrage" }
			blockoverride "sway_cost" { text = "bpm_law_sway_decrease_suffrage_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_decrease_police_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_decrease_institution_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_decrease_police" }
			blockoverride "sway_cost" { text = "bpm_law_sway_decrease_police_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_decrease_home_affairs_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_decrease_institution_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_decrease_home_affairs" }
			blockoverride "sway_cost" { text = "bpm_law_sway_decrease_home_affairs_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_decrease_centralization_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_decrease_institution_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_decrease_centralization" }
			blockoverride "sway_cost" { text = "bpm_law_sway_decrease_centralization_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_tax_break_rich_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_tax_break_rich_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_tax_break_rich" }
			blockoverride "sway_cost" { text = "bpm_law_sway_tax_break_rich_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_tax_break_middle_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_tax_break_middle_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_tax_break_middle" }
			blockoverride "sway_cost" { text = "bpm_law_sway_tax_break_middle_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_tax_break_poor_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_tax_break_poor_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_tax_break_poor" }
			blockoverride "sway_cost" { text = "bpm_law_sway_tax_break_poor_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_tax_break_peasant_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_tax_break_peasant_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_tax_break_peasant" }
			blockoverride "sway_cost" { text = "bpm_law_sway_tax_break_peasant_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_construction_racket_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_construction_racket_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_construction_racket" }
			blockoverride "sway_cost" { text = "bpm_law_sway_construction_racket_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_promise_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_promise_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_promise" }
			blockoverride "sway_cost" { text = "bpm_law_sway_promise_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_cabinet_sway_gui')]" }
			blockoverride "sway_effect" { text = "bpm_law_sway_cabinet_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_cabinet" }
			blockoverride "sway_cost" { text = "bpm_law_sway_cabinet_cost" }
		}

		bpm_law_sway_menu_item = {
			blockoverride "sway_datacontext" { datacontext = "[GetScriptedGui('bpm_assert_authority_neg_sway_gui')]" }
			blockoverride "approval_icon" { visible = no }
			blockoverride "disapproval_icon" { visible = yes }
			blockoverride "sway_effect" { text = "bpm_law_sway_assert_authority_neg_effect" }
			blockoverride "sway_name" { text = "bpm_law_sway_assert_authority" }
			blockoverride "sway_cost" { text = "bpm_law_sway_assert_authority_cost" }
		}
	}

	type exiled_agitator = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			margin = { 10 10 }
			spacing = 5
	
			visible = "[Character.GetInterestGroup.IsValid]"
			using = entry_bg_fancy_solid_bg
			datacontext = "[Character.GetInterestGroup]"

			background = {
				using = fade_right_entry_fancy_header_colored
				color = "[InterestGroup.GetColor]"
			}
	
			character_portrait_large = {
				using = tooltip_below
				blockoverride "show_hat" {}
				blockoverride "highlight" {}
				
				### IG ICON
				character_ig_button = {
					blockoverride "interestgroup_datacontext" {
						datacontext = "[Character.AccessInterestGroup]"
					}
					parentanchor = bottom|left
					size = { 38 38 }
					position = { 2 0 }
					blockoverride "in_government_icon" {}
				}
				
				### IDEOLOGY
				icon = {
					parentanchor = bottom|right
					size = { 38 38 }
					position = { -2 0 }
					datacontext = "[Character.GetIdeology]"
					texture = "[Ideology.GetTexture]"
					tooltipwidget = {
						FancyTooltip_Ideology = {}
					}
				}
			}
	
			vbox = {
				layoutpolicy_vertical = expanding
				spacing = 5
	
				textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					align = left|nobaseline
					elide = right
					using = fontsize_xl
					text = "[Character.GetFullName]"
				}
	
				divider_clean = {
					blockoverride "size" {
						layoutpolicy_horizontal = expanding
						size = { 0 1 }
					}
				}
	
				hbox = {
					margin_left = 5
					layoutpolicy_horizontal = expanding
	
					textbox = {
						autoresize = yes
						minimumsize = { 0 20 }
						align = left|nobaseline
						text = "CHARACTER_POPULARITY_LABEL"
						elide = right
					}
	
					expand = {}
				}
	
				dynamicgridbox = {
					layoutpolicy_vertical = preferred
					datamodel = "[Character.AccessTraits]"
					datamodel_wrap = 3
					flipdirection = yes
	
					item = {
						character_trait_with_label = {}
					}
				}
			}
	
			
			expand = {}
	
			vbox = {
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = expanding
	
				hbox = {
					layoutpolicy_horizontal = preferred
					datacontext = "[Character.PredictMovementToJoin(GetPlayer.Self)]"
					visible = "[Character.WillJoinMovementIfInvited(GetPlayer.Self)]"
					spacing = 5
	
					textbox = {
						layoutpolicy_horizontal = preferred
						multiline = yes
						size = { 0 60 }
						elide = right
						fontsize_min = 14
						align = right|nobaseline
						text = "AGITATOR_JOIN_POLITICAL_MOVEMENT"
					}
	
					icon = {
						size = { 60 60 }
						texture = "[PoliticalMovement.GetTexture]"
					}
				}

				hbox = {
					layoutpolicy_horizontal = preferred
					datacontext = "[Character.PredictMovementTypeToStart(GetPlayer.Self)]"
					visible = "[Character.WillStartMovementIfInvited(GetPlayer.Self)]"
					spacing = 5
	
					textbox = {
						layoutpolicy_horizontal = preferred
						multiline = yes
						size = { 0 60 }
						elide = right
						fontsize_min = 14
						align = right|nobaseline
						text = "AGITATOR_START_POLITICAL_MOVEMENT"
					}
	
					icon = {
						size = { 60 60 }
						texture = "[PoliticalMovementType.GetTexture]"
					}
				}				
	
				expand = {}
	
				hbox = {
					layoutpolicy_horizontal = expanding
	
					expand = {}
	
					button = {
						using = default_button_action
						size = { 150 40 }
						text = "INVITE"
						datacontext = "[Character.GetInteraction('invite_exile')]"
						tooltip = "CHARACTER_INTERACTION_TOOLTIP"
						enabled = "[CharacterInteraction.IsCommandValid(Character.Self)]"
						onclick = "[CharacterInteraction.ExecuteCommand(Character.Self)]"
						onclick = "[GetVariableSystem.Toggle('politics_overview_exile_pool')]"
						clicksound = "event:/SFX/DLC/1.3_ip1/UI/character_invite"
					}
				}
			}
	
		}
	}

	type codification_level = widget {

		block "size" {
			size = { 40 38 }
		}

		using = tooltip_above

		### BUTTON
		button = {
			using = default_background

			block "button_size" {
				size = { 32 30 }
			}

			parentanchor = center
			block "click" {}
			
			icon = {
				block "setvisible_2" {}
				block "button_texture" {}
				alwaystransparent = yes

				block "texture_size" {
					size = { 20 20 }
				}

				parentanchor = center
			}
		}

		### SELECTED (icon)
		icon = {
			block "button_texture" {}

			block "selected_texture_size" {
				size = { 24 24 }
			}

			parentanchor = center
			block "setvisible" {}
		}

		### ARROW BOTTOM
		icon = {
			texture = "gfx/interface/budget/set_level_bar_arrow.dds"

			block "selected_arrow_size" {	
				size = { 21 12 }
			}

			scale = 1.2
			parentanchor = bottom|hcenter
			mirror = vertical
			block "setvisible" {}
			
			state = {
				name = _show
				next = show_2
				position = { 0 0 }
				duration = 0
				alpha = 1
			}
			state = {
				name = show_2
				next = show_3
				position = { 0 3 }
				duration = 0
				alpha = 1
			}
			state = {
				name = show_3
				next = show_4
				position = { 0 -2 }
				duration = 0.2
				alpha = 1
			}
			state = {
				name = show_4
				position = { 0 0 }
				duration = 0.1
				alpha = 1
			}
			
			state = {
				name = _hide
				position = { 0 0 }
				duration = 0
				alpha = 0
			}
		}
	}

		### this is used for VBOX/HBOX
	type enactable_generic_law2 = hbox {
		visible = "[Law.IsVisible]"
		alpha = "[TransparentIfFalse(And(Law.HasNecessaryTech, Law.HasNecessaryLaws))]"
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding

		widget = {
			size = { 18 87 }

			icon = {
				visible = "[Law.IsActive]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/generic_icons/arrow_left.dds"
			}
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			margin = { 5 5 }

			background = {
				visible = "[And(Not(Law.IsActive),Not(Law.IsBeingEnacted))]"
				using = entry_bg_simple
			}

			background = {
				visible = "[Law.IsActive]"
				using = light_bg
				alpha = 0.8
				using = frame_small_mask
			}
			background = {
				visible = "[Law.IsActive]"
				using = frame_small
			}

			background = {
				visible = "[Law.IsBeingEnacted]"
				using = dark_area
				alpha = 0.35
			}
			background = {
				visible = "[Law.IsBeingEnacted]"
				using = highlighted_square_selection
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				minimumsize = { 0 90 }

				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					margin_right = 10
					block "spacing_between_button_and_approval_info" {}

					button = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding

						block "button" {}

						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = expanding
							margin_left = 5

							tooltipwidget = {
								FancyTooltip_Law = {}
							}

							law_icon = {
								block "law_icon_size" {
									size = { 80 80 }
								}
							}

							vbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = expanding
								margin = { 0 5 }
								spacing = 5

								expand = {}

								block "lawgroup"
								{

									textbox = {
										layoutpolicy_horizontal = preferred
										size = { 0 20 }
										margin_left = 5
										fontsize_min = 14
										align = left|nobaseline
										elide = right
										raw_text = "#title [Law.GetGroup.GetNameNoFormatting]#!"
									}
								}
								hbox = {

									layoutpolicy_horizontal = growing
									
									hbox = {
										layoutpolicy_horizontal = growing
										#maximumsize = { 280 -1 }

										textbox = {
											layoutpolicy_horizontal = preferred
											margin_bottom = 5
											margin_left = 5
											#align = left|nobaseline
											using = fontsize_xxl
											#elide = right
											fontsize_min = 14
											text = "LAW"
										}
										expand = {}

										button = {
											using = default_button_action

											visible = "[And(GetScriptedGui('bpm_codification_can_be_decree_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End), And(Not(Law.IsActive), Not(Country.IsEnactingLaw)))]"
											tooltip = "bpm_decree_law_tooltip"
											enabled = "[GetScriptedGui('bpm_codification_decree_law').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
											onclick = "[GetScriptedGui('bpm_codification_decree_law').Execute(GuiScope.SetRoot(Law.MakeScope).End)]"	
											icon = { 
												texture = "gfx/interface/icons/lens_toolbar_icons/lens_tabs/icon_political_lens_decrees.dds"
												size = { 30 30 }
												parentanchor = vcenter|hcenter
											}
											size = { 36 36 }
										}

									}

									
									codification_levels = { }

								}


								hbox = {
									layoutpolicy_horizontal = preferred

									law_enactment_controls2 = {
										visible = "[And(Not(Law.IsActive), And(Not(Law.IsBeingEnacted), GetScriptedGui('bpm_codification_can_be_legal_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)))]"
									}

									hbox = {
										visible = "[And(Not(Law.IsActive), And(Not(Law.IsBeingEnacted), Not(GetScriptedGui('bpm_codification_can_be_legal_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End))))]"
										layoutpolicy_horizontal = preferred

										textbox = {
											margin = { 5 0 }
											autoresize = yes
											align = hcenter|nobaseline
											using = fontsize_large
											max_width = 240
											fontsize_min = 12
											elide = right
											text = "bpm_codification_cannot_be_legal"
										}

										widget = {
											layoutpolicy_horizontal = expanding
										}
									}

									hbox = {
										visible = "[And(Law.IsActive, Not(Law.IsBeingEnacted))]"
										layoutpolicy_horizontal = preferred

										textbox = {
											margin = { 5 0 }
											autoresize = yes
											align = hcenter|nobaseline
											using = fontsize_large
											max_width = 160
											fontsize_min = 12
											elide = right
											text = "CURRENTLY_ACTIVE_LAW"
										}

										widget = {
											layoutpolicy_horizontal = expanding
										}
									}
									
									hbox = {
										visible = "[Law.IsBeingEnacted]"
										layoutpolicy_horizontal = preferred
										layoutpolicy_vertical = expanding
										margin = { 5 0 }
										spacing = 10

										textbox = {
											autoresize = yes
											align = hcenter|nobaseline
											max_width = 130
											fontsize_min = 12
											elide = right
											using = fontsize_large
											text = "BEING_ENACTED_LAW"
										}

										button_icon_cancel = {
											size = { 35 35 }
											enabled = "[IsValid( Law.StopEnacting )]"
											onclick = "[PopupManager.AskConfirmation( Law.StopEnacting )]"
											using = close_button_sound

											tooltipwidget = {
												RegularTooltip_CancelLawEnactment = {}
											}
										}

										expand = {}
									}
								}

								expand = {}
							}

							block "currently_active_law" {

								vbox = {
									layoutpolicy_horizontal = preferred
									layoutpolicy_vertical = expanding
									margin_right = 10

									widget = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
									}

									textbox = {
										layoutpolicy_horizontal = preferred
										text = "CURRENTLY_ACTIVE_LAW_IN_LAWGROUP"
										align = left|nobaseline
										autoresize = yes
										elide = right
										margin_left = 5
										fontsize_min = 14
									}

									textbox = {
										layoutpolicy_horizontal = preferred
										text = "LAW_GROUP_ACTIVE_LAW"
										align = left|nobaseline
										autoresize = yes
										using = fontsize_large
										elide = right
										margin_bottom = 5
										margin_left = 5
										fontsize_min = 14
									}

									widget = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
									}
								}
							}
						}
					}

					approval_info_small = {
						name = "tutorial_highlight_approval_info"
					}
				}
			}
		}

		widget = {
			size = { 18 87 }

			icon = {
				visible = "[Law.IsBeingEnacted]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/generic_icons/arrow_right.dds"
			}
		}
	}

	type codification_levels = hbox {
		minimumsize = { 160 -1 }
		codification_level = {
			visible = "[GetScriptedGui('bpm_codification_can_be_traditional_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			block "tooltip_1" {
				tooltip = "bpm_codification_level_traditional"
			}
			blockoverride "button_texture" {
				texture = "gfx/interface/icons/codification_icons/c0.dds"
			}
			blockoverride "setvisible" {
				visible = "[GetScriptedGui('bpm_codification_is_traditional_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			}
			blockoverride "setvisible_2" {
				visible = "[GreaterThan_CFixedPoint('(CFixedPoint)1', '(CFixedPoint)0')]"
			}
		}
		codification_level = {
			visible = "[GetScriptedGui('bpm_codification_can_be_decree_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			block "tooltip_1" {
				tooltip = "bpm_codification_level_decree"
			}
			blockoverride "button_texture" {
				texture = "gfx/interface/icons/codification_icons/c1.dds"
			}
			blockoverride "setvisible" {
				visible = "[GetScriptedGui('bpm_codification_is_decree_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			}
			blockoverride "setvisible_2" {
				visible = "[GreaterThan_CFixedPoint('(CFixedPoint)1', '(CFixedPoint)0')]"
			}
		}
		codification_level = {
			visible = "[GetScriptedGui('bpm_codification_can_be_legal_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			block "tooltip_1" {
				tooltip = "bpm_codification_level_legal"
			}
			blockoverride "button_texture" {
				texture = "gfx/interface/icons/codification_icons/c2.dds"
			}
			blockoverride "setvisible" {
				visible = "[GetScriptedGui('bpm_codification_is_legal_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			}
			blockoverride "setvisible_2" {
				visible = "[GreaterThan_CFixedPoint('(CFixedPoint)1', '(CFixedPoint)0')]"
			}
		}
		codification_level = {
			visible = "[GetScriptedGui('bpm_codification_can_be_constitutional_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			block "tooltip_1" {
				tooltip = "bpm_codification_level_constitutional"
			}
			blockoverride "button_texture" {
				texture = "gfx/interface/icons/codification_icons/c3.dds"
			}
			blockoverride "setvisible" {
				visible = "[GetScriptedGui('bpm_codification_is_constitutional_sg').IsValid(GuiScope.SetRoot(Law.MakeScope).End)]"
			}
			blockoverride "setvisible_2" {
				visible = "[GreaterThan_CFixedPoint('(CFixedPoint)1', '(CFixedPoint)0')]"
			}
		}
	}
	type bpm_prime_minister_candidate_entry = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		minimumsize = { 600 -1 }
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			margin = { 10 10 }
			spacing = 5
	
			using = entry_bg_fancy_solid_bg
			datacontext = "[Scope.GetCharacter]"
			# datacontext = "[Scope.GetCharacter.GetInterestGroup]"
			visible = "[Character.GetInterestGroup.IsValid]"

			background = {
				using = fade_right_entry_fancy_header_colored
				color = "[Character.GetInterestGroup.GetColor]"
			}
	
			character_portrait_large = {
				using = tooltip_below
				blockoverride "show_hat" {}
				blockoverride "highlight" {}
				
				### IG ICON
				character_ig_button = {
					blockoverride "interestgroup_datacontext" {
						datacontext = "[Character.AccessInterestGroup]"
					}
					parentanchor = bottom|left
					size = { 38 38 }
					position = { 2 0 }
					blockoverride "in_government_icon" {}
				}
				
				### IDEOLOGY
				icon = {
					parentanchor = bottom|right
					size = { 38 38 }
					position = { -2 0 }
					datacontext = "[Character.GetIdeology]"
					texture = "[Ideology.GetTexture]"
					tooltipwidget = {
						FancyTooltip_Ideology = {}
					}
				}
			}
	
			vbox = {
				layoutpolicy_vertical = expanding
				spacing = 5
	
				textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					align = left|nobaseline
					elide = right
					using = fontsize_xl
					text = "[Character.GetFullName]"
				}
	
				divider_clean = {
					blockoverride "size" {
						layoutpolicy_horizontal = expanding
						size = { 0 1 }
					}
				}
	
				hbox = {
					margin_left = 5
					layoutpolicy_horizontal = expanding
	
					textbox = {
						autoresize = yes
						minimumsize = { 0 20 }
						align = left|nobaseline
						text = "CHARACTER_POPULARITY_LABEL"
						elide = right
					}
	
					expand = {}
				}
	
				hbox = {
					layoutpolicy_horizontal = expanding
					### TRAITS
					flowcontainer = {
						datamodel = "[Character.AccessTraits]"
						spacing = 2

						item = {
							icon = {
								size = { 25 35 }
								texture = "[CharacterTrait.GetTexture]"
								using = tooltip_above

								tooltipwidget = {
									FancyTooltip_CharacterTrait = {}
								}
							}
						}
					}

					expand = {}
				}
			}
	
			expand = {}
	
			vbox = {
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = expanding
	
				expand = {}
	
				hbox = {
					layoutpolicy_horizontal = expanding
	
					expand = {}
	
					button = {
						using = default_button_action
						size = { 150 40 }
						text = "bpm_pm_appoint"
						datacontext = "[Character.GetInteraction('bpm_appoint_as_pm')]"
						tooltip = "CHARACTER_INTERACTION_TOOLTIP"
						enabled = "[CharacterInteraction.IsCommandValid(Character.Self)]"
						onclick = "[CharacterInteraction.ExecuteCommand(Character.Self)]"
						onclick = "[GetScriptedGui('bpm_CAB_toggle_char_select_off').Execute(GuiScope.SetRoot(Country.MakeScope).End)]"
						# clicksound = "event:/SFX/DLC/1.3_ip1/UI/character_invite"
					}
				}
			}
		}
	}
}
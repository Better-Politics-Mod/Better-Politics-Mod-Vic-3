window = {
	name = "bpm_agenda_selection_window"

	size = { 100% 100% }
	movable = no
	layer = popups

	using = Animation_ShowHide_Quick
	using = Background_Full_Dim

    visible = "[GetVariableSystem.Exists('bpm_cabinet_agenda_selection')]"

	widget = {
		parentanchor = center
		size = { 850 600 }
		alwaystransparent = no
		
		using = Window_Background
		using = Window_Decoration_Spike
        
        vbox = {
			using = Window_Margins

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text" {
					text = "#gold Cabinet Agendas#!"
                    margin_top = 5
					using = fontsize_xxl
				}

				blockoverride "maximumsize" {
					maximumsize = { 800 -1 }
				}

				blockoverride "button_close"
				{
					onclick = "[GetVariableSystem.Toggle('bpm_cabinet_agenda_selection')]"
				}
			}

			## CONTENT WINDOW ##
			vbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				### PRINCIPLE GROUPS
				scrollarea = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					scrollbaralign_vertical = right
					size = { 750 300 }

					scrollwidget = {

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 5
							parentanchor = hcenter

							textbox = {
								layoutpolicy_horizontal = expanding
								margin_left = 35
								margin_top = 20
								margin_bottom = 10
								size = { 0 40 }
								align = nobaseline
								text = "Available #gold Agendas#!"
								using = fontsize_large
							}

							divider_decorative = {
								layoutpolicy_horizontal = expanding

								blockoverride "size" {
									size =  { 0 6 }
								}
							}

                            widget = {
                                size = { 0 20 }
                            }

							dynamicgridbox = {
								name = "tutorial_highlight_available_principles"
								flipdirection = yes
								datamodel_wrap = 3

								datamodel = "[GetGlobalList('bpm_cabinet_agenda_list')]"

								item = {
                                    widget = {
                                        size = { 250 60 }
                                        button_icon_square = {
                                            parentanchor = hcenter|vcenter
                                            using = default_button_tertiary
                                            size = { 200 50 }
                                            hbox = {
                                                layoutpolicy_horizontal = expanding
                                                margin = { 15 0}
                                                icon = {
                                                    texture = "[GetInstitutionType(Concatenate(Scope.GetFlagName, '_icon')).GetIcon]"
                                                    size = { 36 36 }
                                                }
                                                expand = {}
                                                textbox = {
                                                    autoresize = yes
                                                    fontsize_min = 12
                                                    elide = hcenter
                                                    align = nobaseline|hcenter
                                                    text = "[Localize(Concatenate(Scope.GetFlagName, '_name'))]"

                                                }
                                                expand = {}
                                            }
                                        }
                                    }
								}
							}

							widget = {
								size = { 20 20 }
							}

							expand = {}
						}

					}

					scrollbar_vertical = {
						using = vertical_scrollbar
					}

					scrollbar_horizontal = {
						using = horizontal_scrollbar
					}
				}

				hbox = {
					minimumsize = { 0 100 }



					widget = {
						size = { 300 80 }

						background = {
							using = dark_area
						}

						### NO PRINCIPLE SELECTED
						textbox = {
							visible = "[And(Not(PowerBlocPrincipleSelectionWindow.HasSelectedPrinciple), Not(PowerBlocPrincipleSelectionWindow.IsReplacingPrinciple))]"
							parentanchor = center
							autoresize = yes
							align = nobaseline
							max_width = 300
							elide = right
							fontsize_min = 14
							text = "No #gold Agenda#! Selected"
							using = fontsize_large
						}

					}

                    widget = { size = { 30 0 }}

					# SUBMIT POWER BLOC FORMATION PRINCIPLE CHANGES
					button = {
						visible = "[PowerBlocPrincipleSelectionWindow.IsPowerBlocFormation]"
						size = { 250 80 }
						using = default_button_action
						tooltip = "FORMATION_PRINCIPLE_SELECTION_SUBMIT_BUTTON_TOOLTIP"
						enabled = "[PowerBlocPrincipleSelectionWindow.CanAffordPrinciple(PowerBlocPrincipleSelectionWindow.GetSelectedPrinciple.Self)]"
						onclick = "[PowerBlocPrincipleSelectionWindow.SubmitFormationPrincipleSelection]"
						onclick = "[PopupManager.HidePowerBlocPrincipleSelectionWindow]"
						using = principles_button_submit_sound

						flowcontainer = {
							direction = vertical
							parentanchor = center

							textbox = {
								parentanchor = hcenter
								autoresize = yes
								align = hcenter|nobaseline
								text = "PRINCIPLE_SELECTION_SUBMIT_BUTTON_LABEL"
								using = fontsize_xxl
							}

							textbox = {
								visible = "[PowerBlocPrincipleSelectionWindow.HasSelectedPrinciple]"
								parentanchor = hcenter
								autoresize = yes
								align = hcenter|nobaseline
								max_width = 330
								fontsize_min = 14
								elide = right
								text = "PRINCIPLE_SELECTION_SUBMIT_BUTTON_COST"
							}
						}
					}
                    widget = { size = { 30 0 }}
 
				}
			}
		}

    }
}
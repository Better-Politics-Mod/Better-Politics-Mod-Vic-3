# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types interest_group_panel_types
{
	type interest_group_panel = default_block_window_two_lines {
		name = "interest_group_panel"
		
		blockoverride "window_header_name"
		{
			datacontext = "[InterestGroupPanel.AccessInterestGroup]"
			text = "INTEREST_GROUP_TOOLTIP_NAME"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "[concept_interest_group]"
		}

		blockoverride "fixed_top" {
			tab_buttons = {
				# Overview
				blockoverride "first_button" {
					text = "OVERVIEW"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('ig_overview')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('ig_overview')]"
				}

				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('ig_overview') )]"
				}
				blockoverride "first_button_selected" {
					text = "OVERVIEW"
				}

				blockoverride "second_button" {
					text = "POPULATION"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('ig_pops')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('ig_pops')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('ig_pops') )]"
				}
				blockoverride "second_button_selected" {
					text = "POPULATION"
				}

				blockoverride "third_button" {
					text = "LAWS"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('ig_laws')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('ig_laws')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('ig_laws') )]"
				}
				blockoverride "third_button_selected" {
					text = "LAWS"
				}
				blockoverride "third_button_name" {
					name = "tutorial_highlight_ig_laws_tab"
				}
				
				# Modifiers
				blockoverride "fourth_button" {
					text = "INTEREST_GROUP_PANEL_MODIFIERS_TAB"
				}
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanel.SelectTab('modifiers')]"
				}
				blockoverride "fourth_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('modifiers')]"
				}
				blockoverride "fourth_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('modifiers') )]"
				}
				blockoverride "fourth_button_selected" {
					text = "INTEREST_GROUP_PANEL_MODIFIERS_TAB_SELECTED"
				}
			}
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				datacontext = "[InterestGroupPanel.AccessInterestGroup]"
				direction = vertical
				minimumsize = { @panel_width_plus_20 -1 }
				
				flowcontainer = {
					visible = "[InformationPanel.IsTabSelected('ig_overview')]"
					using = default_content_fade

					flowcontainer = {
						minimumsize = { @panel_width 50 }
						direction = vertical
						datacontext = "[InterestGroupPanel.AccessInterestGroup]"
						parentanchor = hcenter

						### action buttons
						flowcontainer = {
							parentanchor = hcenter
							spacing = 10
										
							button = {
								using = default_button_action
								size = { 200 40 }
								textbox = {
									maximumsize = { 170 35 }
									autoresize = yes
									fontsize_min = 12
									elide = right
									text = "SUPPRESS_SHORT"
									align = nobaseline
									parentanchor = hcenter|vcenter	
								}

								tooltip = "TOOLTIP_SUPPRESS"
								visible = "[Not( InterestGroup.IsSuppressed )]"
								enabled = "[IsValid( InterestGroup.ToggleSuppression )]"
								onclick = "[Execute( InterestGroup.ToggleSuppression )]"
								using = suppress_button_sound
							}
							
							button = {
								using = default_button_action
								size = { 200 40 }
								textbox = {
									maximumsize = { 170 35 }
									autoresize = yes
									fontsize_min = 12
									elide = right
									text = "SUPPRESS_NOT_SHORT"
									align = nobaseline
									parentanchor = hcenter|vcenter	
								}

								tooltip = "TOOLTIP_SUPPRESS_NOT"
								visible = "[InterestGroup.IsSuppressed]"
								enabled = "[IsValid( InterestGroup.ToggleSuppression )]"
								onclick = "[Execute( InterestGroup.ToggleSuppression )]"
								using = close_button_sound
								using = shimmer
							}
							
							button = {
								name = "tutorial_highlight_promote_button"
								using = default_button_action
								size = { 200 40 }
								textbox = {
									maximumsize = { 170 35 }
									autoresize = yes
									fontsize_min = 12
									elide = right
									text = "PROMOTE_SHORT"
									align = nobaseline
									parentanchor = hcenter|vcenter	
								}

								tooltip = "TOOLTIP_PROMOTE"
								visible = "[Not( InterestGroup.IsBolstered )]"
								enabled = "[IsValid( InterestGroup.TogglePromotion )]"
								onclick = "[Execute( InterestGroup.TogglePromotion )]"
								using = promote_button_sound
							}
										
							button = {
								using = default_button_action
								size = { 200 40 }
								textbox = {
									maximumsize = { 170 35 }
									autoresize = yes
									fontsize_min = 12
									elide = right
									text = "PROMOTE_NOT_SHORT"
									align = nobaseline
									parentanchor = hcenter|vcenter	
								}

								tooltip = "TOOLTIP_PROMOTE_NOT"
								visible = "[InterestGroup.IsBolstered]"
								enabled = "[IsValid( InterestGroup.TogglePromotion )]"
								onclick = "[Execute( InterestGroup.TogglePromotion )]"
								using = close_button_sound
								using = shimmer
							}
						}
						
						widget = { size = { 10 10 }}
						
						divider_clean = {
							parentanchor = hcenter
						}
					}
					
					margin_top = 10
					margin_left = 10
					direction = vertical
					using = default_list_position
					minimumsize = { @panel_width -1 }

					flowcontainer = {
						spacing = 20 
						margin_top = 10
						
						ig_icon = {
							size = { 100 100 }
						}

						flowcontainer = {
							name = "tutorial_highlight_ig_clout"

							direction = vertical
							using = clout_tooltip_with_graph
							parentanchor = vcenter

							textbox = {
								autoresize = yes
								text = "CLOUT_HEADER"
								align = left|nobaseline
								minimumsize = { 130 -1 }
							}
							
							textbox = {
								text = "#BOLD [InterestGroup.GetClout|1%] #!"
								using = fontsize_mega
								autoresize = yes
								align = left|nobaseline
							}
						}
						flowcontainer = {
							parentanchor = vcenter
							direction = vertical
							tooltip = "IG_APPROVAL_BREAKDOWN"

							textbox = {
								autoresize = yes
								align = left|nobaseline
								text = "IG_STATUS_HEADER"
							}

							textbox = {
								align = left|nobaseline
								text = "[InterestGroup.GetApprovalRating] (#variable [InterestGroup.GetApprovalValue|+=]#!)"
								autoresize = yes
								using = fontsize_mega
							}
						}
					}

					widget = { size = { 10 10 }}
					divider_clean = {}
					widget = { size = { 10 10 }}

					container = {
						visible = "[InterestGroup.HasParty]"
						datacontext = "[InterestGroup.GetParty]"

						flowcontainer = {
							direction = vertical
							margin_right = 10
							minimumsize = { @panel_width -1 }

							tooltipwidget = {
								FancyTooltip_Party = {}
							}
							
							textbox = {
								autoresize = yes
								text = "[concept_party]"
								align = left|nobaseline
							}

							widget = { size = { 5 5 }}

							flowcontainer = {
								spacing = 10
								icon = {
									texture = "[Party.GetIcon]"
									size = { 35 35 }
								}
								textbox = {
									autoresize = yes
									text = "[Party.GetNameNoFormatting]"
									align = left|nobaseline
									using = fontsize_large 
									parentanchor = vcenter
								}
								button_icon_goto = {
									visible = no # toggle back on when doing PRCAL-15542
									size = { 25 25 }
									parentanchor = vcenter
									onclick = "[InformationPanelBar.OpenPartyPanel(Party.AccessSelf)]"
								}
							}
							

							widget = { size = { 10 10 }}
							divider_clean = {}
							widget = { size = { 10 10 }}
						}
					}

					flowcontainer = {
						margin_bottom = 20
						### IDEOLOGIES
						flowcontainer = {
							direction = vertical
							minimumsize = { @panel_width_half -1 }

							textbox = {
								autoresize = yes
								text = "IDEOLOGY_HEADER"
								align = left|nobaseline
								margin_bottom = 2
							}
							
							flowcontainer = {
								name = "ideologies_box"
								datamodel = "[InterestGroup.AccessAllIdeologies]"
								direction = vertical
								spacing = 10

								item = {
									flowcontainer = {
										spacing = 10
										tooltipwidget = {
											FancyTooltip_Ideology = {}
										}
										icon = {						
											texture = "[Ideology.GetTexture]"
											size = { 57 57 }
											using = tooltip_above
										}

										textbox = {
											text = "[Ideology.GetNameNoFormatting]"
											autoresize = yes
											parentanchor = vcenter
											align = nobaseline
											using = fontsize_large
										}
									}
								}
							}
						}
						
						### TRAITS
						flowcontainer = {
							direction = vertical
							margin_right = 10
							minimumsize = { @panel_width_half -1 }
							
							textbox = {
								autoresize = yes
								text = "TRAITS_TITLE"
								align = left|nobaseline
							}

							flowcontainer = {
								name = "traits_box"
								datamodel = "[InterestGroup.AccessTraits]"
								direction = vertical
								spacing = 10
								
								item = {
									flowcontainer = {
										spacing = 10
										tooltipwidget = {
											FancyTooltip_InterestGroupTrait = {}
										}
											icon = {						
												texture = "[InterestGroupTrait.GetTexture]"
												enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
										
											size = { 60 80 }
											alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"
											using = tooltip_above
										}

										flowcontainer = {
											direction = vertical
											parentanchor = vcenter
											
											textbox = {
												text = "[InterestGroupTrait.GetNameNoFormatting]"
												autoresize = yes
												align = nobaseline
												using = fontsize_large
												maximumsize = { 190 -1 }
												multiline = yes
												}
											textbox = {
												alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"
												text = "[InterestGroupTrait.GetInactiveString(InterestGroup.Self)]"
												autoresize = yes
												align = nobaseline
												maximumsize = { 190 -1 }
												multiline = yes
											}
										}
									}
								}
							}
						}
					}
					
					flowcontainer = {
						visible = "[InterestGroup.GetPoliticalMovement.IsValid]"
						direction = horizontal 
						
						margin_top = 5
						margin_bottom = 5
						
						textbox = {
							autoresize = yes
							text = "[concept_political_movement]:"
						}	
						
						widget = { size = { 5 5 } }
						
						textbox = {
							autoresize = yes
							text = "[InterestGroup.GetPoliticalMovement.GetName]"
						}						
						
						icon = {
							texture = "[InterestGroup.GetPoliticalMovement.GetTexture]"
							size = { 32 32 }
						}
					}				

					### LEADER
					container = {
						minimumsize = { @panel_width 180 }
						parentanchor = hcenter
						datacontext = "[InterestGroup.AccessLeader]"

						tooltipwidget = {
							FancyTooltip_Character = {}
						}
						
						background = {
							using = entry_bg
						}
						
						flowcontainer = {
							margin_left = 8
							spacing = 10
							
							character_portrait_medium_torso = {
								parentanchor = vcenter
								blockoverride "show_hat" {}
								blockoverride "highlight" {}
							}
							
							### TITLE + NAME
							flowcontainer = {
								direction = vertical
								parentanchor = vcenter
								
								textbox = {
									text = TITLE_LEADER
									autoresize = yes
								}
								
								textbox = {
									text = "#BOLD [Character.GetFullNameNoFormatting]#!"
									maximumsize = { 180 -1 }
									minimumsize = { 180 -1 }
									autoresize = yes
									multiline = yes
									elide = right
									align = nobaseline
									using = fontsize_large
									margin_bottom = 10
								}
								
								
								flowcontainer = {
									spacing = 20
									
									flowcontainer = {
										spacing = 7
									icon = {
										size = { 40 40 }		
										datacontext = "[Character.GetIdeology]"
										visible = "[Character.IsIGLeader]"						
										texture = "[Ideology.GetTexture]"
										using = tooltip_above
										tooltipwidget = {
											FancyTooltip_Ideology = {}
										}
									}
										textbox = {
											minimumsize = { 100 -1 }
											maximumsize = { 100 -1 }
											text = "[Character.GetIdeology.GetName]"
											autoresize = yes
											parentanchor = vcenter
											align = nobaseline
										}
									}
								}
							}
									
							### TRAITS
							flowcontainer = {
								datamodel = "[Character.AccessTraits]"
								direction = vertical
								spacing = 10
								parentanchor = vcenter
								margin_top = 10
								margin_bottom = 10

								item = {
									flowcontainer = {
										spacing = 7
										using = tooltip_above

										tooltipwidget = {
											FancyTooltip_CharacterTrait = {}
										}

										icon = {
											parentanchor = left|vcenter
											size = { 30 42 }
											texture = "[CharacterTrait.GetTexture]"
										}
										textbox = {
											minimumsize = { 130 -1 }
											maximumsize = { 130 -1 }
											text = "[CharacterTrait.GetNameNoFormatting]"
											autoresize = yes
											parentanchor = vcenter
											align = nobaseline
											multiline = yes
										}
									}
								}
							}
						}
					}
					
					widget = { size = { 20 20 }}

					### POPULATION
					flowcontainer = {
						parentanchor = hcenter
						
						icon = {
							tooltip = "TOOLTIP_POPULATION"
							# tooltip = "IG_POP_POTENTIAL_DESC"
							texture = "gfx/interface/icons/generic_icons/population.dds"
							size = { 40 40 }
							parentanchor = vcenter
						}
						flowcontainer = {
							tooltip = "TOOLTIP_POPULATION"
							direction = vertical
							parentanchor = vcenter

							textbox = {
								autoresize = yes
								text = "POPULATION_HEADER"
								align = left|nobaseline
							}

							textbox = {
								text = "[InterestGroup.GetPopulation|v1*]"
								autoresize = yes
								using = fontsize_large
								align = left|nobaseline
							}
						}

						widget = { size = { 20 20 }}
						
						### government header
						flowcontainer = {
							parentanchor = vcenter
							icon = {
								tooltip = "LEADING_IG"
								texture = "gfx/interface/icons/generic_icons/leading_interest_group_icon.dds"
								size = { 40 40 }
								parentanchor = vcenter
								visible = "[InterestGroup.IsLeadingGovernment]"
							}

							in_government_header = {
								parentanchor = vcenter
								visible = "[InterestGroup.IsInGovernment]"
							}

							in_opposition_header = {
								parentanchor = vcenter
								visible = "[And(Not( InterestGroup.IsInGovernment ), Not( InterestGroup.IsMarginal ) )]"
							}

							marginal_header = {
								parentanchor = vcenter
								visible = "[InterestGroup.IsMarginal]"
								margin_bottom = 10
							}
						}
					}

					widget = { size = { 10 10 }}
					divider_clean = {}
					widget = { size = { 10 10 }}

					#IG description
					flowcontainer = {
						direction = vertical
						parentanchor = hcenter
						
						textbox = {
							text = "[InterestGroup.GetDesc]"
							minimumsize = { @panel_width -1 }
							maximumsize = { @panel_width -1 }
							autoresize = yes
							multiline = yes
							align = left|nobaseline
							using = fontsize_large
							margin = { 5 20 }
						}
					}
				}

				
		
				pop_list = {
					visible = "[InformationPanel.IsTabSelected('ig_pops')]"
					using = default_content_fade
					using = default_list_position
					margin_top = 10

					name = "tutorial_highlight_ig_pop_list"

					blockoverride "pop_list_context" {
						datacontext = [InterestGroupPanel.AccessPopsList]
					}

					blockoverride "largest_IGs" {}

					blockoverride = "interest_group" {}

					blockoverride "tooltipwidget" {
						tooltipwidget = {
							FancyTooltip_PopTypeInterestGroup = {}
						}
					}
				}

				flowcontainer = {
					visible = "[InformationPanel.IsTabSelected('ig_laws')]"
					using = default_content_fade
					direction = vertical
					spacing = 10
					using = default_list_position
					
					default_header = {
						blockoverride "text" {
							text = "CHEAPEST_LAWS_IG_HEADER"
						}
					}

					dynamicgridbox = {

						name = "tutorial_highlight_ig_laws"

						parentanchor = hcenter
						datamodel = "[InterestGroup.AccessCheapestLawsToPass]"

						item = {
							flowcontainer = {
								margin_bottom = 15
								enactable_generic_law = {}
							}
						}
					}
				}
				
				flowcontainer = {
					modifier_list = {
						visible = "[InformationPanel.IsTabSelected('modifiers')]"
						using = default_content_fade
					}
				}
			}
		}

		blockoverride "pin_visibility" {
			visible = yes
		}

		blockoverride "pin_properties" {
			visible = "[InterestGroupPanel.AccessInterestGroup.IsPinnedInOutliner]"
			onclick = "[InterestGroupPanel.AccessInterestGroup.TogglePinInOutliner]"
			datacontext = "[InterestGroupPanel.AccessInterestGroup]"
			tooltip = "UNPIN_IG"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(InterestGroupPanel.AccessInterestGroup.IsPinnedInOutliner)]"
			onclick = "[InterestGroupPanel.AccessInterestGroup.TogglePinInOutliner]"
			datacontext = "[InterestGroupPanel.AccessInterestGroup]"
			tooltip = "PIN_IG"
		}
	}
}

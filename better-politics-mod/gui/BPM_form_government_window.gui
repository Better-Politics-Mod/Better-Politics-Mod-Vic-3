
types bpm_window_types {
    type event_window_form_government = default_popup {
        datacontext = "[EventWindow.GetEvent]"
        size = { 1120 700 }
        name = "event_window_form_government"

        alpha = 0

        blockoverride "minimize" {
            minimize_button_large = {
                onclick = "[PopupManager.HideOpenEvent(Event.Self)]"
                parentanchor = center
                shortcut = "close_window"
            }
        }
        blockoverride "header_close_button_visibility" {
            visible = yes
        }

        blockoverride "window_header_name" {
            raw_text = "#BOLD [EventWindow.GetTitle]#!"
        }
        blockoverride "content" {}

        blockoverride "second_text" {
            text = "EVENT_WINDOW_EVENT_LOCATION"
        }

        blockoverride "goto_visibility" {
            visible = yes
        }

        blockoverride "goto_properties" {
            onclick = "[EventWindow.AccessEvent.AccessState.ZoomToCapital]"
            tooltip = "ZOOM_TO_EVENT_WINDOW_STATE"
            enabled = "[Not( EventWindow.AccessEvent.AccessState.IsZoomingToCapital )]"
        }

        state = {
            trigger_on_create = yes
            name = 1
            duration = 0.3
            using = Animation_Curve_EaseOut
            alpha = 1
            using = Snapshot_Mute_World_100
            using = Snapshot_Mute_Vfx_War_100
            start_sound = {
                soundeffect = "[Event.GetOnOpenedSoundEvent]"
            }
        }

        ### SETTING SIZE OF WINDOW
        flowcontainer = {
            resizeparent = yes
            margin = { 35 0 }
            margin_bottom = 25

            ### VIDEO/IMAGE + TEXT/OPTIONS
            container = {
                container = {
                    minimumsize = { 1120 -1 }
                    position = { 0 90 }

                    ### EVENT IMAGE / CONTENT
                    widget = {
                        position = { 3 3 }
                        size = { 1120 600 }

                        # image in case we have no video?
                        icon = {
                            visible = "[Event.HasTexture]"
                            texture = "[Event.GetTexture]"
                            alwaystransparent = yes
                            size = { 100% 100% }
                        }

                        # animated video ( most images should have this )
                        video_icon = {
                            visible = "[Event.HasVideo]"
                            video = "[Event.GetVideo]"
                            size = { 100% 100% }
                            alwaystransparent = yes
                            loop = no
                        }
                    }

                    ### INNER FRAME + FADE OVER THE IMAGE
                    icon = {
                        texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
                        size = { 100% 100% }
                        spriteType = Corneredtiled
                        spriteborder = { 25 25 }
                        texture_density = 2
                        #visible = no

                        modify_texture = {
                            texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                            spriteType = Corneredstretched
                            spriteborder = { 0 0 }
                            blend_mode = overlay
                        }
                        modify_texture = {
                            using = texture_velvet
                        }
                    }

                    ### CONTENT DESIGNATION ICON
                    flowcontainer = {
                        visible = "[Event.IsDLCContent]"
                        tooltip = "EVENT_DLC_TOOLTIP"
                        spacing = 10
                        parentanchor = bottom|left
                        position = { 10 -10 }

                        icon = {
                            size = { 40 40 }
                            texture = "gfx/interface/backgrounds/round_frame_dec.dds"
                            parentanchor = bottom|left

                            icon = {
                                size = { 40 40 }
                                position = { 3 -3 }

                                texture = "[Event.GetDLCIcon]"
                                parentanchor = center

                            }
                        }

                        textbox = {
                            size = { 150 20 }
                            align = left|vcenter
                            parentanchor = left|vcenter
                            elide = right
                            using = fontsize_large
                            fontsize_min = 12
                            alpha = 0.7

                            text = "[Event.GetDLCName]"
                        }
                    }

                    flowcontainer = {
                        direction = horizontal
                        spacing = 0
                        flowcontainer = {
                            direction = vertical
                            spacing = 0
                            widget = {
                                size = { 560 165 }
                                widget = {
                                    size = { 100% 100% }

                                    background = {
                                        texture = "gfx/interface/backgrounds/tutorial_bg.dds"
                                        spriteType = Corneredtiled
                                        spriteborder = { 20 20 }
                                        alpha = 0.94

                                        modify_texture = {
                                            texture = "gfx/interface/backgrounds/gradient_overlay.dds"
                                            spriteType = Corneredstretched
                                            spriteborder = { 0 0 }
                                            blend_mode = overlay
                                            alpha = 0.7
                                        }
                                        margin = { -15 -20 }
                                    }

                                    flowcontainer = {
                                        direction = vertical
                                        using = default_list_position
                                        spacing = 5
                                        margin = { 50 50 }

                                        textbox = {
                                            name = "description"
                                            multiline = yes
                                            autoresize = yes
                                            minimumsize = { 420 -1 }
                                            maximumsize = { 420 -1 }
                                            fontsize = 18
                                            parentanchor = top|hcenter
                                            align = hcenter|nobaseline
                                            raw_text = "[EventWindow.GetDescription]"
                                            margin = { 20 10 }
                                        }

                                        divider_decorative = {
                                            minimumsize = { 420 -1 }
                                            maximumsize = { 420 -1 }
                                        }

                                        textbox = {
                                            name = "flavortext"
                                            multiline = yes
                                            autoresize = yes
                                            minimumsize = { 420 -1 }
                                            maximumsize = { 420 -1 }
                                            parentanchor = top|hcenter
                                            align = top|hcenter
                                            raw_text = "#lore [EventWindow.GetFlavor]#!"
                                            margin = { 30 10 }
                                        }
                                    }
                                }
                            }
                            widget = {
                                size = { 560 400 }
                                widget = {
                                    size = { 100% 100% }

                                    background = {
                                        texture = "gfx/interface/backgrounds/tutorial_bg.dds"
                                        spriteType = Corneredtiled
                                        spriteborder = { 20 20 }
                                        alpha = 0.94

                                        modify_texture = {
                                            texture = "gfx/interface/backgrounds/gradient_overlay.dds"
                                            spriteType = Corneredstretched
                                            spriteborder = { 0 0 }
                                            blend_mode = overlay
                                            alpha = 0.7
                                        }
                                        margin = { -15 -20 }
                                    }

                                    flowcontainer = {
                                        direction = vertical
                                        using = default_list_position
                                        spacing = 5
                                        margin = { 50 50 }

                                        textbox = {
                                            name = "resulttext"
                                            multiline = yes
                                            autoresize = yes
                                            minimumsize = { 420 -1 }
                                            maximumsize = { 420 -1 }
                                            #parentanchor = top|hcenter
                                            align = hcenter|nobaseline
                                            fontsize = 20
                                            text = "bpm_form_government_events_result"
                                            default_format = "#header"
                                            margin = { 20 0 }
                                        }

                                        textbox = {
                                            name = "resulttext2"
                                            multiline = yes
                                            autoresize = yes
                                            minimumsize = { 420 -1 }
                                            maximumsize = { 420 -1 }
                                            #parentanchor = bottom|hcenter
                                            align = hcenter|nobaseline
                                            fontsize = 20
                                            visible = "[GetScriptedGui('bpm_any_party_selected').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                            text = "[GetPlayer.GetCustom('bpm_government_hostility_level')]"
                                            tooltip = "bpm_government_hostility_level_tt"
                                            default_format = "#header"
                                            margin = { 20 0 }
                                        }
                                    }
                                }
                            }
                        }
                        widget = {
                            size = { 560 600 }
                            widget = {
                                size = { 100% 94% }

                                background = {
                                    texture = "gfx/interface/backgrounds/tutorial_bg.dds"
                                    spriteType = Corneredtiled
                                    spriteborder = { 20 20 }
                                    alpha = 0.94

                                    modify_texture = {
                                        texture = "gfx/interface/backgrounds/gradient_overlay.dds"
                                        spriteType = Corneredstretched
                                        spriteborder = { 0 0 }
                                        blend_mode = overlay
                                        alpha = 0.7
                                    }
                                    margin = { -15 -20 }
                                }

                                vbox = {
                                    direction = vertical
                                    margin = { 50 50 }

                                    textbox = {
                                        name = "sub_title"
                                        multiline = yes
                                        autoresize = yes
                                        minimumsize = { 420 -1 }
                                        maximumsize = { 420 -1 }
                                        parentanchor = top|left
                                        align = hcenter|nobaseline
                                        fontsize = 18
                                        text = "[Localize(Concatenate(Event.GetKey, '.st'))]"
                                        margin = { 20 0 }
                                    }
                                    hbox = { minimumsize = { 420 25 }}

                                    divider_decorative = {
                                        minimumsize = { 420 -1 }
                                        maximumsize = { 420 -1 }
                                    }

                                    hbox = { minimumsize = { 420 50 }}
                                    
                                        vbox = {
                                            layoutpolicy_vertical = growing
                                            hbox = {
                                                layoutpolicy_horizontal = preferred
                                                layoutpolicy_vertical = preferred
                                                tooltip = IN_GOVERNMENT_DESC
                                                spacing = 10

                                                minimumsize = { 100 0 }
                                                maximumsize = { 100 0 }
                                            
                                                textbox = {
                                                    autoresize = yes
                                                    text = "OPPOSITION"
                                                    align = right|nobaseline
                                                    elide = right
                                                    default_format = "#title"
                                                    using = fontsize_large
                                                }
                                                icon = {
                                                    texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
                                                    size = { 30 30 }
                                                }
                                            }
                                            hbox = {
                                                size = { 420 200 }
                                                datamodel = "[AccessPlayer.GetElection.GetParties]"
                                                spacing = 5
                                                item = {
                                                    vbox = { 
                                                        visible = "[Not(GetScriptedGui('bpm_party_is_in_gov_sel').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_party', Party.MakeScope).End))]"
                                                        layoutpolicy_vertical = growing
                                                        using = entry_bg_fancy
                                                        vbox = {
                                                            background = {
                                                                texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
                                                                color = "[Party.GetColor]"
                                                                alpha = 0.45
                                                                mirror = vertical
                                                                
                                                                modify_texture = {
                                                                    using = texture_velvet
                                                                }
                                                            }

                                                            margin = { 20 20 }
                                                            textbox = {
                                                                layoutpolicy_vertical = expanding
                                                                text = "[Party.GetCurrentVotingPowerShare|%1]"
                                                                #text = "[AccessPlayer.MakeScope.Var(Party.GetCustom('bpm_party_name_vote_var')).GetFlagName]"
                                                                fontsize = 16
                                                                align = hcenter
                                                            }
                                                            icon = {
                                                                layoutpolicy_vertical = expanding
                                                                name = "button_icon_check"
                                                                texture = "[Party.GetIcon]"
                                                                size = { 36 36 }
                                                                parentanchor = vcenter
                                                            }
                                                        }
                                                        button = {
                                                            using = default_button_action
                                                            onclick = "[GetVariableSystem.Toggle(Concatenate('bpm_party_selected_', Party.GetCustom('bpm_party_name_vote_var')))]"
                                                            onclick = "[GetScriptedGui('bpm_add_party_to_government').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_party', Party.MakeScope).AddScope('votes', MakeScopeValue(Party.GetCurrentVotingPowerShare)).End)]"
                                                            icon = {
                                                                #texture = "gfx/interface/icons/generic_icons/red_cross.dds"
                                                                texture = "gfx/interface/buttons/expand_arrow_expanded.dds"
                                                                size = { 27 27 }
                                                                parentanchor = hcenter
                                                            }
                                                            size = { 105% 30 }
                                                        }
                                                    }
                                                }
                                            }
                                            hbox = { minimumsize = { -1 10 }}
                                            hbox = {
                                                layoutpolicy_horizontal = preferred
                                                layoutpolicy_vertical = preferred
                                                tooltip = IN_GOVERNMENT_DESC
                                                spacing = 10

                                                minimumsize = { 100 0 }
                                                maximumsize = { 100 0 }
                                            
                                                textbox = {
                                                    autoresize = yes
                                                    text = "GOVERNMENT"
                                                    align = right|nobaseline
                                                    elide = right
                                                    default_format = "#title"
                                                    using = fontsize_large
                                                }
                                                icon = {
                                                    texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
                                                    size = { 30 30 }
                                                }
                                            }
                                            hbox = {
                                                size = { 420 200 }

                                                spacing = 5
                                                datamodel = "[AccessPlayer.GetElection.GetParties]"
                                                item = {

                                                    vbox = { 
                                                        # this should set a variable 
                                                        visible = "[GetScriptedGui('bpm_party_is_in_gov_sel').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_party', Party.MakeScope).End)]"
                                                        layoutpolicy_vertical = growing
                                                        using = entry_bg_fancy
                                                        button = {
                                                            using = default_button_action
                                                            onclick = "[GetVariableSystem.Toggle(Concatenate('bpm_party_selected_', Party.GetCustom('bpm_party_name_vote_var')))]"
                                                            onclick = "[GetScriptedGui('bpm_remove_party_from_government').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('selected_party', Party.MakeScope).AddScope('votes', MakeScopeValue(Party.GetCurrentVotingPowerShare)).End)]"
                                                            icon = {
                                                                texture = "gfx/interface/icons/generic_icons/red_cross.dds"
                                                                #texture = "gfx/interface/buttons/expand_arrow_expanded.dds"
                                                                size = { 21 21 }
                                                                parentanchor = hcenter|vcenter
                                                            }
                                                            size = { 105% 30 }
                                                        }
                                                        vbox = {
                                                            background = {
                                                                texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
                                                                color = "[Party.GetColor]"
                                                                alpha = 0.45
                                                                mirror = vertical
                                                                
                                                                modify_texture = {
                                                                    using = texture_velvet
                                                                }
                                                            }
                                                            margin = { 20 5 }
                                                            icon = {
                                                                layoutpolicy_vertical = expanding
                                                                name = "button_icon_check"
                                                                texture = "[Party.GetIcon]"
                                                                size = { 36 36 }
                                                                parentanchor = top
                                                            }
                                                            textbox = {
                                                                layoutpolicy_vertical = expanding
                                                                minimumsize = { 36 30 }
                                                                text = "[Party.GetCurrentVotingPowerShare|%1]"
                                                                #text = "[AccessPlayer.MakeScope.Var(Party.GetCustom('bpm_party_name_vote_var')).GetFlagName]"
                                                                fontsize = 16
                                                                margin_top = 10
                                                                align = hcenter
                                                            }

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    


                                    expand = {}
                                }
                                widget = { 
                                    size = { 100% 100% }
                                    datamodel = "[EventWindow.GetOptions]"


                                    item = {
                                        widget = {
                                            size = { 80% 85% }
                                            parentanchor = center
                                            button_icon_check = {
                                                visible = "[EqualTo_int32('(int32)0', PdxGuiWidget.GetIndexInDataModel)]"
                                                tooltip = "[EventOption.GetDesc]"
                                                onclick = "[EventOption.Select]"
                                                size = { 48 48 }
                                                parentanchor = bottom|right
                                            }
                                            #button_icon_reset = {
                                            #    visible = "[EqualTo_int32('(int32)1', PdxGuiWidget.GetIndexInDataModel)]"
                                            #    tooltip = "[EventOption.GetDesc]"
                                            #    size = { 48 48 }
                                            #    parentanchor = bottom|left
                                            #}
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type event_window_choose_pm = default_popup {
        datacontext = "[EventWindow.GetEvent]"
        size = { 1120 700 }
        name = "event_window_choose_pm"

        alpha = 0

        blockoverride "minimize" {
            minimize_button_large = {
                onclick = "[PopupManager.HideOpenEvent(Event.Self)]"
                parentanchor = center
                shortcut = "close_window"
            }
        }
        blockoverride "header_close_button_visibility" {
            visible = yes
        }

        blockoverride "window_header_name" {
            raw_text = "#BOLD [EventWindow.GetTitle]#!"
        }
        blockoverride "content" {}

        blockoverride "second_text" {
            text = "EVENT_WINDOW_EVENT_LOCATION"
        }

        blockoverride "goto_visibility" {
            visible = yes
        }

        blockoverride "goto_properties" {
            onclick = "[EventWindow.AccessEvent.AccessState.ZoomToCapital]"
            tooltip = "ZOOM_TO_EVENT_WINDOW_STATE"
            enabled = "[Not( EventWindow.AccessEvent.AccessState.IsZoomingToCapital )]"
        }

        state = {
            trigger_on_create = yes
            name = 1
            duration = 0.3
            using = Animation_Curve_EaseOut
            alpha = 1
            using = Snapshot_Mute_World_100
            using = Snapshot_Mute_Vfx_War_100
            start_sound = {
                soundeffect = "[Event.GetOnOpenedSoundEvent]"
            }
        }

        ### SETTING SIZE OF WINDOW
        flowcontainer = {
            resizeparent = yes
            margin = { 35 0 }
            margin_bottom = 25

            ### VIDEO/IMAGE + TEXT/OPTIONS
            container = {
                container = {
                    minimumsize = { 1120 -1 }
                    position = { 0 90 }

                    ### EVENT IMAGE / CONTENT
                    widget = {
                        position = { 3 3 }
                        size = { 1120 600 }

                        # image in case we have no video?
                        icon = {
                            visible = "[Event.HasTexture]"
                            texture = "[Event.GetTexture]"
                            alwaystransparent = yes
                            size = { 100% 100% }
                        }

                        # animated video ( most images should have this )
                        video_icon = {
                            visible = "[Event.HasVideo]"
                            video = "[Event.GetVideo]"
                            size = { 100% 100% }
                            alwaystransparent = yes
                            loop = no
                        }
                    }

                    ### INNER FRAME + FADE OVER THE IMAGE
                    icon = {
                        texture = "gfx/interface/event_window/event_inner_frame_fullscreen_horizontal.dds"
                        size = { 100% 100% }
                        spriteType = Corneredtiled
                        spriteborder = { 25 25 }
                        texture_density = 2
                        #visible = no

                        modify_texture = {
                            texture = "gfx/interface/backgrounds/default_bg_shading.dds"
                            spriteType = Corneredstretched
                            spriteborder = { 0 0 }
                            blend_mode = overlay
                        }
                        modify_texture = {
                            using = texture_velvet
                        }
                    }

                    ### CONTENT DESIGNATION ICON
                    flowcontainer = {
                        visible = "[Event.IsDLCContent]"
                        tooltip = "EVENT_DLC_TOOLTIP"
                        spacing = 10
                        parentanchor = bottom|left
                        position = { 10 -10 }

                        icon = {
                            size = { 40 40 }
                            texture = "gfx/interface/backgrounds/round_frame_dec.dds"
                            parentanchor = bottom|left

                            icon = {
                                size = { 40 40 }
                                position = { 3 -3 }

                                texture = "[Event.GetDLCIcon]"
                                parentanchor = center

                            }
                        }

                        textbox = {
                            size = { 150 20 }
                            align = left|vcenter
                            parentanchor = left|vcenter
                            elide = right
                            using = fontsize_large
                            fontsize_min = 12
                            alpha = 0.7

                            text = "[Event.GetDLCName]"
                        }
                    }

                    flowcontainer = {
                        direction = horizontal
                        spacing = 0
                        widget = {
                            size = { 460 300 }
                            widget = {
                                size = { 100% 94% }

                                background = {
                                    texture = "gfx/interface/backgrounds/tutorial_bg.dds"
                                    spriteType = Corneredtiled
                                    spriteborder = { 20 20 }
                                    alpha = 0.94

                                    modify_texture = {
                                        texture = "gfx/interface/backgrounds/gradient_overlay.dds"
                                        spriteType = Corneredstretched
                                        spriteborder = { 0 0 }
                                        blend_mode = overlay
                                        alpha = 0.7
                                    }
                                    margin = { -15 -20 }
                                }

                                flowcontainer = {
                                    direction = vertical
                                    using = default_list_position
                                    spacing = 5
                                    margin = { 50 50 }

                                    textbox = {
                                        name = "description"
                                        multiline = yes
                                        autoresize = yes
                                        minimumsize = { 420 -1 }
                                        maximumsize = { 420 -1 }
                                        fontsize = 20
                                        parentanchor = top|hcenter
                                        align = hcenter|nobaseline
                                        raw_text = "[EventWindow.GetDescription]"
                                        margin = { 20 10 }
                                    }

                                    divider_decorative = {
                                        minimumsize = { 420 -1 }
                                        maximumsize = { 420 -1 }
                                    }
                                    
                                    container = { 
                                        size = { 100% 100% }
                                        #position = { 115 600 }
                                        datamodel = "[GetPlayer.MakeScope.GetList('bpm_potential_headofgov')]"

                                        item = { 
                                            textbox = {
                                                datacontext = "[Scope.GetCharacter]"
                                                visible = "[EqualTo_int32(FixedPointToInt(GetPlayer.MakeScope.Var('bpm_choose_headofgov_carousel').GetValue), PdxGuiWidget.GetIndexInDataModel)]"
                                                name = "resulttext"
                                                multiline = yes
                                                autoresize = yes
                                                minimumsize = { 420 -1 }
                                                maximumsize = { 420 -1 }
                                                parentanchor = top|hcenter
                                                align = top|right
                                                fontsize = 18
                                                #raw_text = "[Character.GetFullName]"
                                                raw_text = "    @information! #blue We will appoint [Character.GetFullName] of the [Character.GetInterestGroup.GetName] to be the [GetPlayer.GetCustom('bpm_hog_title_country_spec')].#!"
                                                margin = { 20 10 }
                                            }
                                        }
                                    }
                                    widget = {
                                        size = { 460 50 }
                                        hbox = {
                                            layoutpolicy_horizontal = expanding
                                            layoutpolicy_vertical = expanding
                                            margin = { 10 0 }
                                            spacing = 0

                                            button = {
                                                using = default_button_action
                                                onclick = "[GetScriptedGui('bpm_form_government_move_left').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                                text = "Previous"
                                                size = { 100 48 }
                                            }

                                            widget = { 
                                                size = { 100 48 }
                                                datamodel = "[EventWindow.GetOptions]"


                                                item = {
                                                    widget = {
                                                        size = { 80% 85% }
                                                        parentanchor = vcenter|left
                                                        button_icon_check = {
                                                            visible = "[EqualTo_int32('(int32)0', PdxGuiWidget.GetIndexInDataModel)]"
                                                            tooltip = "[EventOption.GetDesc]"
                                                            onclick = "[EventOption.Select]"
                                                            size = { 48 48 }
                                                            parentanchor = bottom|right
                                                        }
                                                        #button_icon_reset = {
                                                        #    visible = "[EqualTo_int32('(int32)1', PdxGuiWidget.GetIndexInDataModel)]"
                                                        #    tooltip = "[EventOption.GetDesc]"
                                                        #    size = { 48 48 }
                                                        #    parentanchor = bottom|left
                                                        #}
                                                    }
                                                }

                                            }

                                            
                                            button = {
                                                using = default_button_action
                                                onclick = "[GetScriptedGui('bpm_form_government_move_right').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                                                text = "Next"
                                                size = { 100 48 }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        widget = {
                            size = { 10 -1 }
                        }
                        widget = {
                            size = { 650 600 }
                            widget = {
                                size = { 100% 100% }
                                margin_top = 10

                                container = { 
                                    size = { 100% 100% }
                                    #position = { 115 600 }
                                    datamodel = "[GetPlayer.MakeScope.GetList('bpm_potential_headofgov')]"


                                    item = {
                                        vbox = {
                                            layoutpolicy_horizontal = expanding
                                            layoutpolicy_vertical = expanding
                                            margin = { 4 0 }
                                            
                                            ### RULER
                                            character_with_background = {
                                                datacontext = "[Scope.GetCharacter]"
                                                visible = "[EqualTo_int32(FixedPointToInt(GetPlayer.MakeScope.Var('bpm_choose_headofgov_carousel').GetValue), PdxGuiWidget.GetIndexInDataModel)]"
                                                layoutpolicy_horizontal = expanding
                                                layoutpolicy_vertical = expanding
                                                minimumsize = { -1 340 }
                                                
                                                blockoverride "character_layout" {
                                                    position = { 0 0 }
                                                    size = { 70% 100% }
                                                }
                                                blockoverride "character_portrait_size" {
                                                    size = { 110% 110% }
                                                }
                                                
                                                # ruler stats
                                                flowcontainer = {
                                                    parentanchor = right|bottom
                                                    position = { -5 -15 }
                                                    margin = { 0 10 }
                                                    margin_right = 10
                                                    direction = vertical
                                                    spacing = 5
                                                    
                                                    background = {
                                                        using = dark_area
                                                        alpha = 0.75
                                                        
                                                        modify_texture = {
                                                            texture = "gfx/interface/masks/fade_horizontal_left_full.dds"
                                                            blend_mode = alphamultiply
                                                        }
                                                    }
                                                
                                                    ### ROLE
                                                    ruler_stats_entry = {
                                                        tooltip = "CHARACTER_PRIMARY_ROLE_TOOLTIP"

                                                        blockoverride "ruler_icon" {
                                                            widget = {
                                                                size = { 35 35 }
                                                                icon = {
                                                                    visible = "[And(Character.IsPolitician,And(Not(Character.IsRuler),Not(Character.IsHeir)))]"
                                                                    size = { 100% 100% }
                                                                    texture = "gfx/interface/icons/character_role_icons/politician.dds"
                                                                }
                                                                icon = {
                                                                    visible = "[Character.IsRuler]"
                                                                    size = { 100% 100% }
                                                                    texture = "gfx/interface/icons/character_role_icons/ruler.dds"
                                                                }
                                                                icon = {
                                                                    visible = "[Character.IsHeir]"
                                                                    size = { 100% 100% }
                                                                    texture = "gfx/interface/icons/character_role_icons/heir.dds"
                                                                }
                                                                icon = {
                                                                    visible = "[And(Not(Or(Character.IsPolitician, Or(Character.IsRuler, Character.IsHeir))), Character.IsGeneral)]"
                                                                    size = { 100% 100% }
                                                                    texture = "gfx/interface/icons/character_role_icons/general.dds"
                                                                }
                                                                icon = {
                                                                    visible = "[And(Not(Or(Character.IsPolitician, Or(Character.IsRuler, Character.IsHeir))), Character.IsAdmiral)]"
                                                                    size = { 100% 100% }
                                                                    texture = "gfx/interface/icons/character_role_icons/admiral.dds"
                                                                }
                                                            }
                                                        }
                                                        blockoverride "label" {
                                                            text = "[Concept('concept_ruler', Character.GetPrimaryRoleTitle)]"
                                                        }
                                                        blockoverride "text" {
                                                            text = "[Character.GetFullName]"
                                                        }
                                                    }
                                                    ### INTEREST GROUP
                                                    ruler_stats_entry = {
                                                        datacontext = "[Character.AccessInterestGroup]"

                                                        blockoverride "ruler_icon" {
                                                            character_ig_button = {
                                                                size = { 35 35 }
                                                                blockoverride "in_government_icon" {}
                                                            }
                                                        }

                                                        tooltipwidget = {
                                                            FancyTooltip_IG = {}
                                                        }

                                                        blockoverride "label" {
                                                            text = "INTEREST_GROUP"
                                                        }
                                                        blockoverride "text" {
                                                            raw_text = "#v [Character.AccessInterestGroup.GetNameNoFormatting]#!"
                                                        }
                                                    }

                                                    ### IDEOLOGY
                                                    ruler_stats_entry = {
                                                        datacontext = "[Character.GetIdeology]"

                                                        tooltipwidget = {
                                                            FancyTooltip_Ideology = {}
                                                        }
                                                        blockoverride "icon_texture" {
                                                            texture = "[Ideology.GetTexture]"
                                                        }
                                                        blockoverride "label" {
                                                            text = "IDEOLOGY_CONCEPT"
                                                        }
                                                        blockoverride "text" {
                                                            text = "CHARACTER_IDEOLOGY"
                                                        }
                                                    }
                                                    #POPULARITY
                                                    ruler_stats_entry = {
                                                        tooltip = "POPULARITY_BREAKDOWN"

                                                        blockoverride "icon_texture" {
                                                            texture = "gfx/interface/icons/generic_icons/popularity.dds"
                                                        }
                                                        blockoverride "label" {
                                                            text = "POPULARITY"
                                                        }
                                                        blockoverride "text" {
                                                            text = "CHARACTER_POPULARITY"
                                                        }
                                                    }
                                                    
                                                    widget = { size = { 5 5 }}
                                                    
                                                    ### TRAITS
                                                    character_traits_no_label = {
                                                        parentanchor = right
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
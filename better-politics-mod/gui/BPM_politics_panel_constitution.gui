types politics_panel_types
{
	type bpm_repeatable_active_law = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"
		using = tooltip_ws
		tooltip = "DATA_LAW_NAME_TOOLTIP_CONDENSED"

		tooltipwidget = {
			FancyTooltip_Law = {}
		}

		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = fixed
			size = { 0 75 }

			onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"

			button = {
				using = default_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
			}

			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = fixed
				margin = { 5 0 }
				margin_right = 15

				law_icon = {
					size = { 60 60 }
				}

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = fixed
					margin = { 5 7 }

					textbox = {
						layoutpolicy_horizontal = preferred
						raw_text = "#yellow [Law.GetGroupName]#!"
						align = left|nobaseline
						size = { 0 20 }
						elide = right
						using = fontsize_large
					}

					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
				}

				widget = {
					size = { 40 60 }
					datacontext = "[Law.GetGroup]"
					datacontext = "[Law]"
					tooltip = "TOOLTIP_CHANGE_FROM_LAW"

					icon = {
						texture = "gfx/interface/icons/generic_icons/toggle.dds"
						alpha = "[TransparentIfFalse(Or(GreaterThan_int32(LawGroup.GetNumEnactable, '(int32)0'), GreaterThan_int32(LawGroup.GetNumPotentialEnactable, '(int32)0')))]"

						size = { 30 30 }
						parentanchor = bottom|hcenter
					}

					textbox = {
						visible = "[Not(GetPlayer.IsEnactingLaw)]"
						background = {
							using = blurry_dark_background
						}
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumEnactable)]"
						raw_text = "#variable [LawGroup.GetNumEnactable]#!"
						parentanchor = hcenter
					}

					textbox = {
						visible = "[GetPlayer.IsEnactingLaw]"
						background = {
							using = blurry_dark_background
						}
						raw_text = "#variable [LawGroup.GetNumPotentialEnactable]#!"
						tooltip = "TOOLTIP_CHANGE_FROM_LAW_CURRENTLY_ENACTING"
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumPotentialEnactable)]"
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						parentanchor = hcenter
					}
				}
			}
		}
	}

	type bpm_repeatable_prev_law = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding
		block "law_datacontext" {
			datacontext = "[GetScriptedGui('bpm_repeatable_prev_law_gui')]"
		}
		block "law_visible" {
			visible = "[ScriptedGui.IsShown( GuiScope.SetRoot(Country.MakeScope).AddScope('law_type', Law.GetLawType.MakeScope).End )]"
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			using = tooltip_ws
			tooltip = "DATA_LAW_NAME_TOOLTIP_CONDENSED"
	
			tooltipwidget = {
				FancyTooltip_Law = {}
			}
	
			widget = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = fixed
				size = { 0 95 }
	
				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					margin = { 5 0 }
					margin_right = 20
	
					law_icon = {
						size = { 80 80 }
					}
	
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						margin = { 5 5 }
	
						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
	
						textbox = {
							layoutpolicy_horizontal = preferred
							text = "bpm_last_enacted_repeatable_label"
							align = left|nobaseline
							size = { 0 20 }
							elide = right
						}
	
						textbox = {
							layoutpolicy_horizontal = preferred
							text = "LAW"
							default_format = "#variable"
							align = left|nobaseline
							size = { 0 30 }
							using = fontsize_xl
							elide = right
							margin_bottom = 5
						}

						textbox = {
							layoutpolicy_horizontal = preferred
							text = "bpm_last_enacted_repeatable_countdown"
							align = left|nobaseline
							size = { 0 30 }
							elide = right
							margin_bottom = 5
						}
	
						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
					}
				}
			}
		}
	}

	### LAWS LIST
	type bpm_repeatable_laws_list = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		layoutstretchfactor_horizontal = 1

		using = entry_bg_fancy

		widget = {
			layoutpolicy_horizontal = preferred
			tooltip = "ACTIVE_LAWS_DESC"
			size = { 0 38 }

			background = {
				using = default_header_bg
				using = frame_small_mask_top
			}

			textbox = {
				block "header" {
					text = "concept_bpm_repeatable_laws"
				}
				size = { 100% 100% }
				align = center|nobaseline
				using = fontsize_large
				default_format = "#title"
				elide = right
			}
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			margin_top = 5
			datamodel = "[AccessPlayer.AccessActiveOtherLaws]"

			item = {
				vbox = {
					margin = { 10 3 }
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = fixed

					vbox = {
						visible = "[Not(Law.IsBeingEnacted)]"
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
			
						background = {
							using = highlighted_square_selection
						}

						bpm_repeatable_active_law = {}

						vbox = {
							background = {
								using = dark_area
							}
							datamodel = "[Law.GetLawAlternatives]"
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = expanding
							item = {
								bpm_repeatable_prev_law = {}
							}
						}
					}

					background = {
						visible = "[Law.IsBeingEnacted]"
						using = highlighted_square_selection
						margin = { -7 0 }
						margin_top = 0
					}

					enacting_law = {
						visible = "[Law.IsBeingEnacted]"
					}
				}
			}
		}
		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
		}
	}


	type bpm_law_enactment_banner = widget {
		layoutpolicy_horizontal = expanding
		datacontext = "[GetPlayer.GetLawBeingEnacted]"
		visible = "[Law.IsBeingEnacted]"
		size = { 0 200 }
		
		state = {
			name = _show
			next = show2
			duration = 0
			alpha = 0
			size = { 0 0 }
		}
		state = {
			name = show2
			duration = 0.5
			using = Animation_Curve_Default
			alpha = 1
			size = { 0 200 }
		}
		
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			using = entry_bg_fancy
			
			widget = {
				layoutpolicy_horizontal = expanding
				size = { 0 50 }
				
				background = {
					using = default_header_bg
					using = frame_small_mask_top
				}
				
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					margin = { 30 0 }
					
					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 18 }
						text = "bpm_current_reform_title"
						align = center|nobaseline
						elide = right
						default_format = "#title"
						using = fontsize_large
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				margin = { 30 0 }
				margin_top = 5
				margin_bottom = 10
				spacing = 30
				
				hbox = {
					spacing = 20
					margin = { 30 0 }

					background = {
						using = entry_bg_simple
					}

					vbox = {
						widget = {
							size = { 90 90 }
							law_enactment_progress = {
								size = { 100 100 }
								parentanchor = center
							}
						}
						button = {
							visible = "[Law.IsBeingEnacted]"
							size = { 100 30 }
							text = "CANCEL"
							tooltip = "[Law.GetCancelTooltip]"
							enabled = "[IsValid( Law.StopEnacting )]"
							onclick = "[Execute( Law.StopEnacting )]"
							using = default_button_action
						}
					}
					# Successes & Setbacks
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						margin = { 0 10 }
						spacing = 3
						tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"
						visible = "[GreaterThan_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)0')]"

						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = expanding

							widget = {
								layoutpolicy_horizontal = expanding
							}

							textbox = {
								autoresize = yes
								align = center|nobaseline
								text = "LAW_ENACTMENT_SETBACKS_LABEL"
								fontsize_min = 14
								elide = right
							}

							#Setback 1
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)1')]"
								}
							}

							#Setback 2
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)2')]"
								}
							}

							#Setback 3
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)3')]"
								}
							}
							
							widget = {
								layoutpolicy_horizontal = expanding
							}
						}

						#Phase 0
						enactment_phase = {
							blockoverride "max_width" {}

							blockoverride "active_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 35 }
							}

							blockoverride "past_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
							}

							blockoverride "not_reached_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
							}
						}

						#Phase 1
						enactment_phase = {
							blockoverride "max_width" {}

							blockoverride "current_phase_visibility" {
								visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)1')]"
							}

							blockoverride "past_phase_visibility" {
								visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
							}

							blockoverride "not_reached_phase_visibility" {
								visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
							}

							blockoverride "phase_name" {
								text = "[Law.GetCountry.GetCustom('enactment_phase_1')]"
							}

							blockoverride "active_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 35 }
							}

							blockoverride "past_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
							}

							blockoverride "not_reached_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
							}
						}

						#Phase 2
						enactment_phase = {
							blockoverride "max_width" {}

							blockoverride "current_phase_visibility" {
								visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
							}

							blockoverride "past_phase_visibility" {
								visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
							}

							blockoverride "not_reached_phase_visibility" {
								visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
							}

							blockoverride "phase_name" {
								text = "[Law.GetCountry.GetCustom('enactment_phase_2')]"
							}

							blockoverride "active_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 35 }
							}

							blockoverride "past_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
							}

							blockoverride "not_reached_size" {
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
							}
						}
					}
				}

				vbox = {
					margin = { 30 0 }
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }
						textbox = {
							autoresize = yes
							text = "bpm_legislative_vote_title"
						}
					}
					hbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						textbox = {
							margin_right = 10
							autoresize = yes
							minimumsize = { 60 0 }
							layoutpolicy_horizontal = growing
							align = nobaseline|center
							tooltip = "[GetPlayer.MakeScope.ScriptValue('bpm_law_enactment_yea_votes_cached_value')]"
							text = "bpm_law_yea_votes"
						}
						battle_progressbar = {
							name = "bpm_law_voting"
							layoutpolicy_horizontal = expanding
							size = { 900 25 }
							tooltip = bpm_law_voting_tooltip
							blockoverride "values" {
								value = "[GetPlayer.MakeScope.ScriptValue('bpm_law_enactment_yea_votes_cached_value')]"
								min = 0
								max = 1
							}
						}
						textbox = {
							margin_left = 10
							autoresize = yes
							minimumsize = { 60 0 }
							layoutpolicy_horizontal = growing
							align = nobaseline|center
							tooltip = "[GetPlayer.MakeScope.ScriptValue('bpm_law_enactment_nay_votes_cached_value')]"
							text = "bpm_law_nay_votes"
						}
					}
					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 20 0 }
						textbox = {
							size = { 200 25 }
							align = nobaseline|left
							text = "bpm_law_voting_final_phase_info"
						}
						textbox = {
							size = { 200 25 }
							align = nobaseline|center
							text = "bpm_law_voting_final_phase_legislation_info"
						}
						textbox = {
							size = { 200 25 }
							align = nobaseline|right
							text = "bpm_law_voting_final_phase_executive_info"
							tooltip = "bpm_law_voting_veto_tooltip"
						}
					}
					widget = {
						layoutpolicy_vertical = expanding
					}
					hbox = {
						layoutpolicy_vertical = expanding
						layoutpolicy_horizontal = expanding
						margin = { 20 10 }
						background = {
							using = entry_bg_simple
						}

						vbox = {
							textbox = {
								autoresize = yes
								layoutpolicy_horizontal = expanding
								align = nobaseline|left
								text = "bpm_law_voting_phase_sways_info"
							}
						}

						widget = {
							layoutpolicy_horizontal = expanding
						}
						
						vbox = {
							textbox = {
								autoresize = yes
								layoutpolicy_horizontal = expanding
								align = nobaseline|right
								text = "bpm_law_vote_enactment_contribution_info"
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					margin = { 20 10 }
					
					background = {
						using = entry_bg_simple
					}

					### INFO
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						spacing = 5
						
						textbox = {
							layoutpolicy_horizontal = preferred
							size = { 0 20 }
							text = "bpm_next_checkpoint_text"
							align = left|nobaseline
							elide = right
						}
						
						hbox = {
							layoutpolicy_horizontal = preferred
							vbox = {
								textbox = {
									layoutpolicy_horizontal = preferred
									minimumsize = { 130 25 }
									text = "OUTCOME_SUCCESS"
									align = left|nobaseline
									elide = right
									alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointSuccessChance, '(CFixedPoint)0'))]"
								}
							}
							vbox = {
								textbox = {
									layoutpolicy_horizontal = preferred
									minimumsize = { 130 25 }
									text = "OUTCOME_ADVANCE"
									align = left|nobaseline
									elide = right
									alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointAdvanceChance, '(CFixedPoint)0'))]"
								}
								textbox = {
									layoutpolicy_horizontal = preferred
									minimumsize = { 130 25 }
									text = "OUTCOME_DEBATE"
									align = left|nobaseline
									elide = right
									alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointDebateChance, '(CFixedPoint)0'))]"
								}
								textbox = {
									layoutpolicy_horizontal = preferred
									minimumsize = { 130 25 }
									text = "OUTCOME_STALL"
									align = left|nobaseline
									elide = right
									alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointStallChance, '(CFixedPoint)0'))]"
								}
							}
						}
					}
				}
			}
		}
	}

	type politics_panel_laws_content = vbox {
		margin = { 10 10 }
		spacing = 15

		### CURRENT REFORM
		bpm_law_enactment_banner = {}

		### LISTS OF LAWS
		hbox = {
			datacontext = "[GetPlayer]"
			spacing = 5
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred

			### POWER STRUCTURE
			laws_list = {
				blockoverride "header" {
					text = "POWER_STRUCTURE"
				}
				blockoverride "law_datamodel" {
					datamodel = "[AccessPlayer.AccessActivePowerStructureLaws]"
				}
			}
				
			### ECONOMY
			laws_list = {
				blockoverride "header" {
					text = "ECONOMY"
				}
				blockoverride "law_datamodel" {
					datamodel = "[AccessPlayer.AccessActiveEconomyLaws]"
				}
			}
			
			### HUMAN RIGHTS
			laws_list = {
				blockoverride "header" {
					text = "HUMAN_RIGHTS"
				}
				blockoverride "law_datamodel" {
					datamodel = "[AccessPlayer.AccessActiveHumanRightsLaws]"
				}
			}
			
			vertical_divider_full = {
				visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessActiveOtherLaws))]"
				blockoverride "size" {
					layoutpolicy_vertical = expanding
				}
			}
			
			### OTHER LAWS
			bpm_repeatable_laws_list  = {
				visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessActiveOtherLaws))]"
			}
		}
	}
}

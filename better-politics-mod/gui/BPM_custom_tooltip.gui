@tooltip_max_width = 550 #copied from tooltip.gui

@tooltip_fixed_width = 500 #for 2 column layouts etc, since max_width is quite wide
@tooltip_fixed_column_width = 245 #tooltip_fixed_width/2 - 10/2
@tooltip_fixed_column_width_minus_40 = 205
@tooltip_fixed_column_width_minus_16 = 229

types TooltipTypes
{
	type FancyTooltip_IG = FancyTooltipWidgetType {
		blockoverride "text" { }

		blockoverride "replace_icon" {
			ig_icon = {
				parentanchor = center
				size = { 52 52 }
				blockoverride "tooltip" {}
				blockoverride "in_government_icon" {}
			}
		}

		blockoverride "name" {
			text = "INTEREST_GROUP_TOOLTIP_NAME"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_INTEREST_GROUP"
		}

		blockoverride "color" {
			color = "[InterestGroup.GetColor]"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" 
		{
			custom_tooltip_textbox = {
				# using = tooltip_segment_background
				using = tooltip_segment_margin

				text = "[InterestGroup.GetDesc]"
				min_width = @tooltip_fixed_width
				max_width = @tooltip_fixed_width
				# default_format = ""
			}

			flowcontainer = {
				using = tooltip_segment_margin
				using = tooltip_segment_background
				custom_tooltip_textbox = {
					text = "IG_TT_IN_GOVERNMENT"		
					min_width = @tooltip_fixed_width
					max_width = @tooltip_fixed_width
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_CLOUT"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_APPROVAL"		
					}
				}
			}

			flowcontainer = {
				using = tooltip_segment_margin
				direction = vertical

				custom_tooltip_textbox = {
					text = "IG_TT_LEADER"		
				}

				custom_tooltip_textbox = {
					text = "IG_TT_PARTY"
				}
			}


			custom_tooltip_2_columns = {
				blockoverride "bg" {}

				blockoverride "left_column" {
					DefaultTooltipTextBox = {
						autoresize = yes
						text = "IG_TT_IDEOLOGY_HEADER"
					}
					
					flowcontainer = {
						name = "ideologies_box"
						datamodel = "[InterestGroup.AccessAllIdeologies]"
						direction = vertical

						item = {
							flowcontainer = {
								spacing = 5
								datacontext = "[GetScriptedGui('bpm_ideology_visibility_gui')]"
								visible = "[Or(ScriptedGui.IsShown( GuiScope.AddScope('ideology', Ideology.MakeScope).End ), InDebugMode)]"
								icon = {						
									texture = "[Ideology.GetTexture]"
									size = { 20 20 }

									tooltipwidget = {
										FancyTooltip_Ideology = {}
									}

									using = tooltip_above
								}

								DefaultTooltipTextBox = {
									text = "[Ideology.GetName]"
									autoresize = yes
									parentanchor = vcenter
									align = nobaseline
								}
							}
						}
					}
				}

				blockoverride "right_column" {
					flowcontainer = {
						direction = vertical
					
						DefaultTooltipTextBox = {
							autoresize = yes
							text = "IG_TT_TRAITS_HEADER"
						}

						flowcontainer = {
							name = "traits_box"
							datamodel = "[InterestGroup.AccessTraits]"
							direction = vertical
							
							item = {
								flowcontainer = {
									alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"

									spacing = 5
									
									icon = {						
										texture = "[InterestGroupTrait.GetTexture]"
										enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
										size = { 15 20 }
										parentanchor = vcenter

										tooltipwidget = {
											FancyTooltip_InterestGroupTrait = {}
										}

										using = tooltip_above
									}

									DefaultTooltipTextBox = {
										text = "IG_TT_TRAIT_ENTRY"
										autoresize = yes
										parentanchor = vcenter
										align = nobaseline

										fontsize_min = 14
										elide = right
										max_width = @tooltip_fixed_column_width_minus_40
									}
								}
							}
						}
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_POPULATION_LOYAL_RADICAL"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "[InterestGroup.GetSupportingPopTypesDesc]"		
					}
				}
			}

			flowcontainer = {
				using = tooltip_segment_margin
				direction = vertical

				custom_tooltip_textbox = {
					text = "[InterestGroup.GetDesc]" 
				}

				flowcontainer = {
					direction = vertical

					visible = "[Not(IsDataModelEmpty(InterestGroup.GetPoliticalLobbies))]" 

					#custom_tooltip_newline = {}

					custom_tooltip_textbox = {
						text = "IG_TT_LOBBY_HEADER" 
					}

					datamodel = "[InterestGroup.GetPoliticalLobbies]"

					item = {
						custom_tooltip_textbox = {
							text = "IG_TT_LOBBY_ENTRY"
						}
					}
				}
			}
		}
	}

	type RegularTooltip_BakumatsuDomains = RegularTooltip {
		blockoverride "tooltip_content_after" {
			widget = {
				size = { @tooltip_max_width 550 }
				vbox = {
					layoutpolicy_vertical = expanding
					vbox = {
						#spacing = 10
						datamodel = "[GetPlayer.MakeScope.GetList('bpm_bakumatsu_domains')]"

						item = {
							bpm_bakumatsu_domain = {}
						}
					}
					expand = {}
				}
			}
		}
	}

	type bpm_bakumatsu_domain = widget {
		size = { @tooltip_fixed_width 60 }
		datacontext = "[Scope.GetState]"

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5

			textbox = {
				size = { 80 60 }
				align = nobaseline
				elide = right
				fontsize_min = 18
				multiline = yes
				text = "[State.GetName]" #[State.MakeScope.Var('bpm_bakumatsu_domains').GetFlagName]"
			}

			vertical_divider = {}
			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { -1 50 }
				spacing = 10

				background = {
					using = entry_bg_simple
				}

				icon = {
					size = { 32 32 }
					texture = "gfx/interface/icons/bakumatsu/tokugawa_seal.dds"
				}

				battle_progressbar = {
					name = "bpm_domain_battle"
					size = { 250 10 }
					blockoverride "values" {
						value = 0.3
						min = 0
						max = 1
					}
				}

				icon = {
					size = { 32 32 }
					texture = "gfx/interface/icons/bakumatsu/imperial_seal.dds"
				}
			}
			
		}
	}

	type RegularTooltip_RulerAcceptance = RegularTooltip {
		blockoverride "tooltip_content_after" {
			widget = {
				size = { @tooltip_max_width 120 }

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					margin = { 15 5 }
					#spacing = 5
					
					background = {
						using = entry_bg_simple
					}
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						#spacing = 5

						custom_tooltip_textbox = {
							# header
							text = "bpm_law_voting_veto_tooltip_header"
							align = left
							layoutpolicy_horizontal = expanding
						}

						custom_tooltip_textbox = {
							# modifier
							text = "bpm_law_voting_veto_tooltip_modifier"
						}
					}


				}
			}

			custom_tooltip_textbox = {
				# exception
				text = "bpm_law_voting_veto_tooltip_exception"
				align = left
				layoutpolicy_horizontal = expanding
			}

			tooltip_divider = {}

			flowcontainer = {
				direction = vertical
				margin = { 0 10 }

				spacing = 10

				custom_tooltip_textbox = {
					# approval
					text = "bpm_law_voting_veto_tooltip_approval"
				}

				custom_tooltip_textbox = {
					# info
					text = "bpm_law_voting_veto_tooltip_info"
				}
			}

			tooltip_divider = {}


			flowcontainer = {
				minimumsize = { 520 -1 }
				direction = vertical
				margin = { 10 10 }
				datamodel = "[AccessPlayer.AccessPoliticalMovements]"

				background = {
					using = entry_bg_simple
				}

				item = {
					movement_supporting_law_change_tooltip_item = {}
				}
			}
		}
	}

	type movement_supporting_law_change_tooltip_item = flowcontainer {
		direction = vertical
		tooltip = "[PoliticalMovement.MakeScope.GetScriptValueDesc('bpm_law_enactment_movement_pressure_value')]"
		using = tooltip_ws
		visible = "[GetScriptedGui('bpm_movement_supports_enacting_current_law_sg').IsShown(GuiScope.SetRoot(PoliticalMovement.MakeScope).End)]"

		widget = {
			size = { 530 40 }

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5

				icon = {
					visible = "[LessThan_CFixedPoint(PoliticalMovement.GetRadicalism, '(CFixedPoint)0.5')]"
					size = { 25 25 }
					texture = "gfx/interface/icons/political_movement_icons/political_activism.dds"
				}

				icon = {
					visible = "[GreaterThanOrEqualTo_CFixedPoint(PoliticalMovement.GetRadicalism, '(CFixedPoint)0.5')]"
					size = { 25 25 }
					texture = "gfx/interface/icons/political_movement_icons/political_activism_red.dds"
				}

				textbox = {
					size = { 50 40 }
					align = nobaseline
					elide = right
					fontsize_min = 12
					text = "[PoliticalMovement.GetRadicalism|=0%]"
				}

				icon = {
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/population.dds"
				}

				textbox = {
					size = { 50 40 }
					align = nobaseline
					elide = right
					fontsize_min = 12
					text = "POLITICAL_MOVEMENT_SUPPORT_WITHOUT_LABEL"
				}

				vertical_divider = {
					blockoverride "size" {
						layoutpolicy_vertical = expanding
						size = { 2 0 }
					}
				}

				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 40 }
					align = nobaseline
					elide = right
					fontsize_min = 12
					text = "[PoliticalMovement.GetName]"
				}

				expand = {}

				icon = {
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/arrow_right_small.dds"
				}

				expand = {}

				textbox = {
					size = { 80 40 }
					align = right|nobaseline
					elide = right
					fontsize_min = 12
					text = "[PoliticalMovement.MakeScope.ScriptValue('bpm_law_enactment_movement_pressure_value')|=0]"
				}
			}
		}
	}

	type RegularTooltip_Synergy = RegularTooltip {
		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				# exception
				text = "bpm_cab_synergy_tt"
				align = left
				layoutpolicy_horizontal = expanding
			}

			tooltip_divider = {
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_cabinet_disagreements')))]"
			}
			custom_tooltip_textbox = {
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_cabinet_disagreements')))]"
				# header
				raw_text = "#header Cabinet Disagreements#!"
				align = left
				layoutpolicy_horizontal = expanding
			}
			bpm_disagreements = {}
			tooltip_divider = {
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_hoshog_disagreements')))]"
			}
			custom_tooltip_textbox = {
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_hoshog_disagreements')))]"
				# header
				raw_text = "#header [Country.GetRuler.GetPrimaryRoleTitle] and the [GetPlayer.GetCustom('bpm_hog_title_country_spec')] Disagreements#!"
				align = left
				layoutpolicy_horizontal = expanding
			}
			bpm_disagreements = {
				blockoverride "visible" {
					visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_hoshog_disagreements')))]"
				}
				blockoverride "model" {
					datamodel = "[GetPlayer.MakeScope.GetList('bpm_hoshog_disagreements')]"
				}
				blockoverride "tooltip" {
					tooltip = "[Law.GetCustom('bpm_hoshog_disagreement_tooltip')]"
				}
			}

		}
	}

	type RegularTooltip_Hostility = RegularTooltip {
		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				# exception
				text = "bpm_government_hostility_level_tt"
				align = left
				layoutpolicy_horizontal = expanding
			}

			tooltip_divider = {
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_hostility_disagreements')))]"
			}
			custom_tooltip_textbox = {
				visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_hostility_disagreements')))]"
				# header
				raw_text = "#header Disagreements#!"
				align = left
				layoutpolicy_horizontal = expanding
			}
			bpm_disagreements = {
				blockoverride "visible" {
					visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_hostility_disagreements')))]"
				}
				blockoverride "model" {
					datamodel = "[GetPlayer.MakeScope.GetList('bpm_hostility_disagreements')]"
				}
				blockoverride "tooltip" {
					tooltip = "[Law.GetCustom('bpm_hostility_disagreement_tooltip')]"
				}
			}

		}
	}

	type bpm_disagreements = flowcontainer {
		size = { 400 -1 }
		direction = vertical
		background = {
			using = entry_bg_simple
			alpha = 0.92
			margin = { 2 0 }
		}
		block "visible" {
			visible = "[Not(IsDataModelEmpty(GetPlayer.MakeScope.GetList('bpm_cabinet_disagreements')))]"
		}
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 10 10 }
			dynamicgridbox = {
				#margin = { 10 10 }
				block "model" {
					datamodel = "[GetPlayer.MakeScope.GetList('bpm_cabinet_disagreements')]"
				}

				flipdirection = yes
				block "datamodel_wrap" {
					datamodel_wrap = 2
				}
						
				item = {
					flowcontainer = {

						flowcontainer = {
							datacontext = "[Scope.GetLaw]"
							#visible = "[ObjectsEqual(GetPlayer.GetActiveLawFromGroup('lawgroup_governance_principles').GetLawType, Law.GetLawType)]"

							minimumsize = { 180 64 }
							direction = horizontal
							using = entry_bg_fancy
							flowcontainer = {
								minimumsize = { 10 -1 }
							}
							block "tooltip" {
								tooltip = "[Law.GetCustom('bpm_cabinet_disagreement_tooltip')]"
							}
							icon = {
								texture = "[Law.GetTexture]"
								parentanchor = vcenter
								size = { 48 48 }
							}
							textbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = growing
								align = hcenter|nobaseline
								parentanchor = vcenter
								fontsize_min = 14
								multiline = yes
								
								minimumsize = { 120 40 }
								#multiline = yes
								text = "[Law.GetName]"
							}

						}				
					}
				}
			}  
		}  

	}


}

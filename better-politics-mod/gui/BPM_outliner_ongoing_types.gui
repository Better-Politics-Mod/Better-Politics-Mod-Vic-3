types ongoing_outliner_items {
	### LAW ENACTMENT
	type outliner_law_enactment = container {
		datacontext = "[GetPlayer.GetLawBeingEnacted]"
		visible = "[Law.IsBeingEnacted]"

		flowcontainer = {
			direction = vertical

			enactment_button = {}

			outliner_law_enactment_events = {}
		}

		icon = {
			visible = no
			using = highlighted_square_selection
			size = { 100% 100% }
		}
	}

	type enactment_button = button {

		block "size" {
			size = { 350 125 }
		}
		
		onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
		using = default_button_primary
		tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 5
			spacing = 1

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 12
				margin_right = 2

				icon = {
					size = { 54 54 }
					texture = "gfx/interface/backgrounds/round_button_bg.dds"
					
					round_progress_default = {
						visible = "[Not(LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25'))]"
						size = { 80% 80% }
						parentanchor = center
						datacontext = "[GetPlayer.GetLawBeingEnacted]"
						value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
					}

					round_progress_bad = {
						visible = "[LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25')]"
						size = { 80% 80% }
						parentanchor = center
						datacontext = "[GetPlayer.GetLawBeingEnacted]"
						value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
					}
					
					law_icon = {
						alpha = "[TransparentIfTrue(LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25'))]"
						size = { 38 38 }
						parentanchor = center
					}

					paused_icon_bad = {
						visible = "[LessThan_int32(GetPlayer.GetGovernmentLegitimacy, '(int32)25')]"
						#size = { 28 28 }
						parentanchor = center
					}
				}

				vbox = {
					spacing = 4
					layoutpolicy_horizontal = expanding

					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 20 }
						align = center|nobaseline
						elide = right
						fontsize_min = 14
						
						text = "ENACTING_TO_LAW"
						
						background = {
							using = default_header_bg
							alpha = 1
							margin_bottom = 5
							margin_top = 5
							
							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_center.dds"
								blend_mode = alphamultiply
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						textbox = {
							autoresize = yes
							layoutpolicy_horizontal = expanding
							align = left|nobaseline
							elide = right
							fontsize_min = 14
							margin_left = 10
							visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
							
							text = "OUTCOME_SUCCESS_SHORT"
						}
						textbox = {
							autoresize = yes
							layoutpolicy_horizontal = expanding
							align = left|nobaseline
							elide = right
							fontsize_min = 14
							margin_left = 10
							visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
							
							text = "bpm_law_enactment_outliner_voting_label"
						}
	
						hbox = {
							visible = "[GreaterThan_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)0')]"
							layoutpolicy_horizontal = preferred
							spacing = 0
							margin_right = 10

							expand = {}
							
							textbox = {
								autoresize = yes
								align = center|nobaseline
								text = "LAW_ENACTMENT_SETBACKS_LABEL"
								fontsize_min = 14
								elide = right
							}

							widget = {
								size = { 3 3 }
							}

							#Setback 1
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)1')]"
								}
							}

							#Setback 2
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)2')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)2')]"
								}
							}

							#Setback 3
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)3')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)3')]"
								}
							}

							#Setback 4
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)4')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)4')]"
								}
							}

							#Setback 5
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)5')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)5')]"
								}
							}

							#Setback 6
							enactment_setback = {
								visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)6')]"

								blockoverride "has_setback_visibility" {
									visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)6')]"
								}
							}
						}
					}
				}
			}

			hbox = {
				max_width = 330
				layoutpolicy_horizontal = preferred
				spacing = 1

				# Successes
				#Phase 0
				enactment_phase = {
					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}

				#Phase 1
				enactment_phase = {
					blockoverride "current_phase_visibility" {
						visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "past_phase_visibility" {
						visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "not_reached_phase_visibility" {
						visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "phase_name" {
						text = "[Law.GetCountry.GetCustom('enactment_phase_1')]"
					}

					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}

				#Phase 2
				enactment_phase = {
					blockoverride "current_phase_visibility" {
						visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "past_phase_visibility" {
						visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "not_reached_phase_visibility" {
						visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "phase_name" {
						text = "[Law.GetCountry.GetCustom('enactment_phase_2')]"
					}

					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}
			}

			hbox = {
				tooltip = "bpm_law_voting_tooltip"
				textbox = {
					size = { 50 30 }
					align = left|nobaseline
					text = "bpm_law_enactment_outliner_vote_label"
				}
				textbox = {
					size = { 30 30 }
					text = "bpm_law_enactment_outliner_yea"
					align = center|nobaseline
				}
				battle_progressbar = {
					name = "bpm_law_voting"
					size = { 200 10 }
					blockoverride "values" {
						value = "[GetPlayer.MakeScope.ScriptValue('bpm_law_enactment_yea_votes_cached_value')]"
						min = 0
						max = 1
					}
				}
				textbox = {
					size = { 30 30 }
					text = "bpm_law_enactment_outliner_nay"
					align = center|nobaseline
				}
			}
		}
	}

	type enactment_setback = widget {
		size = { 25 25 }

		icon = {
			name = icon_frame
			size = { 25 25 }
			parentanchor = center
			texture = "gfx/interface/backgrounds/round_button_bg.dds"

			icon = {
				name = icon
				size = { 16 16 }
				parentanchor = center

				block "has_setback_visibility" {
					#visible = "[EqualTo_int32(Law.GetNumberOfSetbacks, '(int32)0')]"
				}

				block "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/red_cross.dds"
				}
			}
		}
	}

	type enactment_phase = hbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		
		block "max_width" {
			max_width = 360
		}

		# Is Current phase
		widget = {

			block "active_size" {
				size = { 110 28 }
			}

			block "current_phase_visibility" {
				visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			icon = {
				using = highlighted_square_selection
			}

			textbox = {
				parentanchor = vcenter|hcenter
				align = nobaseline
				default_format = "#v"
				autoresize = yes
				fontsize_min = 14
				elide = right

				block "text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}

		# Past phase
		widget = {
			block "past_size" {
				size = { 110 28 }
			}

			alpha = 0.8

			block "past_phase_visibility" {
				visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			background = {
				using = entry_bg_simple
			}

			icon = {
				name = icon

				block "checkmark_position" {
					position = { 5 0 }
				}

				size = { 18 18 }
				parentanchor = vcenter

				block "past_phase_icon_texture" {
					texture = "gfx/interface/icons/generic_icons/checkmark.dds"
				}
			}

			textbox = {
				block "past_phase_parentanchor" {
					parentanchor = vcenter|hcenter
				}

				block "past_phase_align" {
					align = nobaseline
				}

				autoresize = yes
				fontsize_min = 14
				elide = right
				position = { -4 0 }

				block "past_phase_text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}

		# Not reached phase
		widget = {
			block "not_reached_size" {
				size = { 110 28 }
			}

			alpha = 0.3

			block "not_reached_phase_visibility" {
				visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			background = {
				using = entry_bg_simple
			}

			textbox = {
				parentanchor = vcenter|hcenter
				align = nobaseline
				autoresize = yes
				fontsize_min = 14
				elide = right

				block "text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}
	}

	### NON-REVOLUTIONARY POLITICAL MOVEMENT ITEM
	type outliner_non_revolutionary_political_movement_item = flowcontainer {
		direction = vertical
		visible = "[PoliticalMovement.IsPinnedInOutliner]"

		onmousehierarchyenter = "[AccessHighlightManager.HighlightPoliticalMovement(PoliticalMovement.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		tooltipwidget = {
			FancyTooltip_PoliticalMovement = {}
		}

		widget = {
			size = { 350 100 }

			button = {
				size = { 100% 90 }
				onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
				onrightclick = "[RightClickMenuManager.ShowForPoliticalMovement(PoliticalMovement.AccessSelf)]"
				using = default_button
				parentanchor = bottom

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 5
						margin_left = 5
						spacing = 2

						law_icon = {
							datacontext = "[PoliticalMovement.GetLaw]"
							size = { 37 37 }
						}

						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							align = left|vcenter
							elide = right
							fontsize_min = 12

							background = {
								using = dark_area
								alpha = 0.3
								margin_bottom = 6
								margin_top = 4
								
								modify_texture = {
									texture = "gfx/interface/masks/fade_horizontal_center.dds"
									blend_mode = alphamultiply
								}
							}
							
							text = "[PoliticalMovement.GetName]"	
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }

						### Characters ###
						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
							margin_left = 5
							margin_bottom = 10
							spacing = 3

							dynamicgridbox = {
								datamodel = "[PoliticalMovement.GetTopSupportingCharacters]"
								flipdirection = yes

								item = {
									icon = {
										size = { 28 28 }
										texture = "gfx/interface/icons/character_role_icons/agitator.dds"
										# parentanchor = bottom
										character_ig_icon = {
											parentanchor = bottom|right
											size = { 15 15 }
											blockoverride "in_government_icon" {}
											blockoverride "tooltip" {}
										}
									}
								}
							}

							textbox = {
								autoresize = yes
								visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetBottomSupportingCharacters))]"
								size = { 0 30 }
								align = right|nobaseline
								text = "AGITATORS_IN_QUEUE"
								fontsize_min = 12
								tooltip = "[PoliticalMovement.GetBottomSupportingCharactersDesc]"
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							margin_bottom = 15

							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
							}

							textbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(PoliticalMovement.IsPlacated)]"
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
							}

							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								
								visible = "[PoliticalMovement.IsPlacated]"
								text = "[concept_political_movement_placated]"
							}
						}
					}
				}
			}
			
			### Interest Groups
			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups))]"
				datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
				parentanchor = hcenter

				item = {
					ig_button = {
						size = { 26 26 }
						
						tooltipwidget = {
						 	FancyTooltip_IG = {}
						}
					}
				}
			}
		}
	}
}

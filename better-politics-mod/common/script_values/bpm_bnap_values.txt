bpm_british_engagement_from_relations = {
    value = 0
    owner = {
        top_overlord = {
            add = relations:prev
        }
    }
    divide = 100
}

bpm_british_engagement_from_economic_dependence = {
    value = 0

    owner = {
        add = "economic_dependence(top_overlord)"
    }
    
    subtract = 1

    divide = 5

}

bpm_british_administrative_payments = {
    value = bpm_british_administrative_payments_percent

    multiply = expenses
}

bpm_british_administrative_payments_percent = {
    value = 1
    if = {
        limit = {
            has_variable = bpm_bnap_admin_pay_fixed
        }
        subtract = 0.15
    }
    else = {
        subtract = bpm_british_administrative_payment_debuff
        subtract = 0.25 # natural debuff
    }
}

bpm_british_administrative_payment_debuff = {
    value = 0.25

    je:je_bpm_bnap_the_question_of_british_rule = {
        subtract = {
            value = "scripted_bar_progress(je_bpm_bnap_british_engagement_progress_bar)"
            divide = 400
        }
    }
}

bpm_british_administrative_payment_percent_for_tt = {
    add = {
        value = 0.5
        desc = "bpm_bnap_british_payments_percent_base_value"
    }

    add = {
        value = bpm_british_engagement
        divide = 400
        desc = "bpm_bnap_british_payments_percent_from_engagement"
    }
}

bpm_british_engagement = {
    value = 0

    je:je_bpm_bnap_the_question_of_british_rule = {
        add = {
            value = "scripted_bar_progress(je_bpm_bnap_british_engagement_progress_bar)"
        }
    }
}

bpm_patriots_support = {
    value = 0

    je:je_bpm_bnap_the_patriots = {
        add = {
            value = "scripted_bar_progress(je_bpm_bnap_patriots_patriot_support)"
        }
    }
}

bpm_british_engagement_from_administrative_payments = {
    value = 0

    owner = {
        add = bpm_british_engagement_from_administrative_payments_subcon
    }
}

bpm_british_engagement_from_administrative_payments_subcon = {
    value = bpm_british_administrative_payments

    top_overlord = {
        divide = income
    }
    subtract = 0.05 # if the cost is less than 5% of the income, the modifier is positive
    multiply = -2

    round_to = 0.1
}

bpm_bnap_income = {
    value = top_overlord.income
}

bpm_bnap_patriots_balance_of_power_from_gdp = {
    value = 0

    
    add = bpm_quebec_gdp
    divide = bpm_ontario_gdp

    subtract = 1
    
    round_to = 0.1
}

bpm_ontario_gdp = {
    value = 0

    if = {
        limit = {
            c:CAN ?= {
                has_state_in_state_region = STATE_ONTARIO
            }
        }
        add = s:STATE_ONTARIO.region_state:CAN.gdp
    }
    if = {
        limit = {
            c:ONT = {
                has_state_in_state_region = STATE_ONTARIO
            }
        }
        add = s:STATE_ONTARIO.region_state:ONT.gdp
    }
}

bpm_quebec_gdp = {
    value = 0

    if = {
        limit = {
            c:CAN ?= {
                has_state_in_state_region = STATE_QUEBEC
            }
        }
        add = s:STATE_QUEBEC.region_state:CAN.gdp
    }
    if = {
        limit = {
            c:QUE = {
                has_state_in_state_region = STATE_QUEBEC
            }
        }
        add = s:STATE_QUEBEC.region_state:QUE.gdp
    }
}

bpm_bnap_bleub_from_relations = {
    value = 0 
    owner = {
        c:GBR = {
            add = relations:prev
        }
        c:USA = {
            subtract = relations:prev
        }
    }

    divide = 50

    round_to = 0.1
}

bpm_bnap_blen_from_prestige = {
    value = c:GBR.prestige

    divide = owner.prestige

    subtract = 10

    divide = 4

    round_to = 0.1
}

bpm_bnap_blen_from_gdp = {
    value = 0

    add = owner.gdp
    divide = c:GBR.gdp

    subtract = 0.1 # If the GDP is less than 10% of the British GDP, the modifier is negative

    multiply = 2

    round_to = 0.1
}

bpm_british_gdp = {
    value = 0

    c:GBR = {
        add = bpm_bnap_getgdp
    }
}

bpm_bnap_liberty_desire = {
    value = 0

    if = {
        limit = {
            owner = {
                liberty_desire_weekly_progress < 0
            }
            add = owner.liberty_desire
            divide = 25
        }
    }
    else = {
        add = -1
    }

    round_to = 0.1
}

bpm_bnap_getgdp = {
    value = gdp
}

bpm_bnap_nationalism = {
    je:je_bpm_bnap_between_lion_and_eagle = {
        value = "scripted_bar_progress(je_bpm_bnap_ble_nationalism)"
    }
}

bpm_bnap_brit_attachment = {
    je:je_bpm_bnap_between_lion_and_eagle = {
        value = "scripted_bar_progress(je_bpm_bnap_ble_us_brit_attachment)"
    }
}

bpm_bnap_urban_balance_of_power = {
    value = 0

    add = bpm_bnap_urban_balance_of_power_numerator
    divide = bpm_bnap_urban_balance_of_power_denominator
}

bpm_bnap_urban_balance_of_power_numerator = {
    value = 0

    if = {
        limit = {
            exists = c:NVS
        }
        c:NVS = {
            add = bpm_bnap_urban_pol_str
            divide = bpm_bnap_rural_pol_str
        }
    }
    if = {
        limit = {
            exists = c:NBS
        }
        c:NBS = {
            add = bpm_bnap_urban_pol_str
            divide = bpm_bnap_rural_pol_str
        }
    }
}

bpm_bnap_urban_balance_of_power_denominator = {
    if = {
        limit = {
            exists = c:NVS
        }
        add = 1
    }
    if = {
        limit = {
            exists = c:NBS
        }
        add = 1
    }
}

bpm_bnap_urban_pol_str = {
    value = 0 

    every_interest_group = {
        limit = {
            OR = {
                bpm_ig_is_urban_institutional = yes
                bpm_ig_is_liberal = yes
            }
        }
        add = ig_clout
    }
}

bpm_bnap_rural_pol_str = {
    value = 0

    every_interest_group = {
        limit = {
            OR = {
                bpm_ig_is_rural_institutional = yes
                bpm_ig_is_right_wing = yes
            }
        }
        add = ig_clout
    }
}

bpm_bnap_blen_from_british_engagement = {
    value = bpm_british_engagement

    divide = 100 

    subtract = 0.5

    if = {
        limit = {
            bpm_british_engagement < 0
        }
        multiply = -10
    }
    else = {
        multiply = -3
    }
}
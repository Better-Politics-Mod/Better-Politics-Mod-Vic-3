namespace = neighbor_events

# Religious figures reach out to the other country
neighbor_events.1 = {
	type = country_event
	placement = scope:neighbor_state

	title = neighbor_events.1.t
	desc = neighbor_events.1.d
	flavor = neighbor_events.1.f

	event_image = {
		trigger = {
			religion = rel:jewish
		}
		video = "europenorthamerica_judaism"

		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}
	event_image = {
		trigger = {
			OR = {
				religion = rel:protestant
				religion = rel:catholic
				religion = rel:orthodox
				religion = rel:oriental_orthodox
			}
		}
		video = "southamerica_christianity"

		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}
	event_image = {
		trigger = {
			OR = {
				religion = rel:hindu
				religion = rel:sikh
			}
		}
		video = "asia_hinduism_sikhism"

		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}
	event_image = {
		trigger = {
			religion = rel:shinto
		}
		video = "asia_confucianism_shinto"

		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}
	event_image = {
		trigger = {
			OR = {
				religion = rel:mahayana
				religion = rel:gelugpa
				religion = rel:theravada
			}
		}
		video = "asia_buddhism"

		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}
	event_image = {
		trigger = {
			OR = {
				religion = rel:sunni
				religion = rel:shiite
			}
		}
		video = "middleeast_islam"

		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}
	event_image = {
		trigger = {
			NOR = {
				religion = rel:jewish
				religion = rel:protestant
				religion = rel:catholic
				religion = rel:orthodox
				religion = rel:oriental_orthodox
				religion = rel:mahayana
				religion = rel:gelugpa
				religion = rel:theravada
				religion = rel:shinto
				religion = rel:hindu
				religion = rel:sikh
				religion = rel:sunni
				religion = rel:shiite
			}
		}
		video = "africa_leader_arguing"
	
		on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	}

	icon = "gfx/interface/icons/event_icons/event_map.dds"

	duration = 3

	trigger = {
		has_ruling_interest_group = ig_devout
		any_neighbouring_state = {
			owner = {
				religion = root.religion
				NOT = { is_country_type = decentralized }
			}
		}
	}

	immediate = {
		save_neighbor_with_state = {
			CRITERIA = "religion = root.religion"
		}
		ig:ig_devout = {
			save_scope_as = devout_ig
		}
	}

	option = {
		name = neighbor_events.1.a
		change_relations = {
			country = scope:neighbor_country
			value = 30
		}
		ig:ig_devout = {
			add_modifier = {
				name = faith_above_nation
				months = normal_modifier_time
			}
		}
		save_scope_as = originator
		scope:neighbor_country = { post_notification = neighbor_events_1 }
	}

	option = {
		name = neighbor_events.1.b
		default_option = yes
		every_interest_group = {
			limit = {
				bpm_ig_is_non_religious = yes
			}
			add_modifier = {
				name = nation_above_faith
				months = normal_modifier_time
			}
		}
	}
}

# Military warns for potential conflict
neighbor_events.2 = {
	type = country_event
	placement = scope:neighbor_state

	title = neighbor_events.2.t
	desc = neighbor_events.2.d
	flavor = neighbor_events.2.f

	event_image = {
		video = "middleeast_battlefield_trenches"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_military.dds"

	duration = 6

	trigger = {
		has_ruling_interest_group = ig_armed_forces
		any_neighbouring_state = {
			owner = {
				relations:root <= relations_threshold:cold
			}
		}
	}

	immediate = {
		save_neighbor_with_state = {
			CRITERIA = "relations:root <= relations_threshold:cold"
		}
		ig:ig_armed_forces = {
			save_scope_as = armed_forces_ig
		}
	}

	# Take aggressive stance
	option = {
		name = neighbor_events.2.a
		change_relations = {
			country = scope:neighbor_country
			value = -30
		}
		every_interest_group = {
			limit = { has_ideology = ideology:ideology_jingoist }
			add_modifier = {
				name = hawkish_neighbor_relations
				months = normal_modifier_time
			}
		}
	}

	# Do nothing
	option = {
		name = neighbor_events.2.b
		default_option = yes
		add_modifier = {
			name = if_you_want_peace_bad_modifier
			months = normal_modifier_time
		}
		every_interest_group = {
			limit = { has_ideology = ideology:ideology_jingoist }
			add_modifier = {
				name = dovish_neighbor_relations
				months = normal_modifier_time
			}
		}
	}
}

# Internationalist sentiment among unions
neighbor_events.3 = {
	type = country_event
	placement = scope:neighbor_state

	title = neighbor_events.3.t
	desc = neighbor_events.3.d
	flavor = neighbor_events.3.f

	event_image = {
		video = "votp_agitator_speaking"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_protest.dds"

	duration = 6

	trigger = {
		has_ruling_interest_group = ig_trade_unions
		any_neighbouring_state = {
			owner = {
				has_ruling_interest_group = ig_trade_unions
			}
		}
	}

	immediate = {
		save_neighbor_with_state = {
			CRITERIA = "has_ruling_interest_group = ig_trade_unions"
		}
		ig:ig_trade_unions = {
			save_scope_as = trade_unions_ig
		}
	}

	# Embrace sentiment
	option = {
		name = neighbor_events.3.a
		change_relations = {
			country = scope:neighbor_country
			value = 50
		}
		every_interest_group = {
			limit = {
				bpm_ig_is_middle_institutional = yes
			}
			add_modifier = {
				name = embraced_proletarian_internationalism
				months = normal_modifier_time
			}
		}
	}

	# Reject sentiment
	option = {
		name = neighbor_events.3.b
		default_option = yes
		ig:ig_trade_unions = {
			add_modifier = {
				name = rejected_proletarian_internationalism
				months = normal_modifier_time
			}
		}
	}
}

# Industrialists want to invest in neighbor
neighbor_events.4 = {
	type = country_event
	placement = scope:neighbor_state

	title = neighbor_events.4.t
	desc = neighbor_events.4.d
	flavor = neighbor_events.4.f

	event_image = {
		video = "southamerica_factory_opening"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_trade.dds"

	duration = 6

	trigger = {
		has_ruling_interest_group = ig_industrialists
		any_neighbouring_state = {
			owner = {
				relations:root >= relations_threshold:cordial
				NOT = { has_ruling_interest_group = ig_trade_unions }
			}
		}
	}

	immediate = {
		save_neighbor_with_state = {
			CRITERIA =	"relations:root >= relations_threshold:cordial
			NOT = { has_ruling_interest_group = ig_trade_unions }"
		}
		ig:ig_industrialists = {
			save_scope_as = industrialists_ig
		}
	}

	# Agree to foreign investment
	option = {
		name = neighbor_events.4.a
		change_relations = {
			country = scope:neighbor_country
			value = 30
		}
		scope:neighbor_country = {
			add_modifier = {
				name = foreign_investment
				months = normal_modifier_time
			}
		}
	}

	# Push for local investment
	option = {
		name = neighbor_events.4.b
		default_option = yes

		add_modifier = {
			name = enforced_domestic_investment
			months = normal_modifier_time
		}

		ig:ig_industrialists = {
			add_modifier = {
				name = protectionistic_investments
				months = normal_modifier_time
			}
		}
	}
}


# Banned newspaper printed in neighboring country
neighbor_events.5 = {
	type = country_event
	placement = scope:neighbor_country

	title = neighbor_events.5.t
	desc = neighbor_events.5.d
	flavor = neighbor_events.5.f

	event_image = {
		video = "middleeast_courtroom_upheaval"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_newspaper.dds"

	duration = 6

	trigger = {
		OR = {
			has_law = law_type:law_outlawed_dissent
			has_law = law_type:law_censorship
		}
		any_neighbouring_state = {
			owner = {
				has_law = law_type:law_protected_speech
			}
		}
	}

	immediate = {
		save_neighbor_with_state = {
			CRITERIA = "has_law = law_type:law_protected_speech"
		}
	}

	option = {
		name = neighbor_events.5.a
		change_relations = {
			country = scope:neighbor_country
			value = 30
		}
		every_interest_group = {
			limit = {
				law_stance = {
					law = law_type:law_protected_speech
					value < neutral
				}
			}
			add_modifier = {
				name = permitted_obscene_publication
				months = normal_modifier_time
			}
		}
	}

	option = {
		name = neighbor_events.5.b
		default_option = yes

		change_relations = {
			country = scope:neighbor_country
			value = -30
		}
		every_interest_group = {
			limit = {
				law_stance = {
					law = law_type:law_protected_speech
					value < neutral
				}
			}
			add_modifier = {
				name = stopped_obscene_publication
				months = normal_modifier_time
			}
		}
	}
}

# Book banned in neighbor accepted by local publisher
neighbor_events.6 = {
	type = country_event
	placement = scope:neighbor_country

	title = neighbor_events.6.t
	desc = neighbor_events.6.d
	flavor = neighbor_events.6.f

	event_image = {
		video = "middleeast_courtroom_upheaval"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_newspaper.dds"

	duration = 6

	trigger = {
		has_law = law_type:law_protected_speech
		any_neighbouring_state = {
			owner = {
				is_at_war = no
				OR = {
					has_law = law_type:law_outlawed_dissent
					has_law = law_type:law_censorship
				}
			}
		}
	}

	immediate = {
		random_neighbouring_state = {
			limit = {
				owner = {
					is_at_war = no
					OR = {
						has_law = law_type:law_outlawed_dissent
						has_law = law_type:law_censorship
					}
				}
			}
			owner = {
				save_scope_as = neighbor_country
			}
		}
	}

	option = {
		name = neighbor_events.6.a
		change_relations = {
			country = scope:neighbor_country
			value = 30
		}
		every_interest_group = {
			limit = {
				law_stance = {
					law = law_type:law_protected_speech
					value > neutral
				}
			}
			add_modifier = {
				name = curtailed_free_speech
				months = normal_modifier_time
			}
		}
	}

	option = {
		name = neighbor_events.6.b
		default_option = yes

		change_relations = {
			country = scope:neighbor_country
			value = -30
		}
		every_interest_group = {
			limit = {
				law_stance = {
					law = law_type:law_protected_speech
					value > neutral
				}
			}
			add_modifier = {
				name = championed_free_speech
				months = normal_modifier_time
			}
		}
	}
}


# Population notices neighbor has higher standard of living
neighbor_events.7 = {
	type = country_event
	placement = scope:neighbor_neighbor_state

	title = neighbor_events.7.t
	desc = neighbor_events.7.d
	flavor = neighbor_events.7.f

	event_image = {
		video = "middleeast_middleclass_cafe"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_protest.dds"

	duration = 6

	trigger = {
		any_neighbouring_state = {
			owner = {
				NOT = { is_country_type = decentralized }
				average_sol > root.average_sol
			}
		}
		ig:ig_trade_unions = {
			is_marginal = no
		}
	}

	immediate = {
		save_neighbor_with_state = {
			CRITERIA = "NOT = { is_country_type = decentralized }
				average_sol > root.average_sol"
		}
	}

	option = {
		name = neighbor_events.7.a
		ig:ig_trade_unions = {
			add_modifier = {
				name = criticized_economic_injustice
				months = short_modifier_time
			}
		}
		every_interest_group = {
			limit = {
				bpm_ig_is_middle_institutional = yes
			}
			add_modifier = {
				name = blamed_economic_inequality
				months = normal_modifier_time
			}
		}
	}

	option = {
		name = neighbor_events.7.b
		change_relations = {
			country = scope:neighbor_country
			value = -30
		}
	}

	option = {
		name = neighbor_events.7.c
		default_option = yes
		scope:neighbor_neighbor_state = {
			add_radicals_in_state = {
				value = medium_radicals
			}
		}
	}
}

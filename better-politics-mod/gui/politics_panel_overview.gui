@non_layoutpolicy_max_width = 300 #for elements that can not use a layoutpolicy, need to be adapted for lowest resolution 1600x900.

types politics_panel_types
{
	### PARTIES AND IG LIST
	type parties_and_ig_list = vbox {
		spacing = 20

		block "tutorial_highlight_name" {
			name = "tutorial_highlight_all_government_interest_groups"
		}
								
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel_parties" {
				datamodel = "[Country.GetPartiesInGovernment]"
			}
			spacing = 10
			
			item = {
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					
					background = {
						using = simple_frame
					}
					
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						margin = { 10 0 }
						
						background = {
							texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
							color = "[Party.GetColor]"
							alpha = 0.5
							mirror = horizontal
							
							modify_texture = {
								using = texture_velvet
							}
						}
						
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							text = "#v [Party.GetName]#!"
							align = right|nobaseline
							block "highlight_name" {}
							elide = right
						}
						icon = {
							texture = "[Party.GetIcon]"
							size = { 25 25 }
						}
					}
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						datamodel = "[Party.GetMembers]"
						
						item = {
							ig_item = {
								block "ig_item_properties" {}
							}
						}
					}
				}
			}
		}
		
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel_independent_igs" {
				datamodel = "[Country.GetIndependentInterestGroupsInGovernment]"
			}
			
			item = {
				ig_item = {
					block "ig_item_properties" {}
				}
			}
		}
					
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}
	
	### IG ITEM
	type ig_item = widget {
		layoutpolicy_horizontal = expanding
		size = { 0 65 }
		
		tooltipwidget = {
			FancyTooltip_IG = {}
		}
		
		divider_clean = {}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 10 
			margin_right = 15
			margin_left = 10
			
			background = {
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				color = "[InterestGroup.GetColor]"
				alpha = 0.6
				
				modify_texture = {
					using = texture_velvet
				}
			}

			ig_button = {
				block "ig_icon_size" {
					size = { 56 56 }
				}
				blockoverride "in_government_icon" {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					margin = { 0 5 }
					
					hbox = {
						layoutpolicy_horizontal = expanding
						textbox = {
							margin_right = 5
							autoresize = yes
							text = "[InterestGroup.GetNameNoIcon]"
							align = left|nobaseline
							elide = right
							block "fontsize_name" {
								using = fontsize_large
							}
						}

						button_icon_goto = {
							size = { 25 25 }
 							onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
							tooltip = "GO_TO_BUTTON_INTEREST_GROUP"
							block "goto_visibility" {}
 						}

 						expand = {}
					}
					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 20 }
						text = "[InterestGroup.GetApprovalRating] #bold ([InterestGroup.GetApprovalValue|=+])#!"
						tooltip = "IG_APPROVAL_BREAKDOWN"
						using = tooltip_below
						align = nobaseline
						elide = right
					}
				}
				
				textbox = {
					autoresize = yes
					text = "[InterestGroup.GetClout|%1]"
					using = clout_tooltip_with_graph
					align = nobaseline
					block "fontsize_clout" {
						using = fontsize_xxl
					}
				}
			}

			icon = {
				visible = "[InterestGroup.GetPartyAffiliationHighest.IsValid]"
				texture = "[InterestGroup.GetPartyAffiliationHighest.GetIcon]"
				size = { 18 18 }
				tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
			}

			icon = {
				visible = "[Not(InterestGroup.GetPartyAffiliationHighest.IsValid)]"
				texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
				size = { 18 18 }
				tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
			}
		}
	}
	
	### RULER ITEM
	type politics_panel_ruler_item = widget {
		layoutpolicy_horizontal = expanding
		size = { 0 175 }
		using = tooltip_below

		block "visible" {
			visible = "[Country.HasRuler]"
		}

		block "datacontext" {
			datacontext = "[AccessPlayer.AccessRuler]"
		}
		
		using = entry_bg_fancy

		tooltipwidget = {
			FancyTooltip_Character = {}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			spacing = 5
			margin_left = 5
			margin_right = 10
		
			character_portrait_medium_torso = {
				using = tooltip_below
				blockoverride "show_hat" {}
				blockoverride "highlight" {}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred

				### TITLE + NAME
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					margin_top = 10
					
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						
						textbox = {
							text = "#title [Country.GetRuler.GetPrimaryRoleTitle]#!"
							layoutpolicy_horizontal = expanding
							size = { 0 16 }
							elide = right
							align = left|nobaseline
						}
						block "additional_info_top_right" {}
					}
					
					textbox = {
						text = "#BOLD [Character.GetFullNameNoFormatting]#!"
						layoutpolicy_horizontal = expanding
						size = { 0 20 }
						fontsize_min = 14
						elide = right
						align = left|nobaseline
						using = fontsize_large
					}
				}
				
				### ICONS
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					spacing = 10
					
					### TRAITS
					flowcontainer = {
						datamodel = "[Character.AccessTraits]"
						spacing = 2

						item = {
							icon = {
								size = { 30 42 }
								texture = "[CharacterTrait.GetTexture]"
								using = tooltip_above

								tooltipwidget = {
									FancyTooltip_CharacterTrait = {}
								}
							}
						}
					}
					
					### IG ICON
					character_ig_button = {
						size = { 40 40 }
						blockoverride "in_government_icon" {}
					}
					
					### IDEOLOGY
					icon = {
						size = { 40 40 }
						datacontext = "[Character.GetIdeology]"					
						texture = "[Ideology.GetTexture]"
						tooltipwidget = {
							FancyTooltip_Ideology = {}
						}
					}
					
					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
				}
			
				### HEIR
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					margin_bottom = 10
					visible = "[Country.HasHeir]"
					
					character_portrait_small = {
						datacontext = "[AccessPlayer.AccessHeir]"
					}
					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 25 }
						datacontext = "[Character.GetInterestGroup]"
						text = "character_role_heir"
						default_format = "#title"
						align = left|nobaseline
					}
				}
			}
		}
	}
	
	### LEGITIMACY ITEM
	type politics_panel_legitimacy_item = vbox {
		margin = { 5 0 }
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		spacing = 5

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			datacontext = "[Country.GetGovernmentLegitimacyLevel]"
			tooltip = "LEGITIMACY_LEVEL_ACTIVE_TOOLTIP"
			
			textbox = {
				autoresize = yes
				text = "[LegitimacyLevel.GetNameNoFormatting|v]"
				align = left|nobaseline
				elide = right
			}
			textbox = {
				layoutpolicy_horizontal = expanding
				size = { 0 20 }
				text = "#variable [Country.GetGovernmentLegitimacy]#!"
				align = left|nobaseline
				elide = right
			}
		}
		
		levels_progressbar = {
			datamodel = "[GetLegitimacyLevels]"
			
			blockoverride "item_properties" {
				layoutstretchfactor_horizontal = "[LegitimacyLevel.GetWidth]"
				tooltip = "[SelectLocalization( LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy ), 'LEGITIMACY_LEVEL_ACTIVE_TOOLTIP', 'LEGITIMACY_LEVEL_INACTIVE_TOOLTIP' )]"
			}
			blockoverride "level_active" {
				visible = "[LegitimacyLevel.IsActive( Country.GetGovernmentLegitimacy )]"
			}
			blockoverride "last_level" {
				visible = "[Not(EqualTo_int32( LegitimacyLevel.GetUpperBound, '(int32)100' ))]"
			}
			blockoverride "default_progressbar_value" {
				value = "[LegitimacyLevel.GetProgress( Country.GetGovernmentLegitimacy )]"
			}
		}
	}
	
	type politics_panel_overview_content = hbox {
		datacontext = "[AccessPlayer]"
		
		### GOVERNMENT / OPPOSITION
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			
			background = {
				using = light_bg
				alpha = 0.65
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_less_left.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
			background = {
				texture = "gfx/interface/illustrations/government/government_illustration.dds"
				alpha = 0.1
				fittype = end
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_less_left.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10
				margin = { 10 10 }
				
				### GOVERNMENT
				vbox = {
					layoutstretchfactor_horizontal = 3
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					margin = { 5 0 }
					spacing = 10

					### HEADER
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						margin = { 5 8 }
						
						background = {
							using = dark_area
							margin_right = -15
							alpha = 0.15
							margin = { -15 -8 }
							
							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_left.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
							}
						}
						
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							text = "#tooltippable #tooltip:[Country.GetGovernment.GetTooltipTag],GOVERNMENT_TYPE_TOOLTIP_DESC [Country.GetGovernment.GetName]#!#!"
							align = left|nobaseline
							elide = right
							using = fontsize_xxl
							margin_left = 5
						}
						
						textbox = {
							autoresize = yes
							text = "GOVERNMENT"
							align = right|nobaseline
							elide = right
							default_format = "#title"
						}
						icon = {
							texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
							size = { 30 30 }
						}
					}
					
					politics_panel_ruler_item = {}
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 15
						
						politics_panel_legitimacy_item = {
							margin_bottom = 5
						}
						
						#reform button
						button = {
							visible = "[Not(GetVariableSystem.Exists('reform_government'))]"
							enabled = "[Not(Country.IsCivilWarCountry)]"
							tooltip = "[AddLocalizationIf(Country.IsCivilWarCountry, 'REFORM_GOVERNMENT_CIVIL_WAR_ERROR')]"
							size = { 250 45 }
							using = default_button
							text = "REFORM_GOVERNMENT"
							onclick = "[InformationPanel.SelectTab('interest_groups')]"
							onclick = "[GetVariableSystem.Toggle('reform_government')]"
						}
						button = {
							visible = "[GetVariableSystem.Exists('reform_government')]"
							size = { 250 45 }
							using = default_button
							text = "REFORM_GOVERNMENT"
							onclick = "[InformationPanel.SelectTab('interest_groups')]"
						}
					}
					
					### IGs in government
					fullscreen_scrollarea = {
						blockoverride "scrollarea_content" {
							parties_and_ig_list = {}
						}
					}
				}
				
				hbox = {
					layoutpolicy_vertical = expanding
					margin_bottom = 20
					vertical_divider_stronger_full = {
						size = { 2 0 }
						layoutpolicy_vertical = expanding
					}
				}
				
				### OPPOSITION
				vbox = {
					layoutstretchfactor_horizontal = 2
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin = { 5 0 }
					spacing = 10
					
					### HEADER
					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						margin = { 5 8 }
						
						background = {
							using = dark_area
							margin_right = -15
							alpha = 0.15
							margin = { -15 -8 }
							
							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_left.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
							}
						}
						
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 30 }
							text = "OPPOSITION"
							align = right|nobaseline
							elide = right
							default_format = "#title"
						}
						icon = {
							texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
							size = { 30 30 }
						}
					}
					
					### IGs in opposition
					fullscreen_scrollarea = {
						blockoverride "scrollarea_content" {
							parties_and_ig_list = {

								blockoverride "tutorial_highlight_name" {
									name = "tutorial_highlight_all_opposition_interest_groups"
								}
								blockoverride "datamodel_parties" {
									datamodel = "[Country.GetPartiesInOpposition]"
								}
								blockoverride "datamodel_independent_igs" {
									datamodel = "[Country.GetIndependentInterestGroupsInOpposition]"
								}
								blockoverride "ig_item_properties" {
									size = { 0 58 }
								}
								blockoverride "ig_icon_size" {
									size = { 40 40 }
								}
								blockoverride "fontsize_name" {}
								blockoverride "fontsize_clout" {
									using = fontsize_large
								}
							}
						}
					}
				}
			}
		}
		
		### SCROLLABLE INFO RIGHT
		fullscreen_scrollarea = { 
			blockoverride "scrollarea_width" {
				size = { 720 0 }
			}
			background = {
				using = dark_area
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_vertical_center.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_less_right.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
			blockoverride "scrollarea_content" {
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 10
					
					vertical_divider_stronger_full = {
						size = { 3 0 }
						layoutpolicy_vertical = expanding
					}
					
					### TRAITS / CLOUT / ELECTION
					vbox = {
						layoutstretchfactor_horizontal = 1
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 10 0 }
						spacing = 20
					
						### ACTIVE IG GROUP TRAITS
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							
							default_header_clean_faded = {
								layoutpolicy_horizontal = preferred
								size = { 0 44 }
								blockoverride "text" {
									text = "ACTIVE_IG_GROUP_TRAITS"
								}
							}

							dynamicgridbox = {
								visible = "[Not(IsDataModelEmpty(PoliticsPanel.AccessActiveIGTraits))]"
								datamodel = "[PoliticsPanel.AccessActiveIGTraits]"
								flipdirection = yes
								datamodel_wrap = 4 #adapated for lowest resolution
								item = {
									widget = {
										size = { 76 100 }
										
										icon = {
											texture = "[InterestGroupAndTraitPair.GetTrait.GetTexture]"
											enabled = "[InterestGroupAndTraitPair.GetTrait.IsEnabled(InterestGroupAndTraitPair.GetInterestGroup)]"
											parentanchor = center
											datacontext = "[InterestGroupAndTraitPair.GetTrait]"
											datacontext = "[InterestGroupAndTraitPair.GetInterestGroup]"

											tooltipwidget = {
												FancyTooltip_InterestGroupTrait = {}
											}
											using = tooltip_above
											size = { 67 90 }
										}
										ig_button = {
											parentanchor = bottom|right
											size = { 35 35 }
											
											#PRCAL-7234
											datacontext = "[InterestGroupAndTraitPair.GetInterestGroup]"
											blockoverride "tooltip" {}
										}
									}
								}
							}

							textbox = {
								text = "NO_ACTIVE_TRAITS"
								tooltip = "NO_ACTIVE_TRAITS_EXPLAIN"
								visible = "[IsDataModelEmpty(PoliticsPanel.AccessActiveIGTraits)]"
								autoresize = yes
								using = fontsize_large
								multiline = yes
								maximumsize = { @non_layoutpolicy_max_width -1 }
								align = center|nobaseline
								margin = { 0 20 }
							}
						}

						### CLOUT
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							
							v3_plotline_clout = {
								blockoverride "size" {
									size = { 230 140 } #width have to be adapted for lowest resolution
								}
							}
						}

						### ELECTIONS
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							visible = "[AccessPlayer.HasElections]"
							spacing =  5

							default_header_clean_faded = {
								layoutpolicy_horizontal = preferred
								size = { 0 44 }
								blockoverride "text" {
									text = "ELECTION"
								}
							}

							textbox = {
								layoutpolicy_horizontal = preferred
								size = { 0 25 }
								visible = "[Not(AccessPlayer.IsInElectionCampaignPeriod)]"
								text = "NEXT_ELECTION_DATE"
								elide = right
								align = left|nobaseline
							}

							button = {
								layoutpolicy_horizontal = preferred
								size = { 0 45 }
								using = default_button
								visible = "[AccessPlayer.IsInElectionCampaignPeriod]"
								onclick = "[InformationPanelBar.OpenElectionPanel(AccessPlayer)]"
								tooltip = "[AccessPlayer.GetElectionPollTooltip]"

								hbox = {
									margin = { 15 0 }
									spacing = 5

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/event_icons/event_default.dds"
									}

									textbox = {
										layoutpolicy_horizontal = preferred
										size = { 0 30 }
										text = "DAYS_UNTIL_ELECTION"
										align = left|nobaseline
										elide = right
									}

									textbox = {
										autoresize = yes
										text = "ELECTION_REMAINING_DAYS"
										align = right|nobaseline
									}
								}
							}
							
							textbox = {
								layoutpolicy_horizontal = preferred
								size = { 0 25 }
								text = "POLITICALLY_INACTIVE_POPULATION"
								tooltip = "POLITICALLY_INACTIVE_POPULATION_TOOLTIP"
								align = left|nobaseline
								elide = right
								margin_bottom = 10
							}

							textbox = {
								layoutpolicy_horizontal = preferred
								size = { 0 25 }
								visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessLastElectionParties))]"
								text = "PREVIOUS_ELECTION_RESULTS"
								elide = right
								align = left|nobaseline
								default_format = "#title"
							}
							
							vbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = preferred
								datamodel = "[AccessPlayer.AccessLastElectionParties]"
								
								item = {
									widget = {
										# toggle back on when doing PRCAL-15542
										# using = default_button
										# onclick = "[InformationPanelBar.OpenPartyPanel(Party.AccessSelf)]"
										
										layoutpolicy_horizontal = preferred
										size = { 0 45 }

										tooltipwidget = {
											FancyTooltip_Party = {}
										}

										hbox = {
											layoutpolicy_horizontal = preferred
											layoutpolicy_vertical = preferred
											margin_left = 10
											margin_right = 15
											spacing = 5
											
											icon = {
												texture = "[Party.GetIcon]"
												size = { 30 30 }
											}
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 30 }
												text = "[Party.GetNameNoFormatting]"
												align = left|nobaseline
											}
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 30 }
												align = right|nobaseline
												text = "[Party.GetCurrentVotingPower|Kv] ([Party.GetCurrentVotingPowerShare|%1])"
												tooltip = "PARTY_ELECTION_TOOLTIP"
											}
										}
									}
								}
							}
						}
						
						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
					}

					vertical_divider_stronger_full = {
						size = { 3 0 }
						layoutpolicy_vertical = expanding
					}

					### LAWS / POLITICAL MOVEMENTS / CIVIL WARS / INSTITUTIONS
					vbox = {
						layoutstretchfactor_horizontal = 1
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 10 0 }
						spacing = 20

						### LAWS
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							datacontext = "[GetPlayer.GetLawBeingEnacted]"

							default_header_clean_faded = {
								layoutpolicy_horizontal = preferred
								size = { 0 44 }
								blockoverride "text" {
									text = "REFORM"
								}
							}
							
							button = {
								layoutpolicy_horizontal = preferred
								size = { 0 180 }
								using = default_button
								datacontext = "[GetPlayer.GetLawBeingEnacted]"
								visible = "[Law.IsBeingEnacted]"
								onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"

								vbox = {
									layoutpolicy_horizontal = preferred
									layoutpolicy_vertical = preferred
									margin = { 20 10 }
									spacing = 5

									textbox = {
										layoutpolicy_horizontal = preferred
										size = { 0 30 }
										text = "LAW_FROM_TO"
										align = center|nobaseline
										elide = right
										using = fontsize_large
										fontsize_min = 14
									}
									
									hbox = {
										layoutpolicy_horizontal = preferred
										layoutpolicy_vertical = preferred
										spacing = 10
										
										law_enactment_progress = {
											size = { 100 100 }
										}

										vbox = {
											layoutpolicy_horizontal = preferred
											layoutpolicy_vertical = preferred
											
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 25 }
												text = "NEXT_CHECKPOINT_SHORT"
												align = right|nobaseline
												elide = right
											}
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 25 }
												text = "OUTCOME_SUCCESS"
												align = right|nobaseline
												elide = right
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointSuccessChance, '(CFixedPoint)0'))]"
											}
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 25 }
												text = "OUTCOME_ADVANCE"
												align = right|nobaseline
												elide = right
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointAdvanceChance, '(CFixedPoint)0'))]"
											}
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 25 }
												text = "OUTCOME_DEBATE"
												align = right|nobaseline
												elide = right
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointDebateChance, '(CFixedPoint)0'))]"
											}
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 25 }
												text = "OUTCOME_STALL"
												align = right|nobaseline
												elide = right
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointStallChance, '(CFixedPoint)0'))]"
											}
										}
									}
								}
							}
							
							empty_state_dynamic_width = {
								visible = "[Not(Law.IsBeingEnacted)]"
								text = "NO_LAW_BEING_ENACTED"
							}
						}

						### POLITICAL MOVEMENTS
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							
							default_header_clean_faded = {
								layoutpolicy_horizontal = preferred
								size = { 0 44 }
								blockoverride "text" {
									text = "POLITICAL_MOVEMENTS"
								}
							}
										
							vbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = preferred
								visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessPoliticalMovements))]"
								datamodel = "[AccessPlayer.AccessPoliticalMovements]"
								spacing = 5

								item = {
									button = {
										layoutpolicy_horizontal = preferred
										size = { 0 180 }
										onclick = "[InformationPanelBar.OpenChangeLaw(PoliticalMovement.AccessLaw)]"
										using = default_button

										vbox = {
											layoutpolicy_horizontal = preferred
											layoutpolicy_vertical = preferred
											margin = { 20 10 }
											spacing = 5

											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 30 }
												text = "[PoliticalMovement.GetName]"
												align = center|nobaseline
												elide = right
												using = fontsize_large
												fontsize_min = 14
											}

											hbox = {
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = preferred
												spacing = 10
												
												law_icon = {
													datacontext = "[PoliticalMovement.GetLaw]"
													size = { 90 90 }
												}
												
												vbox = {
													layoutpolicy_horizontal = preferred
													layoutpolicy_vertical = preferred
													
													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 25 }
														text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
														using = political_movement_support_tooltip_with_graph
														align = right|nobaseline
														elide = right
													}
													
													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 25 }
														visible = "[Not(PoliticalMovement.IsPlacated)]"
														text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
														using = political_movement_radicalism_tooltip_with_graph
														align = right|nobaseline
														elide = right
													}	
													
													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 25 }
														visible = "[PoliticalMovement.IsPlacated]"
														text = "[concept_political_movement_placated]"
														align = right|nobaseline
														elide = right
													}
													
													widget = {
														layoutpolicy_horizontal = preferred
														size = { 0 30 }
														
														flowcontainer = {
															parentanchor = right
															spacing = 2
															tooltip = "POLITICAL_MOVEMENT_POP_SUPPORT_TOOLTIP"
													
															icon = {
																texture = "gfx/interface/icons/generic_icons/population.dds"
																size = { 30 30 }
															}
															textbox = {
																autoresize = yes
																text = "[PoliticalMovement.GetNumSupportingPops|Dv]"
																align = right|nobaseline
																parentanchor = vcenter
															}						
														}
													}
													
													hbox = {
														layoutpolicy_horizontal = preferred
														layoutpolicy_vertical = preferred
														visible = "[Not(IsDataModelEmpty(PoliticalMovement.AccessSupportingInterestGroups))]"
														datamodel = "[PoliticalMovement.AccessSupportingInterestGroups]"
														
														widget = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
														}

														item = {
															ig_button = {
																size = { 35 35 }
																
																#PRCAL-7234
																tooltip = "CLOUT_PIECHART"
															}
														}
													}
												}
											}
										}
									}
								}
							}
							
							empty_state_dynamic_width = {
								visible = "[IsDataModelEmpty(AccessPlayer.AccessPoliticalMovements)]"
								text = "NO_POLITICAL_MOVEMENTS"
							}
						}

						### CIVIL WARS
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							visible = "[Not(IsDataModelEmpty(Country.AccessCivilWars))]"
							spacing = 10

							default_header_clean_faded = {
								layoutpolicy_horizontal = preferred
								size = { 0 44 }
								blockoverride "text" {
									text = "CIVIL_WARS"
								}
							}

							vbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = preferred
								datamodel = "[Country.AccessCivilWars]"
								spacing = 10
								
								item = {
									widget = {
										layoutpolicy_horizontal = preferred
										size = { 0 220 }
										
										background = {
											using = entry_bg_simple
										}
										
										vbox = {
											layoutpolicy_horizontal = preferred
											layoutpolicy_vertical = preferred
											spacing = 5
											margin_top = 5
										
											### revolution header
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 30 }
												visible = "[And(CivilWar.IsRevolution, CivilWar.HasPoliticalMovement)]"
												text = "REVOLUTIONS_HEADER"
												tooltip = "REVOLUTIONS_HEADER_TOOLTIP"
												elide = right
												using = fontsize_large
												align = center|nobaseline
											}

											### secession header
											textbox = {
												layoutpolicy_horizontal = preferred
												size = { 0 30 }
												visible = "[CivilWar.IsSecession]"
												text = "SECESSION_HEADER"
												tooltip = "SECESSION_HEADER_TOOLTIP"
												elide = right
												using = fontsize_large
												align = center|nobaseline
											}

											### HAS NOT BROKEN OUT
											vbox = {
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = preferred
												visible = "[Not( CivilWar.HasBrokenOut )]"
												margin = { 10 0 }

												#### REVOLUTION PROGRESSBAR ####
												bad_progressbar_horizontal = {
													layoutpolicy_horizontal = preferred
													size = { 0 35 }
													visible = "[And(CivilWar.IsRevolution, CivilWar.HasPoliticalMovement)]"
													
													blockoverride "values" {
														value = "[FixedPointToFloat( CivilWar.GetProgress )]"
														min = 0
														max = 1
													}
													tooltip = "REVOLUTIONS_PROGRESS_TOOLTIP"

													textbox = {
														autoresize = yes
														text = "[CivilWar.GetProgress|%0v]"
														using = fontsize_large
														align = center|nobaseline
														parentanchor = center
													}

													icon = {
														size = { 30 30 }
														texture = "gfx/interface/icons/politics_icons/radicalized.dds"
														parentanchor = right|vcenter
														position = { -5 0 }
													}
												}

												#### SECESSION PROGRESSBAR ####
												bad_progressbar_horizontal = {
													layoutpolicy_horizontal = preferred
													size = { 0 35 }
													visible = "[CivilWar.IsSecession]"

													blockoverride "values" {
														value = "[FixedPointToFloat( CivilWar.GetProgress )]"
														min = 0
														max = 1
													}
													tooltip = "SECESSION_PROGRESS_TOOLTIP"
													
													textbox = {
														autoresize = yes
														text = "[CivilWar.GetProgress|%0v]"
														using = fontsize_large
														align = center|nobaseline
														parentanchor = center
													}

													icon = {
														size = { 30 30 }
														texture = "gfx/interface/icons/war_goals/secession.dds"
														parentanchor = right|vcenter
														position = { -5 0 }
													}
												}

												textbox = {
													text = "[CivilWar.GetUprisingNumUnitsString]"
													tooltip = "[CivilWar.GetUprisingStatesString]"
													minimumsize = { @non_layoutpolicy_max_width -1 }
													maximumsize = { @non_layoutpolicy_max_width -1 }
													multiline = yes
													autoresize = yes
													using = fontsize_large
													align = center|nobaseline
													margin_top = 5
												}
											}
											
											### HAS BROKEN OUT
											widget = {
												layoutpolicy_horizontal = preferred
												size = { 0 90 }
												visible = "[CivilWar.HasBrokenOut]"
												
												icon = {
													using = rotate_glow_animation_02
													blockoverride "rotate_animation_texture" {
														texture = "gfx/interface/animation/color_bad.dds"
													}
													size = { 400 400 }
													parentanchor = center
												}
												
												vbox = {
													layoutpolicy_horizontal = preferred
													layoutpolicy_vertical = preferred

													#### REVOLUTION ICON + TEXT ####
													icon = {
														visible = "[CivilWar.IsRevolution]"
														size = { 50 50 }
														texture = "gfx/interface/icons/politics_icons/revolution.dds"
													}

													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 20 }
														visible = "[And(CivilWar.IsRevolution, And( CivilWar.HasBrokenOut, CivilWar.IsOriginCountry( GetPlayer.Self )))]"
														text = "REVOLUTIONS_UPRISING_HEADER_LOYALIST"
														align = center|nobaseline
													}

													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 20 }
														visible = "[And(CivilWar.IsRevolution, And( CivilWar.HasBrokenOut, CivilWar.IsUprisingCountry( GetPlayer.Self )))]"
														text = "REVOLUTIONS_UPRISING_HEADER_REBEL"
														align = center|nobaseline
													}

													#### SECESSION ICON + TEXT ####
													icon = {
														visible = "[CivilWar.IsSecession]"
														size = { 50 50 }
														texture = "gfx/interface/icons/war_goals/secession.dds"
													}
													
													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 20 }
														visible = "[And(CivilWar.IsSecession, And( CivilWar.HasBrokenOut, CivilWar.IsOriginCountry( GetPlayer.Self )))]"
														text = "SECESSION_UPRISING_HEADER_LOYALIST"
														align = center|nobaseline
													}

													textbox = {
														layoutpolicy_horizontal = preferred
														size = { 0 20 }
														visible = "[And(CivilWar.IsSecession, And( CivilWar.HasBrokenOut, CivilWar.IsUprisingCountry( GetPlayer.Self )))]"
														text = "SECESSION_UPRISING_HEADER_REBEL"
														align = center|nobaseline
													}
												}
											}
											
											### REVOLUTION INFO
											vbox = {
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = preferred
												visible = "[And( CivilWar.IsRevolution, CivilWar.IsOriginCountry( GetPlayer.Self ) )]"
												spacing = 5
												
												textbox = {
													layoutpolicy_horizontal = preferred
													size = { 0 25 }
													visible = "[Not( IsDataModelEmpty( CivilWar.AccessInsurrectionaryIGs( GetPlayer.Self ) ) )]"
													text = "REVOLUTIONS_IG_LIST_HEADER"
													tooltip = "REVOLUTIONS_IG_LIST_HEADER_TOOLTIP"
													align = center|nobaseline
													margin = { 10 0 }
													elide = right
												}

												flowcontainer = {
													datamodel = "[CivilWar.AccessInsurrectionaryIGs( GetPlayer.Self )]"

													item = {
														ig_button = {
															size = { 35 35 }
															
															#PRCAL-7234
															tooltip = "CLOUT_PIECHART"
														}
													}
												}
											}

											### SECESSION INFO
											vbox = {
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = preferred
												visible = "[And( CivilWar.IsSecession, CivilWar.IsOriginCountry( GetPlayer.Self ) )]"

												textbox = {
													layoutpolicy_horizontal = preferred
													size = { 0 25 }
													text = "SECESSION_CULTURE_TEXT"
													align = center|nobaseline
													elide = right
												}
													
												textbox = {
													layoutpolicy_horizontal = preferred
													size = { 0 25 }
													text = "SECESSION_CULTURE_TURMOIL_TEXT"
													tooltip = "SECESSION_CULTURE_TURMOIL_TEXT_TOOLTIP"
													align = center|nobaseline
													elide = right
												}

												textbox = {
													layoutpolicy_horizontal = preferred
													size = { 0 25 }
													visible = "[And( CivilWar.IsSecession, And( CivilWar.IsOriginCountry( GetPlayer.Self ), Not( CivilWar.HasRevoltTag )))]"
													text = "SECESSION_NO_REVOLT_TAG"
													tooltip = "SECESSION_NO_REVOLT_TAG_TOOLTIP"
													align = center|nobaseline
													elide = right
												}
											}
											
											widget = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
											}
										}
									}
								}
							}
						}
						
						### INSTITUTIONS
						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred

							default_header_clean_faded = {
								layoutpolicy_horizontal = preferred
								size = { 0 44 }
								blockoverride "text" {
									text = "INSTITUTIONS"
								}
							}

							vbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = preferred
								datamodel = "[AccessPlayer.AccessInstitutions]"
								visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessInstitutions))]"
								spacing = 5
								margin = { 5 5 }

								item = {
									hbox = {
										layoutpolicy_horizontal = preferred
										layoutpolicy_vertical = preferred
										spacing = 7
										margin = { 10 10 }
										
										background = { 
											using = entry_bg_simple
										}

										institution_icon = {
											size = { 40 40 }
										}
										
										textbox = {
											layoutpolicy_horizontal = preferred
											size = { 0 30 }
											text = "INSTITUTION_NAME_AND_LEVEL"
											align = nobaseline
											using = fontsize_large
										}
									}
								}
							}

							empty_state_dynamic_width = {
								visible = "[IsDataModelEmpty(AccessPlayer.AccessInstitutions)]"
								text = "NO_INSTITUTIONS"
							}

							hbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = preferred
								margin = { 15 5 }
								spacing = 5
								
								textbox = {
									layoutpolicy_horizontal = preferred
									size = { 0 25 }
									text = "WEEKLY_COSTS_TITLE"
									align = nobaseline
									elide = right
								}

								textbox = {
									text = "@bur![Country.GetInstitutionInvestmentBureaucracyCost|0v]#!"
									tooltip = "[Country.GetInstitutionInvestmentBureaucracyCostDesc]"
									align = nobaseline
									elide = right
									autoresize = yes
									using = fontsize_large
								}
							}
						}
						
						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
					}
				}
			}
		}
	}
}
